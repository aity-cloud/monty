// @generated by protoc-gen-es v1.3.0 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file github.com/rancher/opni/pkg/config/v1/config_server.proto (package config.v1, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { FieldMask, Message, proto3 } from "@bufbuild/protobuf";
import { GatewayConfigSpec } from "./gateway_config_pb";
import { Revision } from "../../apis/core/v1/core_pb";
import { Action, Target } from "../../plugins/driverutil/types_pb";
import { Violations } from "../../../../../../buf/validate/expression_pb";

/**
 * @generated from message config.v1.SetRequest
 */
export class SetRequest extends Message<SetRequest> {
  /**
   * @generated from field: config.v1.GatewayConfigSpec spec = 1;
   */
  spec?: GatewayConfigSpec;

  constructor(data?: PartialMessage<SetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "config.v1.SetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "spec", kind: "message", T: GatewayConfigSpec },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetRequest {
    return new SetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetRequest {
    return new SetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetRequest {
    return new SetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetRequest | PlainMessage<SetRequest> | undefined, b: SetRequest | PlainMessage<SetRequest> | undefined): boolean {
    return proto3.util.equals(SetRequest, a, b);
  }
}

/**
 * @generated from message config.v1.ResetRequest
 */
export class ResetRequest extends Message<ResetRequest> {
  /**
   * @generated from field: core.Revision revision = 1;
   */
  revision?: Revision;

  /**
   * @generated from field: google.protobuf.FieldMask mask = 2;
   */
  mask?: FieldMask;

  /**
   * @generated from field: config.v1.GatewayConfigSpec patch = 3;
   */
  patch?: GatewayConfigSpec;

  constructor(data?: PartialMessage<ResetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "config.v1.ResetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "revision", kind: "message", T: Revision },
    { no: 2, name: "mask", kind: "message", T: FieldMask },
    { no: 3, name: "patch", kind: "message", T: GatewayConfigSpec },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResetRequest {
    return new ResetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResetRequest {
    return new ResetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResetRequest {
    return new ResetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ResetRequest | PlainMessage<ResetRequest> | undefined, b: ResetRequest | PlainMessage<ResetRequest> | undefined): boolean {
    return proto3.util.equals(ResetRequest, a, b);
  }
}

/**
 * @generated from message config.v1.DryRunRequest
 */
export class DryRunRequest extends Message<DryRunRequest> {
  /**
   * @generated from field: driverutil.Target target = 1;
   */
  target = Target.ActiveConfiguration;

  /**
   * @generated from field: driverutil.Action action = 2;
   */
  action = Action.NoAction;

  /**
   * Set
   *
   * @generated from field: config.v1.GatewayConfigSpec spec = 3;
   */
  spec?: GatewayConfigSpec;

  /**
   * Reset
   *
   * @generated from field: core.Revision revision = 4;
   */
  revision?: Revision;

  /**
   * Reset
   *
   * @generated from field: config.v1.GatewayConfigSpec patch = 5;
   */
  patch?: GatewayConfigSpec;

  /**
   * Reset
   *
   * @generated from field: google.protobuf.FieldMask mask = 6;
   */
  mask?: FieldMask;

  constructor(data?: PartialMessage<DryRunRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "config.v1.DryRunRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "target", kind: "enum", T: proto3.getEnumType(Target) },
    { no: 2, name: "action", kind: "enum", T: proto3.getEnumType(Action) },
    { no: 3, name: "spec", kind: "message", T: GatewayConfigSpec },
    { no: 4, name: "revision", kind: "message", T: Revision },
    { no: 5, name: "patch", kind: "message", T: GatewayConfigSpec },
    { no: 6, name: "mask", kind: "message", T: FieldMask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DryRunRequest {
    return new DryRunRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DryRunRequest {
    return new DryRunRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DryRunRequest {
    return new DryRunRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DryRunRequest | PlainMessage<DryRunRequest> | undefined, b: DryRunRequest | PlainMessage<DryRunRequest> | undefined): boolean {
    return proto3.util.equals(DryRunRequest, a, b);
  }
}

/**
 * @generated from message config.v1.DryRunResponse
 */
export class DryRunResponse extends Message<DryRunResponse> {
  /**
   * @generated from field: config.v1.GatewayConfigSpec current = 1;
   */
  current?: GatewayConfigSpec;

  /**
   * @generated from field: config.v1.GatewayConfigSpec modified = 2;
   */
  modified?: GatewayConfigSpec;

  /**
   * @generated from field: buf.validate.Violations validationErrors = 3;
   */
  validationErrors?: Violations;

  constructor(data?: PartialMessage<DryRunResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "config.v1.DryRunResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "current", kind: "message", T: GatewayConfigSpec },
    { no: 2, name: "modified", kind: "message", T: GatewayConfigSpec },
    { no: 3, name: "validationErrors", kind: "message", T: Violations },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DryRunResponse {
    return new DryRunResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DryRunResponse {
    return new DryRunResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DryRunResponse {
    return new DryRunResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DryRunResponse | PlainMessage<DryRunResponse> | undefined, b: DryRunResponse | PlainMessage<DryRunResponse> | undefined): boolean {
    return proto3.util.equals(DryRunResponse, a, b);
  }
}

/**
 * @generated from message config.v1.HistoryResponse
 */
export class HistoryResponse extends Message<HistoryResponse> {
  /**
   * @generated from field: repeated config.v1.GatewayConfigSpec entries = 1;
   */
  entries: GatewayConfigSpec[] = [];

  constructor(data?: PartialMessage<HistoryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "config.v1.HistoryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entries", kind: "message", T: GatewayConfigSpec, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HistoryResponse {
    return new HistoryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HistoryResponse {
    return new HistoryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HistoryResponse {
    return new HistoryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: HistoryResponse | PlainMessage<HistoryResponse> | undefined, b: HistoryResponse | PlainMessage<HistoryResponse> | undefined): boolean {
    return proto3.util.equals(HistoryResponse, a, b);
  }
}

