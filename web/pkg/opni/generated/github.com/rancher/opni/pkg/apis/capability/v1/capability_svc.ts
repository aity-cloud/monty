// @generated by service-generator v0.0.1 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file github.com/rancher/opni/pkg/apis/capability/v1/capability.proto (package capability, syntax proto3)
/* eslint-disable */

import { Reference, TaskStatus } from "../../core/v1/core_pb";
import { CancelUninstallRequest, Details, DetailsList, Filter, InstallRequest, InstallResponse, NodeCapabilityStatus, StatusRequest, UninstallRequest, UninstallStatusRequest } from "./capability_pb";
import { axios } from "@pkg/opni/utils/axios";


export async function Info(input: Reference): Promise<Details> {
  try {
    return (await axios.request({
    transformResponse: resp => Details.fromBinary(new Uint8Array(resp)),
      method: 'get',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/Backend`,
    data: input?.toBinary() as ArrayBuffer
    })).data;
  } catch (ex) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, new Uint8Array(ex?.response?.data));
      console.error(s);
    }
    throw ex;
  }
}


export async function List(): Promise<DetailsList> {
  try {
    return (await axios.request({
    transformResponse: resp => DetailsList.fromBinary(new Uint8Array(resp)),
      method: 'get',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/Backend`
    })).data;
  } catch (ex) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, new Uint8Array(ex?.response?.data));
      console.error(s);
    }
    throw ex;
  }
}


export async function Install(input: InstallRequest): Promise<InstallResponse> {
  try {
    return (await axios.request({
    transformResponse: resp => InstallResponse.fromBinary(new Uint8Array(resp)),
      method: 'get',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/Backend`,
    data: input?.toBinary() as ArrayBuffer
    })).data;
  } catch (ex) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, new Uint8Array(ex?.response?.data));
      console.error(s);
    }
    throw ex;
  }
}


export async function Status(input: StatusRequest): Promise<NodeCapabilityStatus> {
  try {
    return (await axios.request({
    transformResponse: resp => NodeCapabilityStatus.fromBinary(new Uint8Array(resp)),
      method: 'get',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/Backend`,
    data: input?.toBinary() as ArrayBuffer
    })).data;
  } catch (ex) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, new Uint8Array(ex?.response?.data));
      console.error(s);
    }
    throw ex;
  }
}


export async function Uninstall(input: UninstallRequest): Promise<void> {
  try {
    return (await axios.request({
      method: 'get',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/Backend`,
    data: input?.toBinary() as ArrayBuffer
    })).data;
  } catch (ex) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, new Uint8Array(ex?.response?.data));
      console.error(s);
    }
    throw ex;
  }
}


export async function UninstallStatus(input: UninstallStatusRequest): Promise<TaskStatus> {
  try {
    return (await axios.request({
    transformResponse: resp => TaskStatus.fromBinary(new Uint8Array(resp)),
      method: 'get',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/Backend`,
    data: input?.toBinary() as ArrayBuffer
    })).data;
  } catch (ex) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, new Uint8Array(ex?.response?.data));
      console.error(s);
    }
    throw ex;
  }
}


export async function CancelUninstall(input: CancelUninstallRequest): Promise<void> {
  try {
    return (await axios.request({
      method: 'get',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/Backend`,
    data: input?.toBinary() as ArrayBuffer
    })).data;
  } catch (ex) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, new Uint8Array(ex?.response?.data));
      console.error(s);
    }
    throw ex;
  }
}


export async function SyncNow(input: Filter): Promise<void> {
  try {
    return (await axios.request({
      method: 'get',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/Node`,
    data: input?.toBinary() as ArrayBuffer
    })).data;
  } catch (ex) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, new Uint8Array(ex?.response?.data));
      console.error(s);
    }
    throw ex;
  }
}

