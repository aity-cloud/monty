// @generated by service-generator v0.0.1 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file github.com/rancher/opni/plugins/metrics/apis/node/config.proto (package node.metrics.config, syntax proto3)
/* eslint-disable */

import { ConfigurationHistoryRequest, ConfigurationHistoryResponse, GetRequest, MetricsCapabilityConfig, ResetRequest, SetRequest } from "./config_pb";
import { axios } from "@pkg/opni/utils/axios";


export async function GetDefaultConfiguration(input: GetRequest): Promise<MetricsCapabilityConfig> {
  try {
    
    if (input) {
      console.info('Here is the input for a request to NodeConfiguration-GetDefaultConfiguration:', input);
    }
  
    const response = (await axios.request({
    transformResponse: resp => MetricsCapabilityConfig.fromBinary(new Uint8Array(resp)),
      method: 'get',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/NodeConfiguration/node_config`,
    data: input?.toBinary() as ArrayBuffer
    })).data;

    console.info('Here is the response for a request to NodeConfiguration-GetDefaultConfiguration:', response);
    return response
  } catch (ex: any) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, Array.from(new Uint8Array(ex?.response?.data)));
      console.error(s);
    }
    throw ex;
  }
}


export async function SetDefaultConfiguration(input: SetRequest): Promise<void> {
  try {
    
    if (input) {
      console.info('Here is the input for a request to NodeConfiguration-SetDefaultConfiguration:', input);
    }
  
    const response = (await axios.request({
      method: 'put',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/NodeConfiguration/node_config`,
    data: input?.toBinary() as ArrayBuffer
    })).data;

    console.info('Here is the response for a request to NodeConfiguration-SetDefaultConfiguration:', response);
    return response
  } catch (ex: any) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, Array.from(new Uint8Array(ex?.response?.data)));
      console.error(s);
    }
    throw ex;
  }
}


export async function ResetDefaultConfiguration(): Promise<void> {
  try {
    
    const response = (await axios.request({
      method: 'post',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/NodeConfiguration/node_config/reset`
    })).data;

    console.info('Here is the response for a request to NodeConfiguration-ResetDefaultConfiguration:', response);
    return response
  } catch (ex: any) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, Array.from(new Uint8Array(ex?.response?.data)));
      console.error(s);
    }
    throw ex;
  }
}


export async function GetConfiguration(input: GetRequest): Promise<MetricsCapabilityConfig> {
  try {
    
    if (input) {
      console.info('Here is the input for a request to NodeConfiguration-GetConfiguration:', input);
    }
  
    const response = (await axios.request({
    transformResponse: resp => MetricsCapabilityConfig.fromBinary(new Uint8Array(resp)),
      method: 'get',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/NodeConfiguration/node_config/${input.node.id}`,
    data: input?.toBinary() as ArrayBuffer
    })).data;

    console.info('Here is the response for a request to NodeConfiguration-GetConfiguration:', response);
    return response
  } catch (ex: any) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, Array.from(new Uint8Array(ex?.response?.data)));
      console.error(s);
    }
    throw ex;
  }
}


export async function SetConfiguration(input: SetRequest): Promise<void> {
  try {
    
    if (input) {
      console.info('Here is the input for a request to NodeConfiguration-SetConfiguration:', input);
    }
  
    const response = (await axios.request({
      method: 'put',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/NodeConfiguration/node_config/${input.node.id}`,
    data: input?.toBinary() as ArrayBuffer
    })).data;

    console.info('Here is the response for a request to NodeConfiguration-SetConfiguration:', response);
    return response
  } catch (ex: any) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, Array.from(new Uint8Array(ex?.response?.data)));
      console.error(s);
    }
    throw ex;
  }
}


export async function ResetConfiguration(input: ResetRequest): Promise<void> {
  try {
    
    if (input) {
      console.info('Here is the input for a request to NodeConfiguration-ResetConfiguration:', input);
    }
  
    const response = (await axios.request({
      method: 'post',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/NodeConfiguration/node_config/${input.node.id}/reset`,
    data: input?.toBinary() as ArrayBuffer
    })).data;

    console.info('Here is the response for a request to NodeConfiguration-ResetConfiguration:', response);
    return response
  } catch (ex: any) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, Array.from(new Uint8Array(ex?.response?.data)));
      console.error(s);
    }
    throw ex;
  }
}


export async function ConfigurationHistory(input: ConfigurationHistoryRequest): Promise<ConfigurationHistoryResponse> {
  try {
    
    if (input) {
      console.info('Here is the input for a request to NodeConfiguration-ConfigurationHistory:', input);
    }
  
    const response = (await axios.request({
    transformResponse: resp => ConfigurationHistoryResponse.fromBinary(new Uint8Array(resp)),
      method: 'get',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/NodeConfiguration/node_config/${input.node.id}/history`,
    data: input?.toBinary() as ArrayBuffer
    })).data;

    console.info('Here is the response for a request to NodeConfiguration-ConfigurationHistory:', response);
    return response
  } catch (ex: any) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, Array.from(new Uint8Array(ex?.response?.data)));
      console.error(s);
    }
    throw ex;
  }
}

