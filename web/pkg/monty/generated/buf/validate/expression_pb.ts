// @generated by protoc-gen-es v1.3.0 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file buf/validate/expression.proto (package buf.validate, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message buf.validate.Constraint
 */
export class Constraint extends Message<Constraint> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string message = 2;
   */
  message = "";

  /**
   * @generated from field: string expression = 3;
   */
  expression = "";

  constructor(data?: PartialMessage<Constraint>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.validate.Constraint";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "expression", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Constraint {
    return new Constraint().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Constraint {
    return new Constraint().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Constraint {
    return new Constraint().fromJsonString(jsonString, options);
  }

  static equals(a: Constraint | PlainMessage<Constraint> | undefined, b: Constraint | PlainMessage<Constraint> | undefined): boolean {
    return proto3.util.equals(Constraint, a, b);
  }
}

/**
 * @generated from message buf.validate.Violations
 */
export class Violations extends Message<Violations> {
  /**
   * @generated from field: repeated buf.validate.Violation violations = 1;
   */
  violations: Violation[] = [];

  constructor(data?: PartialMessage<Violations>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.validate.Violations";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "violations", kind: "message", T: Violation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Violations {
    return new Violations().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Violations {
    return new Violations().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Violations {
    return new Violations().fromJsonString(jsonString, options);
  }

  static equals(a: Violations | PlainMessage<Violations> | undefined, b: Violations | PlainMessage<Violations> | undefined): boolean {
    return proto3.util.equals(Violations, a, b);
  }
}

/**
 * @generated from message buf.validate.Violation
 */
export class Violation extends Message<Violation> {
  /**
   * @generated from field: string field_path = 1;
   */
  fieldPath = "";

  /**
   * @generated from field: string constraint_id = 2;
   */
  constraintId = "";

  /**
   * @generated from field: string message = 3;
   */
  message = "";

  /**
   * @generated from field: bool for_key = 4;
   */
  forKey = false;

  constructor(data?: PartialMessage<Violation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.validate.Violation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "field_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "constraint_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "for_key", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Violation {
    return new Violation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Violation {
    return new Violation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Violation {
    return new Violation().fromJsonString(jsonString, options);
  }

  static equals(a: Violation | PlainMessage<Violation> | undefined, b: Violation | PlainMessage<Violation> | undefined): boolean {
    return proto3.util.equals(Violation, a, b);
  }
}

