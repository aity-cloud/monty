// @generated by protoc-gen-es v1.3.0 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file buf/validate/validate.proto (package buf.validate, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { Constraint } from "./expression_pb";

/**
 * @generated from enum buf.validate.KnownRegex
 */
export enum KnownRegex {
  /**
   * @generated from enum value: KNOWN_REGEX_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: KNOWN_REGEX_HTTP_HEADER_NAME = 1;
   */
  HTTP_HEADER_NAME = 1,

  /**
   * @generated from enum value: KNOWN_REGEX_HTTP_HEADER_VALUE = 2;
   */
  HTTP_HEADER_VALUE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(KnownRegex)
proto3.util.setEnumType(KnownRegex, "buf.validate.KnownRegex", [
  { no: 0, name: "KNOWN_REGEX_UNSPECIFIED" },
  { no: 1, name: "KNOWN_REGEX_HTTP_HEADER_NAME" },
  { no: 2, name: "KNOWN_REGEX_HTTP_HEADER_VALUE" },
]);

/**
 * @generated from message buf.validate.MessageConstraints
 */
export class MessageConstraints extends Message<MessageConstraints> {
  /**
   * @generated from field: optional bool disabled = 1;
   */
  disabled?: boolean;

  /**
   * @generated from field: repeated buf.validate.Constraint cel = 3;
   */
  cel: Constraint[] = [];

  constructor(data?: PartialMessage<MessageConstraints>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.validate.MessageConstraints";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "disabled", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 3, name: "cel", kind: "message", T: Constraint, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageConstraints {
    return new MessageConstraints().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageConstraints {
    return new MessageConstraints().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageConstraints {
    return new MessageConstraints().fromJsonString(jsonString, options);
  }

  static equals(a: MessageConstraints | PlainMessage<MessageConstraints> | undefined, b: MessageConstraints | PlainMessage<MessageConstraints> | undefined): boolean {
    return proto3.util.equals(MessageConstraints, a, b);
  }
}

/**
 * @generated from message buf.validate.OneofConstraints
 */
export class OneofConstraints extends Message<OneofConstraints> {
  /**
   * @generated from field: optional bool required = 1;
   */
  required?: boolean;

  constructor(data?: PartialMessage<OneofConstraints>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.validate.OneofConstraints";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "required", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OneofConstraints {
    return new OneofConstraints().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OneofConstraints {
    return new OneofConstraints().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OneofConstraints {
    return new OneofConstraints().fromJsonString(jsonString, options);
  }

  static equals(a: OneofConstraints | PlainMessage<OneofConstraints> | undefined, b: OneofConstraints | PlainMessage<OneofConstraints> | undefined): boolean {
    return proto3.util.equals(OneofConstraints, a, b);
  }
}

/**
 * @generated from message buf.validate.FieldConstraints
 */
export class FieldConstraints extends Message<FieldConstraints> {
  /**
   * @generated from oneof buf.validate.FieldConstraints.type
   */
  type: {
    /**
     * @generated from field: buf.validate.FloatRules float = 1;
     */
    value: FloatRules;
    case: "float";
  } | {
    /**
     * @generated from field: buf.validate.DoubleRules double = 2;
     */
    value: DoubleRules;
    case: "double";
  } | {
    /**
     * @generated from field: buf.validate.Int32Rules int32 = 3;
     */
    value: Int32Rules;
    case: "int32";
  } | {
    /**
     * @generated from field: buf.validate.Int64Rules int64 = 4;
     */
    value: Int64Rules;
    case: "int64";
  } | {
    /**
     * @generated from field: buf.validate.UInt32Rules uint32 = 5;
     */
    value: UInt32Rules;
    case: "uint32";
  } | {
    /**
     * @generated from field: buf.validate.UInt64Rules uint64 = 6;
     */
    value: UInt64Rules;
    case: "uint64";
  } | {
    /**
     * @generated from field: buf.validate.SInt32Rules sint32 = 7;
     */
    value: SInt32Rules;
    case: "sint32";
  } | {
    /**
     * @generated from field: buf.validate.SInt64Rules sint64 = 8;
     */
    value: SInt64Rules;
    case: "sint64";
  } | {
    /**
     * @generated from field: buf.validate.Fixed32Rules fixed32 = 9;
     */
    value: Fixed32Rules;
    case: "fixed32";
  } | {
    /**
     * @generated from field: buf.validate.Fixed64Rules fixed64 = 10;
     */
    value: Fixed64Rules;
    case: "fixed64";
  } | {
    /**
     * @generated from field: buf.validate.SFixed32Rules sfixed32 = 11;
     */
    value: SFixed32Rules;
    case: "sfixed32";
  } | {
    /**
     * @generated from field: buf.validate.SFixed64Rules sfixed64 = 12;
     */
    value: SFixed64Rules;
    case: "sfixed64";
  } | {
    /**
     * @generated from field: buf.validate.BoolRules bool = 13;
     */
    value: BoolRules;
    case: "bool";
  } | {
    /**
     * @generated from field: buf.validate.StringRules string = 14;
     */
    value: StringRules;
    case: "string";
  } | {
    /**
     * @generated from field: buf.validate.BytesRules bytes = 15;
     */
    value: BytesRules;
    case: "bytes";
  } | {
    /**
     * @generated from field: buf.validate.EnumRules enum = 16;
     */
    value: EnumRules;
    case: "enum";
  } | {
    /**
     * @generated from field: buf.validate.RepeatedRules repeated = 18;
     */
    value: RepeatedRules;
    case: "repeated";
  } | {
    /**
     * @generated from field: buf.validate.MapRules map = 19;
     */
    value: MapRules;
    case: "map";
  } | {
    /**
     * @generated from field: buf.validate.AnyRules any = 20;
     */
    value: AnyRules;
    case: "any";
  } | {
    /**
     * @generated from field: buf.validate.DurationRules duration = 21;
     */
    value: DurationRules;
    case: "duration";
  } | {
    /**
     * @generated from field: buf.validate.TimestampRules timestamp = 22;
     */
    value: TimestampRules;
    case: "timestamp";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: repeated buf.validate.Constraint cel = 23;
   */
  cel: Constraint[] = [];

  /**
   * @generated from field: bool skipped = 24;
   */
  skipped = false;

  /**
   * @generated from field: bool required = 25;
   */
  required = false;

  /**
   * @generated from field: bool ignore_empty = 26;
   */
  ignoreEmpty = false;

  /**
   * @generated from field: buf.validate.Constraint ignore_if = 27;
   */
  ignoreIf?: Constraint;

  constructor(data?: PartialMessage<FieldConstraints>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.validate.FieldConstraints";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "float", kind: "message", T: FloatRules, oneof: "type" },
    { no: 2, name: "double", kind: "message", T: DoubleRules, oneof: "type" },
    { no: 3, name: "int32", kind: "message", T: Int32Rules, oneof: "type" },
    { no: 4, name: "int64", kind: "message", T: Int64Rules, oneof: "type" },
    { no: 5, name: "uint32", kind: "message", T: UInt32Rules, oneof: "type" },
    { no: 6, name: "uint64", kind: "message", T: UInt64Rules, oneof: "type" },
    { no: 7, name: "sint32", kind: "message", T: SInt32Rules, oneof: "type" },
    { no: 8, name: "sint64", kind: "message", T: SInt64Rules, oneof: "type" },
    { no: 9, name: "fixed32", kind: "message", T: Fixed32Rules, oneof: "type" },
    { no: 10, name: "fixed64", kind: "message", T: Fixed64Rules, oneof: "type" },
    { no: 11, name: "sfixed32", kind: "message", T: SFixed32Rules, oneof: "type" },
    { no: 12, name: "sfixed64", kind: "message", T: SFixed64Rules, oneof: "type" },
    { no: 13, name: "bool", kind: "message", T: BoolRules, oneof: "type" },
    { no: 14, name: "string", kind: "message", T: StringRules, oneof: "type" },
    { no: 15, name: "bytes", kind: "message", T: BytesRules, oneof: "type" },
    { no: 16, name: "enum", kind: "message", T: EnumRules, oneof: "type" },
    { no: 18, name: "repeated", kind: "message", T: RepeatedRules, oneof: "type" },
    { no: 19, name: "map", kind: "message", T: MapRules, oneof: "type" },
    { no: 20, name: "any", kind: "message", T: AnyRules, oneof: "type" },
    { no: 21, name: "duration", kind: "message", T: DurationRules, oneof: "type" },
    { no: 22, name: "timestamp", kind: "message", T: TimestampRules, oneof: "type" },
    { no: 23, name: "cel", kind: "message", T: Constraint, repeated: true },
    { no: 24, name: "skipped", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 25, name: "required", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 26, name: "ignore_empty", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 27, name: "ignore_if", kind: "message", T: Constraint },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FieldConstraints {
    return new FieldConstraints().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FieldConstraints {
    return new FieldConstraints().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FieldConstraints {
    return new FieldConstraints().fromJsonString(jsonString, options);
  }

  static equals(a: FieldConstraints | PlainMessage<FieldConstraints> | undefined, b: FieldConstraints | PlainMessage<FieldConstraints> | undefined): boolean {
    return proto3.util.equals(FieldConstraints, a, b);
  }
}

/**
 * @generated from message buf.validate.FloatRules
 */
export class FloatRules extends Message<FloatRules> {
  /**
   * @generated from field: optional float const = 1;
   */
  const?: number;

  /**
   * @generated from oneof buf.validate.FloatRules.less_than
   */
  lessThan: {
    /**
     * @generated from field: float lt = 2;
     */
    value: number;
    case: "lt";
  } | {
    /**
     * @generated from field: float lte = 3;
     */
    value: number;
    case: "lte";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from oneof buf.validate.FloatRules.greater_than
   */
  greaterThan: {
    /**
     * @generated from field: float gt = 4;
     */
    value: number;
    case: "gt";
  } | {
    /**
     * @generated from field: float gte = 5;
     */
    value: number;
    case: "gte";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: repeated float in = 6;
   */
  in: number[] = [];

  /**
   * @generated from field: repeated float not_in = 7;
   */
  notIn: number[] = [];

  /**
   * @generated from field: bool finite = 8;
   */
  finite = false;

  constructor(data?: PartialMessage<FloatRules>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.validate.FloatRules";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "const", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 2, name: "lt", kind: "scalar", T: 2 /* ScalarType.FLOAT */, oneof: "less_than" },
    { no: 3, name: "lte", kind: "scalar", T: 2 /* ScalarType.FLOAT */, oneof: "less_than" },
    { no: 4, name: "gt", kind: "scalar", T: 2 /* ScalarType.FLOAT */, oneof: "greater_than" },
    { no: 5, name: "gte", kind: "scalar", T: 2 /* ScalarType.FLOAT */, oneof: "greater_than" },
    { no: 6, name: "in", kind: "scalar", T: 2 /* ScalarType.FLOAT */, repeated: true },
    { no: 7, name: "not_in", kind: "scalar", T: 2 /* ScalarType.FLOAT */, repeated: true },
    { no: 8, name: "finite", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FloatRules {
    return new FloatRules().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FloatRules {
    return new FloatRules().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FloatRules {
    return new FloatRules().fromJsonString(jsonString, options);
  }

  static equals(a: FloatRules | PlainMessage<FloatRules> | undefined, b: FloatRules | PlainMessage<FloatRules> | undefined): boolean {
    return proto3.util.equals(FloatRules, a, b);
  }
}

/**
 * @generated from message buf.validate.DoubleRules
 */
export class DoubleRules extends Message<DoubleRules> {
  /**
   * @generated from field: optional double const = 1;
   */
  const?: number;

  /**
   * @generated from oneof buf.validate.DoubleRules.less_than
   */
  lessThan: {
    /**
     * @generated from field: double lt = 2;
     */
    value: number;
    case: "lt";
  } | {
    /**
     * @generated from field: double lte = 3;
     */
    value: number;
    case: "lte";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from oneof buf.validate.DoubleRules.greater_than
   */
  greaterThan: {
    /**
     * @generated from field: double gt = 4;
     */
    value: number;
    case: "gt";
  } | {
    /**
     * @generated from field: double gte = 5;
     */
    value: number;
    case: "gte";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: repeated double in = 6;
   */
  in: number[] = [];

  /**
   * @generated from field: repeated double not_in = 7;
   */
  notIn: number[] = [];

  /**
   * @generated from field: bool finite = 8;
   */
  finite = false;

  constructor(data?: PartialMessage<DoubleRules>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.validate.DoubleRules";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "const", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, opt: true },
    { no: 2, name: "lt", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, oneof: "less_than" },
    { no: 3, name: "lte", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, oneof: "less_than" },
    { no: 4, name: "gt", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, oneof: "greater_than" },
    { no: 5, name: "gte", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, oneof: "greater_than" },
    { no: 6, name: "in", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, repeated: true },
    { no: 7, name: "not_in", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, repeated: true },
    { no: 8, name: "finite", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DoubleRules {
    return new DoubleRules().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DoubleRules {
    return new DoubleRules().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DoubleRules {
    return new DoubleRules().fromJsonString(jsonString, options);
  }

  static equals(a: DoubleRules | PlainMessage<DoubleRules> | undefined, b: DoubleRules | PlainMessage<DoubleRules> | undefined): boolean {
    return proto3.util.equals(DoubleRules, a, b);
  }
}

/**
 * @generated from message buf.validate.Int32Rules
 */
export class Int32Rules extends Message<Int32Rules> {
  /**
   * @generated from field: optional int32 const = 1;
   */
  const?: number;

  /**
   * @generated from oneof buf.validate.Int32Rules.less_than
   */
  lessThan: {
    /**
     * @generated from field: int32 lt = 2;
     */
    value: number;
    case: "lt";
  } | {
    /**
     * @generated from field: int32 lte = 3;
     */
    value: number;
    case: "lte";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from oneof buf.validate.Int32Rules.greater_than
   */
  greaterThan: {
    /**
     * @generated from field: int32 gt = 4;
     */
    value: number;
    case: "gt";
  } | {
    /**
     * @generated from field: int32 gte = 5;
     */
    value: number;
    case: "gte";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: repeated int32 in = 6;
   */
  in: number[] = [];

  /**
   * @generated from field: repeated int32 not_in = 7;
   */
  notIn: number[] = [];

  constructor(data?: PartialMessage<Int32Rules>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.validate.Int32Rules";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "const", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "lt", kind: "scalar", T: 5 /* ScalarType.INT32 */, oneof: "less_than" },
    { no: 3, name: "lte", kind: "scalar", T: 5 /* ScalarType.INT32 */, oneof: "less_than" },
    { no: 4, name: "gt", kind: "scalar", T: 5 /* ScalarType.INT32 */, oneof: "greater_than" },
    { no: 5, name: "gte", kind: "scalar", T: 5 /* ScalarType.INT32 */, oneof: "greater_than" },
    { no: 6, name: "in", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 7, name: "not_in", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Int32Rules {
    return new Int32Rules().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Int32Rules {
    return new Int32Rules().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Int32Rules {
    return new Int32Rules().fromJsonString(jsonString, options);
  }

  static equals(a: Int32Rules | PlainMessage<Int32Rules> | undefined, b: Int32Rules | PlainMessage<Int32Rules> | undefined): boolean {
    return proto3.util.equals(Int32Rules, a, b);
  }
}

/**
 * @generated from message buf.validate.Int64Rules
 */
export class Int64Rules extends Message<Int64Rules> {
  /**
   * @generated from field: optional int64 const = 1;
   */
  const?: bigint;

  /**
   * @generated from oneof buf.validate.Int64Rules.less_than
   */
  lessThan: {
    /**
     * @generated from field: int64 lt = 2;
     */
    value: bigint;
    case: "lt";
  } | {
    /**
     * @generated from field: int64 lte = 3;
     */
    value: bigint;
    case: "lte";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from oneof buf.validate.Int64Rules.greater_than
   */
  greaterThan: {
    /**
     * @generated from field: int64 gt = 4;
     */
    value: bigint;
    case: "gt";
  } | {
    /**
     * @generated from field: int64 gte = 5;
     */
    value: bigint;
    case: "gte";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: repeated int64 in = 6;
   */
  in: bigint[] = [];

  /**
   * @generated from field: repeated int64 not_in = 7;
   */
  notIn: bigint[] = [];

  constructor(data?: PartialMessage<Int64Rules>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.validate.Int64Rules";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "const", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 2, name: "lt", kind: "scalar", T: 3 /* ScalarType.INT64 */, oneof: "less_than" },
    { no: 3, name: "lte", kind: "scalar", T: 3 /* ScalarType.INT64 */, oneof: "less_than" },
    { no: 4, name: "gt", kind: "scalar", T: 3 /* ScalarType.INT64 */, oneof: "greater_than" },
    { no: 5, name: "gte", kind: "scalar", T: 3 /* ScalarType.INT64 */, oneof: "greater_than" },
    { no: 6, name: "in", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
    { no: 7, name: "not_in", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Int64Rules {
    return new Int64Rules().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Int64Rules {
    return new Int64Rules().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Int64Rules {
    return new Int64Rules().fromJsonString(jsonString, options);
  }

  static equals(a: Int64Rules | PlainMessage<Int64Rules> | undefined, b: Int64Rules | PlainMessage<Int64Rules> | undefined): boolean {
    return proto3.util.equals(Int64Rules, a, b);
  }
}

/**
 * @generated from message buf.validate.UInt32Rules
 */
export class UInt32Rules extends Message<UInt32Rules> {
  /**
   * @generated from field: optional uint32 const = 1;
   */
  const?: number;

  /**
   * @generated from oneof buf.validate.UInt32Rules.less_than
   */
  lessThan: {
    /**
     * @generated from field: uint32 lt = 2;
     */
    value: number;
    case: "lt";
  } | {
    /**
     * @generated from field: uint32 lte = 3;
     */
    value: number;
    case: "lte";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from oneof buf.validate.UInt32Rules.greater_than
   */
  greaterThan: {
    /**
     * @generated from field: uint32 gt = 4;
     */
    value: number;
    case: "gt";
  } | {
    /**
     * @generated from field: uint32 gte = 5;
     */
    value: number;
    case: "gte";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: repeated uint32 in = 6;
   */
  in: number[] = [];

  /**
   * @generated from field: repeated uint32 not_in = 7;
   */
  notIn: number[] = [];

  constructor(data?: PartialMessage<UInt32Rules>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.validate.UInt32Rules";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "const", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 2, name: "lt", kind: "scalar", T: 13 /* ScalarType.UINT32 */, oneof: "less_than" },
    { no: 3, name: "lte", kind: "scalar", T: 13 /* ScalarType.UINT32 */, oneof: "less_than" },
    { no: 4, name: "gt", kind: "scalar", T: 13 /* ScalarType.UINT32 */, oneof: "greater_than" },
    { no: 5, name: "gte", kind: "scalar", T: 13 /* ScalarType.UINT32 */, oneof: "greater_than" },
    { no: 6, name: "in", kind: "scalar", T: 13 /* ScalarType.UINT32 */, repeated: true },
    { no: 7, name: "not_in", kind: "scalar", T: 13 /* ScalarType.UINT32 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UInt32Rules {
    return new UInt32Rules().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UInt32Rules {
    return new UInt32Rules().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UInt32Rules {
    return new UInt32Rules().fromJsonString(jsonString, options);
  }

  static equals(a: UInt32Rules | PlainMessage<UInt32Rules> | undefined, b: UInt32Rules | PlainMessage<UInt32Rules> | undefined): boolean {
    return proto3.util.equals(UInt32Rules, a, b);
  }
}

/**
 * @generated from message buf.validate.UInt64Rules
 */
export class UInt64Rules extends Message<UInt64Rules> {
  /**
   * @generated from field: optional uint64 const = 1;
   */
  const?: bigint;

  /**
   * @generated from oneof buf.validate.UInt64Rules.less_than
   */
  lessThan: {
    /**
     * @generated from field: uint64 lt = 2;
     */
    value: bigint;
    case: "lt";
  } | {
    /**
     * @generated from field: uint64 lte = 3;
     */
    value: bigint;
    case: "lte";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from oneof buf.validate.UInt64Rules.greater_than
   */
  greaterThan: {
    /**
     * @generated from field: uint64 gt = 4;
     */
    value: bigint;
    case: "gt";
  } | {
    /**
     * @generated from field: uint64 gte = 5;
     */
    value: bigint;
    case: "gte";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: repeated uint64 in = 6;
   */
  in: bigint[] = [];

  /**
   * @generated from field: repeated uint64 not_in = 7;
   */
  notIn: bigint[] = [];

  constructor(data?: PartialMessage<UInt64Rules>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.validate.UInt64Rules";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "const", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 2, name: "lt", kind: "scalar", T: 4 /* ScalarType.UINT64 */, oneof: "less_than" },
    { no: 3, name: "lte", kind: "scalar", T: 4 /* ScalarType.UINT64 */, oneof: "less_than" },
    { no: 4, name: "gt", kind: "scalar", T: 4 /* ScalarType.UINT64 */, oneof: "greater_than" },
    { no: 5, name: "gte", kind: "scalar", T: 4 /* ScalarType.UINT64 */, oneof: "greater_than" },
    { no: 6, name: "in", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
    { no: 7, name: "not_in", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UInt64Rules {
    return new UInt64Rules().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UInt64Rules {
    return new UInt64Rules().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UInt64Rules {
    return new UInt64Rules().fromJsonString(jsonString, options);
  }

  static equals(a: UInt64Rules | PlainMessage<UInt64Rules> | undefined, b: UInt64Rules | PlainMessage<UInt64Rules> | undefined): boolean {
    return proto3.util.equals(UInt64Rules, a, b);
  }
}

/**
 * @generated from message buf.validate.SInt32Rules
 */
export class SInt32Rules extends Message<SInt32Rules> {
  /**
   * @generated from field: optional sint32 const = 1;
   */
  const?: number;

  /**
   * @generated from oneof buf.validate.SInt32Rules.less_than
   */
  lessThan: {
    /**
     * @generated from field: sint32 lt = 2;
     */
    value: number;
    case: "lt";
  } | {
    /**
     * @generated from field: sint32 lte = 3;
     */
    value: number;
    case: "lte";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from oneof buf.validate.SInt32Rules.greater_than
   */
  greaterThan: {
    /**
     * @generated from field: sint32 gt = 4;
     */
    value: number;
    case: "gt";
  } | {
    /**
     * @generated from field: sint32 gte = 5;
     */
    value: number;
    case: "gte";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: repeated sint32 in = 6;
   */
  in: number[] = [];

  /**
   * @generated from field: repeated sint32 not_in = 7;
   */
  notIn: number[] = [];

  constructor(data?: PartialMessage<SInt32Rules>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.validate.SInt32Rules";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "const", kind: "scalar", T: 17 /* ScalarType.SINT32 */, opt: true },
    { no: 2, name: "lt", kind: "scalar", T: 17 /* ScalarType.SINT32 */, oneof: "less_than" },
    { no: 3, name: "lte", kind: "scalar", T: 17 /* ScalarType.SINT32 */, oneof: "less_than" },
    { no: 4, name: "gt", kind: "scalar", T: 17 /* ScalarType.SINT32 */, oneof: "greater_than" },
    { no: 5, name: "gte", kind: "scalar", T: 17 /* ScalarType.SINT32 */, oneof: "greater_than" },
    { no: 6, name: "in", kind: "scalar", T: 17 /* ScalarType.SINT32 */, repeated: true },
    { no: 7, name: "not_in", kind: "scalar", T: 17 /* ScalarType.SINT32 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SInt32Rules {
    return new SInt32Rules().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SInt32Rules {
    return new SInt32Rules().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SInt32Rules {
    return new SInt32Rules().fromJsonString(jsonString, options);
  }

  static equals(a: SInt32Rules | PlainMessage<SInt32Rules> | undefined, b: SInt32Rules | PlainMessage<SInt32Rules> | undefined): boolean {
    return proto3.util.equals(SInt32Rules, a, b);
  }
}

/**
 * @generated from message buf.validate.SInt64Rules
 */
export class SInt64Rules extends Message<SInt64Rules> {
  /**
   * @generated from field: optional sint64 const = 1;
   */
  const?: bigint;

  /**
   * @generated from oneof buf.validate.SInt64Rules.less_than
   */
  lessThan: {
    /**
     * @generated from field: sint64 lt = 2;
     */
    value: bigint;
    case: "lt";
  } | {
    /**
     * @generated from field: sint64 lte = 3;
     */
    value: bigint;
    case: "lte";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from oneof buf.validate.SInt64Rules.greater_than
   */
  greaterThan: {
    /**
     * @generated from field: sint64 gt = 4;
     */
    value: bigint;
    case: "gt";
  } | {
    /**
     * @generated from field: sint64 gte = 5;
     */
    value: bigint;
    case: "gte";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: repeated sint64 in = 6;
   */
  in: bigint[] = [];

  /**
   * @generated from field: repeated sint64 not_in = 7;
   */
  notIn: bigint[] = [];

  constructor(data?: PartialMessage<SInt64Rules>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.validate.SInt64Rules";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "const", kind: "scalar", T: 18 /* ScalarType.SINT64 */, opt: true },
    { no: 2, name: "lt", kind: "scalar", T: 18 /* ScalarType.SINT64 */, oneof: "less_than" },
    { no: 3, name: "lte", kind: "scalar", T: 18 /* ScalarType.SINT64 */, oneof: "less_than" },
    { no: 4, name: "gt", kind: "scalar", T: 18 /* ScalarType.SINT64 */, oneof: "greater_than" },
    { no: 5, name: "gte", kind: "scalar", T: 18 /* ScalarType.SINT64 */, oneof: "greater_than" },
    { no: 6, name: "in", kind: "scalar", T: 18 /* ScalarType.SINT64 */, repeated: true },
    { no: 7, name: "not_in", kind: "scalar", T: 18 /* ScalarType.SINT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SInt64Rules {
    return new SInt64Rules().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SInt64Rules {
    return new SInt64Rules().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SInt64Rules {
    return new SInt64Rules().fromJsonString(jsonString, options);
  }

  static equals(a: SInt64Rules | PlainMessage<SInt64Rules> | undefined, b: SInt64Rules | PlainMessage<SInt64Rules> | undefined): boolean {
    return proto3.util.equals(SInt64Rules, a, b);
  }
}

/**
 * @generated from message buf.validate.Fixed32Rules
 */
export class Fixed32Rules extends Message<Fixed32Rules> {
  /**
   * @generated from field: optional fixed32 const = 1;
   */
  const?: number;

  /**
   * @generated from oneof buf.validate.Fixed32Rules.less_than
   */
  lessThan: {
    /**
     * @generated from field: fixed32 lt = 2;
     */
    value: number;
    case: "lt";
  } | {
    /**
     * @generated from field: fixed32 lte = 3;
     */
    value: number;
    case: "lte";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from oneof buf.validate.Fixed32Rules.greater_than
   */
  greaterThan: {
    /**
     * @generated from field: fixed32 gt = 4;
     */
    value: number;
    case: "gt";
  } | {
    /**
     * @generated from field: fixed32 gte = 5;
     */
    value: number;
    case: "gte";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: repeated fixed32 in = 6;
   */
  in: number[] = [];

  /**
   * @generated from field: repeated fixed32 not_in = 7;
   */
  notIn: number[] = [];

  constructor(data?: PartialMessage<Fixed32Rules>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.validate.Fixed32Rules";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "const", kind: "scalar", T: 7 /* ScalarType.FIXED32 */, opt: true },
    { no: 2, name: "lt", kind: "scalar", T: 7 /* ScalarType.FIXED32 */, oneof: "less_than" },
    { no: 3, name: "lte", kind: "scalar", T: 7 /* ScalarType.FIXED32 */, oneof: "less_than" },
    { no: 4, name: "gt", kind: "scalar", T: 7 /* ScalarType.FIXED32 */, oneof: "greater_than" },
    { no: 5, name: "gte", kind: "scalar", T: 7 /* ScalarType.FIXED32 */, oneof: "greater_than" },
    { no: 6, name: "in", kind: "scalar", T: 7 /* ScalarType.FIXED32 */, repeated: true },
    { no: 7, name: "not_in", kind: "scalar", T: 7 /* ScalarType.FIXED32 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Fixed32Rules {
    return new Fixed32Rules().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Fixed32Rules {
    return new Fixed32Rules().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Fixed32Rules {
    return new Fixed32Rules().fromJsonString(jsonString, options);
  }

  static equals(a: Fixed32Rules | PlainMessage<Fixed32Rules> | undefined, b: Fixed32Rules | PlainMessage<Fixed32Rules> | undefined): boolean {
    return proto3.util.equals(Fixed32Rules, a, b);
  }
}

/**
 * @generated from message buf.validate.Fixed64Rules
 */
export class Fixed64Rules extends Message<Fixed64Rules> {
  /**
   * @generated from field: optional fixed64 const = 1;
   */
  const?: bigint;

  /**
   * @generated from oneof buf.validate.Fixed64Rules.less_than
   */
  lessThan: {
    /**
     * @generated from field: fixed64 lt = 2;
     */
    value: bigint;
    case: "lt";
  } | {
    /**
     * @generated from field: fixed64 lte = 3;
     */
    value: bigint;
    case: "lte";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from oneof buf.validate.Fixed64Rules.greater_than
   */
  greaterThan: {
    /**
     * @generated from field: fixed64 gt = 4;
     */
    value: bigint;
    case: "gt";
  } | {
    /**
     * @generated from field: fixed64 gte = 5;
     */
    value: bigint;
    case: "gte";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: repeated fixed64 in = 6;
   */
  in: bigint[] = [];

  /**
   * @generated from field: repeated fixed64 not_in = 7;
   */
  notIn: bigint[] = [];

  constructor(data?: PartialMessage<Fixed64Rules>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.validate.Fixed64Rules";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "const", kind: "scalar", T: 6 /* ScalarType.FIXED64 */, opt: true },
    { no: 2, name: "lt", kind: "scalar", T: 6 /* ScalarType.FIXED64 */, oneof: "less_than" },
    { no: 3, name: "lte", kind: "scalar", T: 6 /* ScalarType.FIXED64 */, oneof: "less_than" },
    { no: 4, name: "gt", kind: "scalar", T: 6 /* ScalarType.FIXED64 */, oneof: "greater_than" },
    { no: 5, name: "gte", kind: "scalar", T: 6 /* ScalarType.FIXED64 */, oneof: "greater_than" },
    { no: 6, name: "in", kind: "scalar", T: 6 /* ScalarType.FIXED64 */, repeated: true },
    { no: 7, name: "not_in", kind: "scalar", T: 6 /* ScalarType.FIXED64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Fixed64Rules {
    return new Fixed64Rules().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Fixed64Rules {
    return new Fixed64Rules().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Fixed64Rules {
    return new Fixed64Rules().fromJsonString(jsonString, options);
  }

  static equals(a: Fixed64Rules | PlainMessage<Fixed64Rules> | undefined, b: Fixed64Rules | PlainMessage<Fixed64Rules> | undefined): boolean {
    return proto3.util.equals(Fixed64Rules, a, b);
  }
}

/**
 * @generated from message buf.validate.SFixed32Rules
 */
export class SFixed32Rules extends Message<SFixed32Rules> {
  /**
   * @generated from field: optional sfixed32 const = 1;
   */
  const?: number;

  /**
   * @generated from oneof buf.validate.SFixed32Rules.less_than
   */
  lessThan: {
    /**
     * @generated from field: sfixed32 lt = 2;
     */
    value: number;
    case: "lt";
  } | {
    /**
     * @generated from field: sfixed32 lte = 3;
     */
    value: number;
    case: "lte";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from oneof buf.validate.SFixed32Rules.greater_than
   */
  greaterThan: {
    /**
     * @generated from field: sfixed32 gt = 4;
     */
    value: number;
    case: "gt";
  } | {
    /**
     * @generated from field: sfixed32 gte = 5;
     */
    value: number;
    case: "gte";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: repeated sfixed32 in = 6;
   */
  in: number[] = [];

  /**
   * @generated from field: repeated sfixed32 not_in = 7;
   */
  notIn: number[] = [];

  constructor(data?: PartialMessage<SFixed32Rules>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.validate.SFixed32Rules";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "const", kind: "scalar", T: 15 /* ScalarType.SFIXED32 */, opt: true },
    { no: 2, name: "lt", kind: "scalar", T: 15 /* ScalarType.SFIXED32 */, oneof: "less_than" },
    { no: 3, name: "lte", kind: "scalar", T: 15 /* ScalarType.SFIXED32 */, oneof: "less_than" },
    { no: 4, name: "gt", kind: "scalar", T: 15 /* ScalarType.SFIXED32 */, oneof: "greater_than" },
    { no: 5, name: "gte", kind: "scalar", T: 15 /* ScalarType.SFIXED32 */, oneof: "greater_than" },
    { no: 6, name: "in", kind: "scalar", T: 15 /* ScalarType.SFIXED32 */, repeated: true },
    { no: 7, name: "not_in", kind: "scalar", T: 15 /* ScalarType.SFIXED32 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SFixed32Rules {
    return new SFixed32Rules().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SFixed32Rules {
    return new SFixed32Rules().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SFixed32Rules {
    return new SFixed32Rules().fromJsonString(jsonString, options);
  }

  static equals(a: SFixed32Rules | PlainMessage<SFixed32Rules> | undefined, b: SFixed32Rules | PlainMessage<SFixed32Rules> | undefined): boolean {
    return proto3.util.equals(SFixed32Rules, a, b);
  }
}

/**
 * @generated from message buf.validate.SFixed64Rules
 */
export class SFixed64Rules extends Message<SFixed64Rules> {
  /**
   * @generated from field: optional sfixed64 const = 1;
   */
  const?: bigint;

  /**
   * @generated from oneof buf.validate.SFixed64Rules.less_than
   */
  lessThan: {
    /**
     * @generated from field: sfixed64 lt = 2;
     */
    value: bigint;
    case: "lt";
  } | {
    /**
     * @generated from field: sfixed64 lte = 3;
     */
    value: bigint;
    case: "lte";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from oneof buf.validate.SFixed64Rules.greater_than
   */
  greaterThan: {
    /**
     * @generated from field: sfixed64 gt = 4;
     */
    value: bigint;
    case: "gt";
  } | {
    /**
     * @generated from field: sfixed64 gte = 5;
     */
    value: bigint;
    case: "gte";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: repeated sfixed64 in = 6;
   */
  in: bigint[] = [];

  /**
   * @generated from field: repeated sfixed64 not_in = 7;
   */
  notIn: bigint[] = [];

  constructor(data?: PartialMessage<SFixed64Rules>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.validate.SFixed64Rules";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "const", kind: "scalar", T: 16 /* ScalarType.SFIXED64 */, opt: true },
    { no: 2, name: "lt", kind: "scalar", T: 16 /* ScalarType.SFIXED64 */, oneof: "less_than" },
    { no: 3, name: "lte", kind: "scalar", T: 16 /* ScalarType.SFIXED64 */, oneof: "less_than" },
    { no: 4, name: "gt", kind: "scalar", T: 16 /* ScalarType.SFIXED64 */, oneof: "greater_than" },
    { no: 5, name: "gte", kind: "scalar", T: 16 /* ScalarType.SFIXED64 */, oneof: "greater_than" },
    { no: 6, name: "in", kind: "scalar", T: 16 /* ScalarType.SFIXED64 */, repeated: true },
    { no: 7, name: "not_in", kind: "scalar", T: 16 /* ScalarType.SFIXED64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SFixed64Rules {
    return new SFixed64Rules().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SFixed64Rules {
    return new SFixed64Rules().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SFixed64Rules {
    return new SFixed64Rules().fromJsonString(jsonString, options);
  }

  static equals(a: SFixed64Rules | PlainMessage<SFixed64Rules> | undefined, b: SFixed64Rules | PlainMessage<SFixed64Rules> | undefined): boolean {
    return proto3.util.equals(SFixed64Rules, a, b);
  }
}

/**
 * @generated from message buf.validate.BoolRules
 */
export class BoolRules extends Message<BoolRules> {
  /**
   * @generated from field: optional bool const = 1;
   */
  const?: boolean;

  constructor(data?: PartialMessage<BoolRules>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.validate.BoolRules";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "const", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BoolRules {
    return new BoolRules().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BoolRules {
    return new BoolRules().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BoolRules {
    return new BoolRules().fromJsonString(jsonString, options);
  }

  static equals(a: BoolRules | PlainMessage<BoolRules> | undefined, b: BoolRules | PlainMessage<BoolRules> | undefined): boolean {
    return proto3.util.equals(BoolRules, a, b);
  }
}

/**
 * @generated from message buf.validate.StringRules
 */
export class StringRules extends Message<StringRules> {
  /**
   * @generated from field: optional string const = 1;
   */
  const?: string;

  /**
   * @generated from field: optional uint64 min_len = 2;
   */
  minLen?: bigint;

  /**
   * @generated from field: optional uint64 max_len = 3;
   */
  maxLen?: bigint;

  /**
   * @generated from field: optional uint64 min_bytes = 4;
   */
  minBytes?: bigint;

  /**
   * @generated from field: optional uint64 max_bytes = 5;
   */
  maxBytes?: bigint;

  /**
   * @generated from field: optional string pattern = 6;
   */
  pattern?: string;

  /**
   * @generated from field: optional string prefix = 7;
   */
  prefix?: string;

  /**
   * @generated from field: optional string suffix = 8;
   */
  suffix?: string;

  /**
   * @generated from field: optional string contains = 9;
   */
  contains?: string;

  /**
   * @generated from field: repeated string in = 10;
   */
  in: string[] = [];

  /**
   * @generated from field: repeated string not_in = 11;
   */
  notIn: string[] = [];

  /**
   * @generated from oneof buf.validate.StringRules.well_known
   */
  wellKnown: {
    /**
     * @generated from field: bool email = 12;
     */
    value: boolean;
    case: "email";
  } | {
    /**
     * @generated from field: bool hostname = 13;
     */
    value: boolean;
    case: "hostname";
  } | {
    /**
     * @generated from field: bool ip = 14;
     */
    value: boolean;
    case: "ip";
  } | {
    /**
     * @generated from field: bool ipv4 = 15;
     */
    value: boolean;
    case: "ipv4";
  } | {
    /**
     * @generated from field: bool ipv6 = 16;
     */
    value: boolean;
    case: "ipv6";
  } | {
    /**
     * @generated from field: bool uri = 17;
     */
    value: boolean;
    case: "uri";
  } | {
    /**
     * @generated from field: bool uri_ref = 18;
     */
    value: boolean;
    case: "uriRef";
  } | {
    /**
     * @generated from field: bool address = 21;
     */
    value: boolean;
    case: "address";
  } | {
    /**
     * @generated from field: bool uuid = 22;
     */
    value: boolean;
    case: "uuid";
  } | {
    /**
     * @generated from field: buf.validate.KnownRegex well_known_regex = 24;
     */
    value: KnownRegex;
    case: "wellKnownRegex";
  } | {
    /**
     * @generated from field: bool ip_with_prefixlen = 26;
     */
    value: boolean;
    case: "ipWithPrefixlen";
  } | {
    /**
     * @generated from field: bool ipv4_with_prefixlen = 27;
     */
    value: boolean;
    case: "ipv4WithPrefixlen";
  } | {
    /**
     * @generated from field: bool ipv6_with_prefixlen = 28;
     */
    value: boolean;
    case: "ipv6WithPrefixlen";
  } | {
    /**
     * @generated from field: bool ip_prefix = 29;
     */
    value: boolean;
    case: "ipPrefix";
  } | {
    /**
     * @generated from field: bool ipv4_prefix = 30;
     */
    value: boolean;
    case: "ipv4Prefix";
  } | {
    /**
     * @generated from field: bool ipv6_prefix = 31;
     */
    value: boolean;
    case: "ipv6Prefix";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: optional uint64 len = 19;
   */
  len?: bigint;

  /**
   * @generated from field: optional uint64 len_bytes = 20;
   */
  lenBytes?: bigint;

  /**
   * @generated from field: optional string not_contains = 23;
   */
  notContains?: string;

  /**
   * @generated from field: optional bool strict = 25;
   */
  strict?: boolean;

  constructor(data?: PartialMessage<StringRules>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.validate.StringRules";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "const", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "min_len", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 3, name: "max_len", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 4, name: "min_bytes", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 5, name: "max_bytes", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 6, name: "pattern", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "prefix", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "suffix", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 9, name: "contains", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 10, name: "in", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 11, name: "not_in", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 12, name: "email", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "well_known" },
    { no: 13, name: "hostname", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "well_known" },
    { no: 14, name: "ip", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "well_known" },
    { no: 15, name: "ipv4", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "well_known" },
    { no: 16, name: "ipv6", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "well_known" },
    { no: 17, name: "uri", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "well_known" },
    { no: 18, name: "uri_ref", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "well_known" },
    { no: 21, name: "address", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "well_known" },
    { no: 22, name: "uuid", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "well_known" },
    { no: 24, name: "well_known_regex", kind: "enum", T: proto3.getEnumType(KnownRegex), oneof: "well_known" },
    { no: 26, name: "ip_with_prefixlen", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "well_known" },
    { no: 27, name: "ipv4_with_prefixlen", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "well_known" },
    { no: 28, name: "ipv6_with_prefixlen", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "well_known" },
    { no: 29, name: "ip_prefix", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "well_known" },
    { no: 30, name: "ipv4_prefix", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "well_known" },
    { no: 31, name: "ipv6_prefix", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "well_known" },
    { no: 19, name: "len", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 20, name: "len_bytes", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 23, name: "not_contains", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 25, name: "strict", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StringRules {
    return new StringRules().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StringRules {
    return new StringRules().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StringRules {
    return new StringRules().fromJsonString(jsonString, options);
  }

  static equals(a: StringRules | PlainMessage<StringRules> | undefined, b: StringRules | PlainMessage<StringRules> | undefined): boolean {
    return proto3.util.equals(StringRules, a, b);
  }
}

/**
 * @generated from message buf.validate.BytesRules
 */
export class BytesRules extends Message<BytesRules> {
  /**
   * @generated from field: optional bytes const = 1;
   */
  const?: Uint8Array;

  /**
   * @generated from field: optional uint64 min_len = 2;
   */
  minLen?: bigint;

  /**
   * @generated from field: optional uint64 max_len = 3;
   */
  maxLen?: bigint;

  /**
   * @generated from field: optional string pattern = 4;
   */
  pattern?: string;

  /**
   * @generated from field: optional bytes prefix = 5;
   */
  prefix?: Uint8Array;

  /**
   * @generated from field: optional bytes suffix = 6;
   */
  suffix?: Uint8Array;

  /**
   * @generated from field: optional bytes contains = 7;
   */
  contains?: Uint8Array;

  /**
   * @generated from field: repeated bytes in = 8;
   */
  in: Uint8Array[] = [];

  /**
   * @generated from field: repeated bytes not_in = 9;
   */
  notIn: Uint8Array[] = [];

  /**
   * @generated from oneof buf.validate.BytesRules.well_known
   */
  wellKnown: {
    /**
     * @generated from field: bool ip = 10;
     */
    value: boolean;
    case: "ip";
  } | {
    /**
     * @generated from field: bool ipv4 = 11;
     */
    value: boolean;
    case: "ipv4";
  } | {
    /**
     * @generated from field: bool ipv6 = 12;
     */
    value: boolean;
    case: "ipv6";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: optional uint64 len = 13;
   */
  len?: bigint;

  constructor(data?: PartialMessage<BytesRules>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.validate.BytesRules";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "const", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
    { no: 2, name: "min_len", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 3, name: "max_len", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 4, name: "pattern", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "prefix", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
    { no: 6, name: "suffix", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
    { no: 7, name: "contains", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
    { no: 8, name: "in", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
    { no: 9, name: "not_in", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
    { no: 10, name: "ip", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "well_known" },
    { no: 11, name: "ipv4", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "well_known" },
    { no: 12, name: "ipv6", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "well_known" },
    { no: 13, name: "len", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BytesRules {
    return new BytesRules().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BytesRules {
    return new BytesRules().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BytesRules {
    return new BytesRules().fromJsonString(jsonString, options);
  }

  static equals(a: BytesRules | PlainMessage<BytesRules> | undefined, b: BytesRules | PlainMessage<BytesRules> | undefined): boolean {
    return proto3.util.equals(BytesRules, a, b);
  }
}

/**
 * @generated from message buf.validate.EnumRules
 */
export class EnumRules extends Message<EnumRules> {
  /**
   * @generated from field: optional int32 const = 1;
   */
  const?: number;

  /**
   * @generated from field: optional bool defined_only = 2;
   */
  definedOnly?: boolean;

  /**
   * @generated from field: repeated int32 in = 3;
   */
  in: number[] = [];

  /**
   * @generated from field: repeated int32 not_in = 4;
   */
  notIn: number[] = [];

  constructor(data?: PartialMessage<EnumRules>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.validate.EnumRules";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "const", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "defined_only", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 3, name: "in", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 4, name: "not_in", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EnumRules {
    return new EnumRules().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EnumRules {
    return new EnumRules().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EnumRules {
    return new EnumRules().fromJsonString(jsonString, options);
  }

  static equals(a: EnumRules | PlainMessage<EnumRules> | undefined, b: EnumRules | PlainMessage<EnumRules> | undefined): boolean {
    return proto3.util.equals(EnumRules, a, b);
  }
}

/**
 * @generated from message buf.validate.RepeatedRules
 */
export class RepeatedRules extends Message<RepeatedRules> {
  /**
   * @generated from field: optional uint64 min_items = 1;
   */
  minItems?: bigint;

  /**
   * @generated from field: optional uint64 max_items = 2;
   */
  maxItems?: bigint;

  /**
   * @generated from field: optional bool unique = 3;
   */
  unique?: boolean;

  /**
   * @generated from field: optional buf.validate.FieldConstraints items = 4;
   */
  items?: FieldConstraints;

  constructor(data?: PartialMessage<RepeatedRules>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.validate.RepeatedRules";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "min_items", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 2, name: "max_items", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 3, name: "unique", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 4, name: "items", kind: "message", T: FieldConstraints, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RepeatedRules {
    return new RepeatedRules().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RepeatedRules {
    return new RepeatedRules().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RepeatedRules {
    return new RepeatedRules().fromJsonString(jsonString, options);
  }

  static equals(a: RepeatedRules | PlainMessage<RepeatedRules> | undefined, b: RepeatedRules | PlainMessage<RepeatedRules> | undefined): boolean {
    return proto3.util.equals(RepeatedRules, a, b);
  }
}

/**
 * @generated from message buf.validate.MapRules
 */
export class MapRules extends Message<MapRules> {
  /**
   * @generated from field: optional uint64 min_pairs = 1;
   */
  minPairs?: bigint;

  /**
   * @generated from field: optional uint64 max_pairs = 2;
   */
  maxPairs?: bigint;

  /**
   * @generated from field: optional buf.validate.FieldConstraints keys = 4;
   */
  keys?: FieldConstraints;

  /**
   * @generated from field: optional buf.validate.FieldConstraints values = 5;
   */
  values?: FieldConstraints;

  constructor(data?: PartialMessage<MapRules>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.validate.MapRules";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "min_pairs", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 2, name: "max_pairs", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 4, name: "keys", kind: "message", T: FieldConstraints, opt: true },
    { no: 5, name: "values", kind: "message", T: FieldConstraints, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MapRules {
    return new MapRules().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MapRules {
    return new MapRules().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MapRules {
    return new MapRules().fromJsonString(jsonString, options);
  }

  static equals(a: MapRules | PlainMessage<MapRules> | undefined, b: MapRules | PlainMessage<MapRules> | undefined): boolean {
    return proto3.util.equals(MapRules, a, b);
  }
}

/**
 * @generated from message buf.validate.AnyRules
 */
export class AnyRules extends Message<AnyRules> {
  /**
   * @generated from field: repeated string in = 2;
   */
  in: string[] = [];

  /**
   * @generated from field: repeated string not_in = 3;
   */
  notIn: string[] = [];

  constructor(data?: PartialMessage<AnyRules>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.validate.AnyRules";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "in", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "not_in", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnyRules {
    return new AnyRules().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnyRules {
    return new AnyRules().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnyRules {
    return new AnyRules().fromJsonString(jsonString, options);
  }

  static equals(a: AnyRules | PlainMessage<AnyRules> | undefined, b: AnyRules | PlainMessage<AnyRules> | undefined): boolean {
    return proto3.util.equals(AnyRules, a, b);
  }
}

/**
 * @generated from message buf.validate.DurationRules
 */
export class DurationRules extends Message<DurationRules> {
  /**
   * @generated from field: optional google.protobuf.Duration const = 2;
   */
  const?: Duration;

  /**
   * @generated from oneof buf.validate.DurationRules.less_than
   */
  lessThan: {
    /**
     * @generated from field: google.protobuf.Duration lt = 3;
     */
    value: Duration;
    case: "lt";
  } | {
    /**
     * @generated from field: google.protobuf.Duration lte = 4;
     */
    value: Duration;
    case: "lte";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from oneof buf.validate.DurationRules.greater_than
   */
  greaterThan: {
    /**
     * @generated from field: google.protobuf.Duration gt = 5;
     */
    value: Duration;
    case: "gt";
  } | {
    /**
     * @generated from field: google.protobuf.Duration gte = 6;
     */
    value: Duration;
    case: "gte";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: repeated google.protobuf.Duration in = 7;
   */
  in: Duration[] = [];

  /**
   * @generated from field: repeated google.protobuf.Duration not_in = 8;
   */
  notIn: Duration[] = [];

  constructor(data?: PartialMessage<DurationRules>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.validate.DurationRules";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "const", kind: "message", T: Duration, opt: true },
    { no: 3, name: "lt", kind: "message", T: Duration, oneof: "less_than" },
    { no: 4, name: "lte", kind: "message", T: Duration, oneof: "less_than" },
    { no: 5, name: "gt", kind: "message", T: Duration, oneof: "greater_than" },
    { no: 6, name: "gte", kind: "message", T: Duration, oneof: "greater_than" },
    { no: 7, name: "in", kind: "message", T: Duration, repeated: true },
    { no: 8, name: "not_in", kind: "message", T: Duration, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DurationRules {
    return new DurationRules().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DurationRules {
    return new DurationRules().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DurationRules {
    return new DurationRules().fromJsonString(jsonString, options);
  }

  static equals(a: DurationRules | PlainMessage<DurationRules> | undefined, b: DurationRules | PlainMessage<DurationRules> | undefined): boolean {
    return proto3.util.equals(DurationRules, a, b);
  }
}

/**
 * @generated from message buf.validate.TimestampRules
 */
export class TimestampRules extends Message<TimestampRules> {
  /**
   * @generated from field: optional google.protobuf.Timestamp const = 2;
   */
  const?: Timestamp;

  /**
   * @generated from oneof buf.validate.TimestampRules.less_than
   */
  lessThan: {
    /**
     * @generated from field: google.protobuf.Timestamp lt = 3;
     */
    value: Timestamp;
    case: "lt";
  } | {
    /**
     * @generated from field: google.protobuf.Timestamp lte = 4;
     */
    value: Timestamp;
    case: "lte";
  } | {
    /**
     * @generated from field: bool lt_now = 7;
     */
    value: boolean;
    case: "ltNow";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from oneof buf.validate.TimestampRules.greater_than
   */
  greaterThan: {
    /**
     * @generated from field: google.protobuf.Timestamp gt = 5;
     */
    value: Timestamp;
    case: "gt";
  } | {
    /**
     * @generated from field: google.protobuf.Timestamp gte = 6;
     */
    value: Timestamp;
    case: "gte";
  } | {
    /**
     * @generated from field: bool gt_now = 8;
     */
    value: boolean;
    case: "gtNow";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: optional google.protobuf.Duration within = 9;
   */
  within?: Duration;

  constructor(data?: PartialMessage<TimestampRules>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "buf.validate.TimestampRules";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "const", kind: "message", T: Timestamp, opt: true },
    { no: 3, name: "lt", kind: "message", T: Timestamp, oneof: "less_than" },
    { no: 4, name: "lte", kind: "message", T: Timestamp, oneof: "less_than" },
    { no: 7, name: "lt_now", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "less_than" },
    { no: 5, name: "gt", kind: "message", T: Timestamp, oneof: "greater_than" },
    { no: 6, name: "gte", kind: "message", T: Timestamp, oneof: "greater_than" },
    { no: 8, name: "gt_now", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "greater_than" },
    { no: 9, name: "within", kind: "message", T: Duration, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimestampRules {
    return new TimestampRules().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimestampRules {
    return new TimestampRules().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimestampRules {
    return new TimestampRules().fromJsonString(jsonString, options);
  }

  static equals(a: TimestampRules | PlainMessage<TimestampRules> | undefined, b: TimestampRules | PlainMessage<TimestampRules> | undefined): boolean {
    return proto3.util.equals(TimestampRules, a, b);
  }
}

