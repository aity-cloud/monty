// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/ident/ident.go

// Package mock_ident is a generated GoMock package.
package mock_ident

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// UniqueIdentifier mocks base method.
func (m *MockProvider) UniqueIdentifier(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UniqueIdentifier", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UniqueIdentifier indicates an expected call of UniqueIdentifier.
func (mr *MockProviderMockRecorder) UniqueIdentifier(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UniqueIdentifier", reflect.TypeOf((*MockProvider)(nil).UniqueIdentifier), ctx)
}

// MockNamedProvider is a mock of NamedProvider interface.
type MockNamedProvider struct {
	ctrl     *gomock.Controller
	recorder *MockNamedProviderMockRecorder
}

// MockNamedProviderMockRecorder is the mock recorder for MockNamedProvider.
type MockNamedProviderMockRecorder struct {
	mock *MockNamedProvider
}

// NewMockNamedProvider creates a new mock instance.
func NewMockNamedProvider(ctrl *gomock.Controller) *MockNamedProvider {
	mock := &MockNamedProvider{ctrl: ctrl}
	mock.recorder = &MockNamedProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNamedProvider) EXPECT() *MockNamedProviderMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockNamedProvider) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockNamedProviderMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockNamedProvider)(nil).Name))
}

// UniqueIdentifier mocks base method.
func (m *MockNamedProvider) UniqueIdentifier(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UniqueIdentifier", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UniqueIdentifier indicates an expected call of UniqueIdentifier.
func (mr *MockNamedProviderMockRecorder) UniqueIdentifier(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UniqueIdentifier", reflect.TypeOf((*MockNamedProvider)(nil).UniqueIdentifier), ctx)
}
