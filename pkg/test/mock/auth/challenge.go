// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/auth/cluster/challenge.go

// Package mock_cluster is a generated GoMock package.
package mock_cluster

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockServerChallengeHandler is a mock of ServerChallengeHandler interface.
type MockServerChallengeHandler struct {
	ctrl     *gomock.Controller
	recorder *MockServerChallengeHandlerMockRecorder
}

// MockServerChallengeHandlerMockRecorder is the mock recorder for MockServerChallengeHandler.
type MockServerChallengeHandlerMockRecorder struct {
	mock *MockServerChallengeHandler
}

// NewMockServerChallengeHandler creates a new mock instance.
func NewMockServerChallengeHandler(ctrl *gomock.Controller) *MockServerChallengeHandler {
	mock := &MockServerChallengeHandler{ctrl: ctrl}
	mock.recorder = &MockServerChallengeHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerChallengeHandler) EXPECT() *MockServerChallengeHandlerMockRecorder {
	return m.recorder
}

// DoServerChallenge mocks base method.
func (m *MockServerChallengeHandler) DoServerChallenge(ss grpc.ServerStream) (context.Context, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoServerChallenge", ss)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoServerChallenge indicates an expected call of DoServerChallenge.
func (mr *MockServerChallengeHandlerMockRecorder) DoServerChallenge(ss interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoServerChallenge", reflect.TypeOf((*MockServerChallengeHandler)(nil).DoServerChallenge), ss)
}

// MockClientChallengeHandler is a mock of ClientChallengeHandler interface.
type MockClientChallengeHandler struct {
	ctrl     *gomock.Controller
	recorder *MockClientChallengeHandlerMockRecorder
}

// MockClientChallengeHandlerMockRecorder is the mock recorder for MockClientChallengeHandler.
type MockClientChallengeHandlerMockRecorder struct {
	mock *MockClientChallengeHandler
}

// NewMockClientChallengeHandler creates a new mock instance.
func NewMockClientChallengeHandler(ctrl *gomock.Controller) *MockClientChallengeHandler {
	mock := &MockClientChallengeHandler{ctrl: ctrl}
	mock.recorder = &MockClientChallengeHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientChallengeHandler) EXPECT() *MockClientChallengeHandlerMockRecorder {
	return m.recorder
}

// ClientMetadata mocks base method.
func (m *MockClientChallengeHandler) ClientMetadata() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientMetadata")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// ClientMetadata indicates an expected call of ClientMetadata.
func (mr *MockClientChallengeHandlerMockRecorder) ClientMetadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientMetadata", reflect.TypeOf((*MockClientChallengeHandler)(nil).ClientMetadata))
}

// DoClientChallenge mocks base method.
func (m *MockClientChallengeHandler) DoClientChallenge(cs grpc.ClientStream) (context.Context, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoClientChallenge", cs)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoClientChallenge indicates an expected call of DoClientChallenge.
func (mr *MockClientChallengeHandlerMockRecorder) DoClientChallenge(cs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoClientChallenge", reflect.TypeOf((*MockClientChallengeHandler)(nil).DoClientChallenge), cs)
}

// MockChallengeHandler is a mock of ChallengeHandler interface.
type MockChallengeHandler struct {
	ctrl     *gomock.Controller
	recorder *MockChallengeHandlerMockRecorder
}

// MockChallengeHandlerMockRecorder is the mock recorder for MockChallengeHandler.
type MockChallengeHandlerMockRecorder struct {
	mock *MockChallengeHandler
}

// NewMockChallengeHandler creates a new mock instance.
func NewMockChallengeHandler(ctrl *gomock.Controller) *MockChallengeHandler {
	mock := &MockChallengeHandler{ctrl: ctrl}
	mock.recorder = &MockChallengeHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChallengeHandler) EXPECT() *MockChallengeHandlerMockRecorder {
	return m.recorder
}

// ClientMetadata mocks base method.
func (m *MockChallengeHandler) ClientMetadata() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientMetadata")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// ClientMetadata indicates an expected call of ClientMetadata.
func (mr *MockChallengeHandlerMockRecorder) ClientMetadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientMetadata", reflect.TypeOf((*MockChallengeHandler)(nil).ClientMetadata))
}

// DoClientChallenge mocks base method.
func (m *MockChallengeHandler) DoClientChallenge(cs grpc.ClientStream) (context.Context, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoClientChallenge", cs)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoClientChallenge indicates an expected call of DoClientChallenge.
func (mr *MockChallengeHandlerMockRecorder) DoClientChallenge(cs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoClientChallenge", reflect.TypeOf((*MockChallengeHandler)(nil).DoClientChallenge), cs)
}

// DoServerChallenge mocks base method.
func (m *MockChallengeHandler) DoServerChallenge(ss grpc.ServerStream) (context.Context, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoServerChallenge", ss)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoServerChallenge indicates an expected call of DoServerChallenge.
func (mr *MockChallengeHandlerMockRecorder) DoServerChallenge(ss interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoServerChallenge", reflect.TypeOf((*MockChallengeHandler)(nil).DoServerChallenge), ss)
}
