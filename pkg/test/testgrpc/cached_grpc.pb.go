// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - ragu               v1.0.0
// source: github.com/rancher/opni/pkg/test/testgrpc/cached.proto

package testgrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CachedServiceClient is the client API for CachedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CachedServiceClient interface {
	Increment(ctx context.Context, in *IncrementRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetValue(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Value, error)
	GetValueWithForcedClientCaching(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Value, error)
	// Adds the value to the an arbitrary server-side object.
	// If the object doesn't exist create a new one and it set it to the value.
	IncrementObject(ctx context.Context, in *IncrementObjectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetObjectValue(ctx context.Context, in *ObjectReference, opts ...grpc.CallOption) (*Value, error)
}

type cachedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCachedServiceClient(cc grpc.ClientConnInterface) CachedServiceClient {
	return &cachedServiceClient{cc}
}

func (c *cachedServiceClient) Increment(ctx context.Context, in *IncrementRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/testgrpc.cached.CachedService/Increment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cachedServiceClient) GetValue(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Value, error) {
	out := new(Value)
	err := c.cc.Invoke(ctx, "/testgrpc.cached.CachedService/GetValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cachedServiceClient) GetValueWithForcedClientCaching(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Value, error) {
	out := new(Value)
	err := c.cc.Invoke(ctx, "/testgrpc.cached.CachedService/GetValueWithForcedClientCaching", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cachedServiceClient) IncrementObject(ctx context.Context, in *IncrementObjectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/testgrpc.cached.CachedService/IncrementObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cachedServiceClient) GetObjectValue(ctx context.Context, in *ObjectReference, opts ...grpc.CallOption) (*Value, error) {
	out := new(Value)
	err := c.cc.Invoke(ctx, "/testgrpc.cached.CachedService/GetObjectValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CachedServiceServer is the server API for CachedService service.
// All implementations must embed UnimplementedCachedServiceServer
// for forward compatibility
type CachedServiceServer interface {
	Increment(context.Context, *IncrementRequest) (*emptypb.Empty, error)
	GetValue(context.Context, *emptypb.Empty) (*Value, error)
	GetValueWithForcedClientCaching(context.Context, *emptypb.Empty) (*Value, error)
	// Adds the value to the an arbitrary server-side object.
	// If the object doesn't exist create a new one and it set it to the value.
	IncrementObject(context.Context, *IncrementObjectRequest) (*emptypb.Empty, error)
	GetObjectValue(context.Context, *ObjectReference) (*Value, error)
	mustEmbedUnimplementedCachedServiceServer()
}

// UnimplementedCachedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCachedServiceServer struct {
}

func (UnimplementedCachedServiceServer) Increment(context.Context, *IncrementRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Increment not implemented")
}
func (UnimplementedCachedServiceServer) GetValue(context.Context, *emptypb.Empty) (*Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValue not implemented")
}
func (UnimplementedCachedServiceServer) GetValueWithForcedClientCaching(context.Context, *emptypb.Empty) (*Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValueWithForcedClientCaching not implemented")
}
func (UnimplementedCachedServiceServer) IncrementObject(context.Context, *IncrementObjectRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrementObject not implemented")
}
func (UnimplementedCachedServiceServer) GetObjectValue(context.Context, *ObjectReference) (*Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectValue not implemented")
}
func (UnimplementedCachedServiceServer) mustEmbedUnimplementedCachedServiceServer() {}

// UnsafeCachedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CachedServiceServer will
// result in compilation errors.
type UnsafeCachedServiceServer interface {
	mustEmbedUnimplementedCachedServiceServer()
}

func RegisterCachedServiceServer(s grpc.ServiceRegistrar, srv CachedServiceServer) {
	s.RegisterService(&CachedService_ServiceDesc, srv)
}

func _CachedService_Increment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CachedServiceServer).Increment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgrpc.cached.CachedService/Increment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CachedServiceServer).Increment(ctx, req.(*IncrementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CachedService_GetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CachedServiceServer).GetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgrpc.cached.CachedService/GetValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CachedServiceServer).GetValue(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CachedService_GetValueWithForcedClientCaching_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CachedServiceServer).GetValueWithForcedClientCaching(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgrpc.cached.CachedService/GetValueWithForcedClientCaching",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CachedServiceServer).GetValueWithForcedClientCaching(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CachedService_IncrementObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrementObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CachedServiceServer).IncrementObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgrpc.cached.CachedService/IncrementObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CachedServiceServer).IncrementObject(ctx, req.(*IncrementObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CachedService_GetObjectValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectReference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CachedServiceServer).GetObjectValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgrpc.cached.CachedService/GetObjectValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CachedServiceServer).GetObjectValue(ctx, req.(*ObjectReference))
	}
	return interceptor(ctx, in, info, handler)
}

// CachedService_ServiceDesc is the grpc.ServiceDesc for CachedService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CachedService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "testgrpc.cached.CachedService",
	HandlerType: (*CachedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Increment",
			Handler:    _CachedService_Increment_Handler,
		},
		{
			MethodName: "GetValue",
			Handler:    _CachedService_GetValue_Handler,
		},
		{
			MethodName: "GetValueWithForcedClientCaching",
			Handler:    _CachedService_GetValueWithForcedClientCaching_Handler,
		},
		{
			MethodName: "IncrementObject",
			Handler:    _CachedService_IncrementObject_Handler,
		},
		{
			MethodName: "GetObjectValue",
			Handler:    _CachedService_GetObjectValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/rancher/opni/pkg/test/testgrpc/cached.proto",
}
