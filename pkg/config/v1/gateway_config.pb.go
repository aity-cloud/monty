// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: github.com/aity-cloud/monty/pkg/config/v1/gateway_config.proto

package configv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/aity-cloud/monty/pkg/apis/core/v1"
	_ "github.com/kralicky/codegen/cli"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StorageBackend int32

const (
	// Use etcd for key-value storage. This is the recommended default.
	StorageBackend_Etcd StorageBackend = 0
	// Use NATS JetStream for key-value storage.
	StorageBackend_JetStream StorageBackend = 1
)

// Enum value maps for StorageBackend.
var (
	StorageBackend_name = map[int32]string{
		0: "Etcd",
		1: "JetStream",
	}
	StorageBackend_value = map[string]int32{
		"Etcd":      0,
		"JetStream": 1,
	}
)

func (x StorageBackend) Enum() *StorageBackend {
	p := new(StorageBackend)
	*p = x
	return p
}

func (x StorageBackend) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StorageBackend) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_enumTypes[0].Descriptor()
}

func (StorageBackend) Type() protoreflect.EnumType {
	return &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_enumTypes[0]
}

func (x StorageBackend) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StorageBackend.Descriptor instead.
func (StorageBackend) EnumDescriptor() ([]byte, []int) {
	return file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{0}
}

type PatchEngine int32

const (
	PatchEngine_Bsdiff PatchEngine = 0
	PatchEngine_Zstd   PatchEngine = 1
)

// Enum value maps for PatchEngine.
var (
	PatchEngine_name = map[int32]string{
		0: "Bsdiff",
		1: "Zstd",
	}
	PatchEngine_value = map[string]int32{
		"Bsdiff": 0,
		"Zstd":   1,
	}
)

func (x PatchEngine) Enum() *PatchEngine {
	p := new(PatchEngine)
	*p = x
	return p
}

func (x PatchEngine) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatchEngine) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_enumTypes[1].Descriptor()
}

func (PatchEngine) Type() protoreflect.EnumType {
	return &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_enumTypes[1]
}

func (x PatchEngine) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatchEngine.Descriptor instead.
func (PatchEngine) EnumDescriptor() ([]byte, []int) {
	return file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{1}
}

type CacheBackend int32

const (
	CacheBackend_Filesystem CacheBackend = 0
)

// Enum value maps for CacheBackend.
var (
	CacheBackend_name = map[int32]string{
		0: "Filesystem",
	}
	CacheBackend_value = map[string]int32{
		"Filesystem": 0,
	}
)

func (x CacheBackend) Enum() *CacheBackend {
	p := new(CacheBackend)
	*p = x
	return p
}

func (x CacheBackend) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CacheBackend) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_enumTypes[2].Descriptor()
}

func (CacheBackend) Type() protoreflect.EnumType {
	return &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_enumTypes[2]
}

func (x CacheBackend) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CacheBackend.Descriptor instead.
func (CacheBackend) EnumDescriptor() ([]byte, []int) {
	return file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{2}
}

type KubernetesAgentUpgradeSpec_ImageResolver int32

const (
	KubernetesAgentUpgradeSpec_Noop       KubernetesAgentUpgradeSpec_ImageResolver = 0
	KubernetesAgentUpgradeSpec_Kubernetes KubernetesAgentUpgradeSpec_ImageResolver = 1
)

// Enum value maps for KubernetesAgentUpgradeSpec_ImageResolver.
var (
	KubernetesAgentUpgradeSpec_ImageResolver_name = map[int32]string{
		0: "Noop",
		1: "Kubernetes",
	}
	KubernetesAgentUpgradeSpec_ImageResolver_value = map[string]int32{
		"Noop":       0,
		"Kubernetes": 1,
	}
)

func (x KubernetesAgentUpgradeSpec_ImageResolver) Enum() *KubernetesAgentUpgradeSpec_ImageResolver {
	p := new(KubernetesAgentUpgradeSpec_ImageResolver)
	*p = x
	return p
}

func (x KubernetesAgentUpgradeSpec_ImageResolver) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KubernetesAgentUpgradeSpec_ImageResolver) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_enumTypes[3].Descriptor()
}

func (KubernetesAgentUpgradeSpec_ImageResolver) Type() protoreflect.EnumType {
	return &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_enumTypes[3]
}

func (x KubernetesAgentUpgradeSpec_ImageResolver) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KubernetesAgentUpgradeSpec_ImageResolver.Descriptor instead.
func (KubernetesAgentUpgradeSpec_ImageResolver) EnumDescriptor() ([]byte, []int) {
	return file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{20, 0}
}

type AuthSpec_Backend int32

const (
	AuthSpec_Basic  AuthSpec_Backend = 0
	AuthSpec_OpenID AuthSpec_Backend = 1
)

// Enum value maps for AuthSpec_Backend.
var (
	AuthSpec_Backend_name = map[int32]string{
		0: "Basic",
		1: "OpenID",
	}
	AuthSpec_Backend_value = map[string]int32{
		"Basic":  0,
		"OpenID": 1,
	}
)

func (x AuthSpec_Backend) Enum() *AuthSpec_Backend {
	p := new(AuthSpec_Backend)
	*p = x
	return p
}

func (x AuthSpec_Backend) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthSpec_Backend) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_enumTypes[4].Descriptor()
}

func (AuthSpec_Backend) Type() protoreflect.EnumType {
	return &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_enumTypes[4]
}

func (x AuthSpec_Backend) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthSpec_Backend.Descriptor instead.
func (AuthSpec_Backend) EnumDescriptor() ([]byte, []int) {
	return file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{22, 0}
}

type GatewayConfigSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Revision      *v1.Revision           `protobuf:"bytes,1,opt,name=revision,proto3" json:"revision,omitempty"`
	Server        *ServerSpec            `protobuf:"bytes,2,opt,name=server,proto3" json:"server,omitempty"`
	Management    *ManagementServerSpec  `protobuf:"bytes,3,opt,name=management,proto3" json:"management,omitempty"`
	Relay         *RelayServerSpec       `protobuf:"bytes,4,opt,name=relay,proto3" json:"relay,omitempty"`
	Health        *HealthServerSpec      `protobuf:"bytes,5,opt,name=health,proto3" json:"health,omitempty"`
	Dashboard     *DashboardServerSpec   `protobuf:"bytes,6,opt,name=dashboard,proto3" json:"dashboard,omitempty"`
	Storage       *StorageSpec           `protobuf:"bytes,7,opt,name=storage,proto3" json:"storage,omitempty"`
	Certs         *CertsSpec             `protobuf:"bytes,8,opt,name=certs,proto3" json:"certs,omitempty"`
	Plugins       *PluginsSpec           `protobuf:"bytes,9,opt,name=plugins,proto3" json:"plugins,omitempty"`
	Keyring       *KeyringSpec           `protobuf:"bytes,10,opt,name=keyring,proto3" json:"keyring,omitempty"`
	Upgrades      *UpgradesSpec          `protobuf:"bytes,11,opt,name=upgrades,proto3" json:"upgrades,omitempty"`
	RateLimiting  *RateLimitingSpec      `protobuf:"bytes,12,opt,name=rateLimiting,proto3" json:"rateLimiting,omitempty"`
	Auth          *AuthSpec              `protobuf:"bytes,13,opt,name=auth,proto3" json:"auth,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GatewayConfigSpec) Reset() {
	*x = GatewayConfigSpec{}
	mi := &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GatewayConfigSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayConfigSpec) ProtoMessage() {}

func (x *GatewayConfigSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayConfigSpec.ProtoReflect.Descriptor instead.
func (*GatewayConfigSpec) Descriptor() ([]byte, []int) {
	return file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{0}
}

func (x *GatewayConfigSpec) GetRevision() *v1.Revision {
	if x != nil {
		return x.Revision
	}
	return nil
}

func (x *GatewayConfigSpec) GetServer() *ServerSpec {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *GatewayConfigSpec) GetManagement() *ManagementServerSpec {
	if x != nil {
		return x.Management
	}
	return nil
}

func (x *GatewayConfigSpec) GetRelay() *RelayServerSpec {
	if x != nil {
		return x.Relay
	}
	return nil
}

func (x *GatewayConfigSpec) GetHealth() *HealthServerSpec {
	if x != nil {
		return x.Health
	}
	return nil
}

func (x *GatewayConfigSpec) GetDashboard() *DashboardServerSpec {
	if x != nil {
		return x.Dashboard
	}
	return nil
}

func (x *GatewayConfigSpec) GetStorage() *StorageSpec {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *GatewayConfigSpec) GetCerts() *CertsSpec {
	if x != nil {
		return x.Certs
	}
	return nil
}

func (x *GatewayConfigSpec) GetPlugins() *PluginsSpec {
	if x != nil {
		return x.Plugins
	}
	return nil
}

func (x *GatewayConfigSpec) GetKeyring() *KeyringSpec {
	if x != nil {
		return x.Keyring
	}
	return nil
}

func (x *GatewayConfigSpec) GetUpgrades() *UpgradesSpec {
	if x != nil {
		return x.Upgrades
	}
	return nil
}

func (x *GatewayConfigSpec) GetRateLimiting() *RateLimitingSpec {
	if x != nil {
		return x.RateLimiting
	}
	return nil
}

func (x *GatewayConfigSpec) GetAuth() *AuthSpec {
	if x != nil {
		return x.Auth
	}
	return nil
}

type ServerSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Address and port to serve the gateway's internal http server on.
	HttpListenAddress *string `protobuf:"bytes,1,opt,name=httpListenAddress,proto3,oneof" json:"httpListenAddress,omitempty"`
	// Address and port to serve the gateway's external grpc server on.
	GrpcListenAddress *string `protobuf:"bytes,2,opt,name=grpcListenAddress,proto3,oneof" json:"grpcListenAddress,omitempty"`
	// The advertise address for the server.
	AdvertiseAddress *string `protobuf:"bytes,3,opt,name=advertiseAddress,proto3,oneof" json:"advertiseAddress,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ServerSpec) Reset() {
	*x = ServerSpec{}
	mi := &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerSpec) ProtoMessage() {}

func (x *ServerSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerSpec.ProtoReflect.Descriptor instead.
func (*ServerSpec) Descriptor() ([]byte, []int) {
	return file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{1}
}

func (x *ServerSpec) GetHttpListenAddress() string {
	if x != nil && x.HttpListenAddress != nil {
		return *x.HttpListenAddress
	}
	return ""
}

func (x *ServerSpec) GetGrpcListenAddress() string {
	if x != nil && x.GrpcListenAddress != nil {
		return *x.GrpcListenAddress
	}
	return ""
}

func (x *ServerSpec) GetAdvertiseAddress() string {
	if x != nil && x.AdvertiseAddress != nil {
		return *x.AdvertiseAddress
	}
	return ""
}

type ManagementServerSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Address and port to serve the management http server on.
	HttpListenAddress *string `protobuf:"bytes,1,opt,name=httpListenAddress,proto3,oneof" json:"httpListenAddress,omitempty"`
	// Address and port to serve the management grpc server on.
	GrpcListenAddress *string `protobuf:"bytes,2,opt,name=grpcListenAddress,proto3,oneof" json:"grpcListenAddress,omitempty"`
	// The advertise address for the management server.
	// This is the address at which other gateway instances will be able to reach
	// this management server.
	AdvertiseAddress *string `protobuf:"bytes,3,opt,name=advertiseAddress,proto3,oneof" json:"advertiseAddress,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ManagementServerSpec) Reset() {
	*x = ManagementServerSpec{}
	mi := &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ManagementServerSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagementServerSpec) ProtoMessage() {}

func (x *ManagementServerSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagementServerSpec.ProtoReflect.Descriptor instead.
func (*ManagementServerSpec) Descriptor() ([]byte, []int) {
	return file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{2}
}

func (x *ManagementServerSpec) GetHttpListenAddress() string {
	if x != nil && x.HttpListenAddress != nil {
		return *x.HttpListenAddress
	}
	return ""
}

func (x *ManagementServerSpec) GetGrpcListenAddress() string {
	if x != nil && x.GrpcListenAddress != nil {
		return *x.GrpcListenAddress
	}
	return ""
}

func (x *ManagementServerSpec) GetAdvertiseAddress() string {
	if x != nil && x.AdvertiseAddress != nil {
		return *x.AdvertiseAddress
	}
	return ""
}

type RelayServerSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Address and port to serve the relay grpc server on.
	GrpcListenAddress *string `protobuf:"bytes,4,opt,name=grpcListenAddress,proto3,oneof" json:"grpcListenAddress,omitempty"`
	// The advertise address for the relay server.
	// This is the address at which other gateway instances will be able to reach
	// this relay server. Configured automatically by the manager if not set.
	AdvertiseAddress *string `protobuf:"bytes,5,opt,name=advertiseAddress,proto3,oneof" json:"advertiseAddress,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RelayServerSpec) Reset() {
	*x = RelayServerSpec{}
	mi := &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelayServerSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayServerSpec) ProtoMessage() {}

func (x *RelayServerSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayServerSpec.ProtoReflect.Descriptor instead.
func (*RelayServerSpec) Descriptor() ([]byte, []int) {
	return file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{3}
}

func (x *RelayServerSpec) GetGrpcListenAddress() string {
	if x != nil && x.GrpcListenAddress != nil {
		return *x.GrpcListenAddress
	}
	return ""
}

func (x *RelayServerSpec) GetAdvertiseAddress() string {
	if x != nil && x.AdvertiseAddress != nil {
		return *x.AdvertiseAddress
	}
	return ""
}

type HealthServerSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Address and port to serve the gateway's internal health/metrics/profiling http server on.
	HttpListenAddress *string `protobuf:"bytes,1,opt,name=httpListenAddress,proto3,oneof" json:"httpListenAddress,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *HealthServerSpec) Reset() {
	*x = HealthServerSpec{}
	mi := &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthServerSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthServerSpec) ProtoMessage() {}

func (x *HealthServerSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthServerSpec.ProtoReflect.Descriptor instead.
func (*HealthServerSpec) Descriptor() ([]byte, []int) {
	return file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{4}
}

func (x *HealthServerSpec) GetHttpListenAddress() string {
	if x != nil && x.HttpListenAddress != nil {
		return *x.HttpListenAddress
	}
	return ""
}

type DashboardServerSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Address and port to serve the web dashboard on.
	HttpListenAddress *string `protobuf:"bytes,1,opt,name=httpListenAddress,proto3,oneof" json:"httpListenAddress,omitempty"`
	// The advertise address for the dashboard server.
	AdvertiseAddress *string `protobuf:"bytes,2,opt,name=advertiseAddress,proto3,oneof" json:"advertiseAddress,omitempty"`
	// The hostname at which the dashboard is expected to be reachable.
	// This is required when using OpenID Connect authentication.
	Hostname *string `protobuf:"bytes,3,opt,name=hostname,proto3,oneof" json:"hostname,omitempty"`
	// List of trusted proxies for the dashboard's http server.
	TrustedProxies []string `protobuf:"bytes,4,rep,name=trustedProxies,proto3" json:"trustedProxies,omitempty"`
	// Optional certificate configuration. If not set, the dashboard will use
	// the same certificates as the gateway's internal http server.
	WebCerts      *CertsSpec `protobuf:"bytes,5,opt,name=webCerts,proto3,oneof" json:"webCerts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DashboardServerSpec) Reset() {
	*x = DashboardServerSpec{}
	mi := &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DashboardServerSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardServerSpec) ProtoMessage() {}

func (x *DashboardServerSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardServerSpec.ProtoReflect.Descriptor instead.
func (*DashboardServerSpec) Descriptor() ([]byte, []int) {
	return file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{5}
}

func (x *DashboardServerSpec) GetHttpListenAddress() string {
	if x != nil && x.HttpListenAddress != nil {
		return *x.HttpListenAddress
	}
	return ""
}

func (x *DashboardServerSpec) GetAdvertiseAddress() string {
	if x != nil && x.AdvertiseAddress != nil {
		return *x.AdvertiseAddress
	}
	return ""
}

func (x *DashboardServerSpec) GetHostname() string {
	if x != nil && x.Hostname != nil {
		return *x.Hostname
	}
	return ""
}

func (x *DashboardServerSpec) GetTrustedProxies() []string {
	if x != nil {
		return x.TrustedProxies
	}
	return nil
}

func (x *DashboardServerSpec) GetWebCerts() *CertsSpec {
	if x != nil {
		return x.WebCerts
	}
	return nil
}

type StorageSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Key-value storage backend.
	Backend       *StorageBackend `protobuf:"varint,1,opt,name=backend,proto3,enum=config.v1.StorageBackend,oneof" json:"backend,omitempty"`
	Etcd          *EtcdSpec       `protobuf:"bytes,2,opt,name=etcd,proto3" json:"etcd,omitempty"`
	JetStream     *JetStreamSpec  `protobuf:"bytes,3,opt,name=jetStream,proto3" json:"jetStream,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StorageSpec) Reset() {
	*x = StorageSpec{}
	mi := &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StorageSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageSpec) ProtoMessage() {}

func (x *StorageSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageSpec.ProtoReflect.Descriptor instead.
func (*StorageSpec) Descriptor() ([]byte, []int) {
	return file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{6}
}

func (x *StorageSpec) GetBackend() StorageBackend {
	if x != nil && x.Backend != nil {
		return *x.Backend
	}
	return StorageBackend_Etcd
}

func (x *StorageSpec) GetEtcd() *EtcdSpec {
	if x != nil {
		return x.Etcd
	}
	return nil
}

func (x *StorageSpec) GetJetStream() *JetStreamSpec {
	if x != nil {
		return x.JetStream
	}
	return nil
}

type EtcdSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Etcd server endpoints.
	Endpoints []string `protobuf:"bytes,1,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	// Etcd client certificate configuration.
	Certs         *MTLSSpec `protobuf:"bytes,2,opt,name=certs,proto3" json:"certs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EtcdSpec) Reset() {
	*x = EtcdSpec{}
	mi := &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EtcdSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EtcdSpec) ProtoMessage() {}

func (x *EtcdSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EtcdSpec.ProtoReflect.Descriptor instead.
func (*EtcdSpec) Descriptor() ([]byte, []int) {
	return file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{7}
}

func (x *EtcdSpec) GetEndpoints() []string {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *EtcdSpec) GetCerts() *MTLSSpec {
	if x != nil {
		return x.Certs
	}
	return nil
}

type MTLSSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Path to the server CA certificate. Mutually exclusive with serverCAData.
	ServerCA *string `protobuf:"bytes,1,opt,name=serverCA,proto3,oneof" json:"serverCA,omitempty"`
	// PEM encoded server CA certificate data. Mutually exclusive with serverCA.
	ServerCAData *string `protobuf:"bytes,2,opt,name=serverCAData,proto3,oneof" json:"serverCAData,omitempty"`
	// Path to the client CA certificate (not needed in all cases). Mutually exclusive with clientCAData.
	ClientCA *string `protobuf:"bytes,3,opt,name=clientCA,proto3,oneof" json:"clientCA,omitempty"`
	// PEM encoded client CA certificate data. Mutually exclusive with clientCA.
	ClientCAData *string `protobuf:"bytes,4,opt,name=clientCAData,proto3,oneof" json:"clientCAData,omitempty"`
	// Path to the certificate used for client-cert auth. Mutually exclusive with clientCertData.
	ClientCert *string `protobuf:"bytes,5,opt,name=clientCert,proto3,oneof" json:"clientCert,omitempty"`
	// PEM encoded client certificate data. Mutually exclusive with clientCert.
	ClientCertData *string `protobuf:"bytes,6,opt,name=clientCertData,proto3,oneof" json:"clientCertData,omitempty"`
	// Path to the private key used for client-cert auth. Mutually exclusive with clientKeyData.
	ClientKey *string `protobuf:"bytes,7,opt,name=clientKey,proto3,oneof" json:"clientKey,omitempty"`
	// PEM encoded client key data. Mutually exclusive with clientKey.
	ClientKeyData *string `protobuf:"bytes,8,opt,name=clientKeyData,proto3,oneof" json:"clientKeyData,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MTLSSpec) Reset() {
	*x = MTLSSpec{}
	mi := &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MTLSSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MTLSSpec) ProtoMessage() {}

func (x *MTLSSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MTLSSpec.ProtoReflect.Descriptor instead.
func (*MTLSSpec) Descriptor() ([]byte, []int) {
	return file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{8}
}

func (x *MTLSSpec) GetServerCA() string {
	if x != nil && x.ServerCA != nil {
		return *x.ServerCA
	}
	return ""
}

func (x *MTLSSpec) GetServerCAData() string {
	if x != nil && x.ServerCAData != nil {
		return *x.ServerCAData
	}
	return ""
}

func (x *MTLSSpec) GetClientCA() string {
	if x != nil && x.ClientCA != nil {
		return *x.ClientCA
	}
	return ""
}

func (x *MTLSSpec) GetClientCAData() string {
	if x != nil && x.ClientCAData != nil {
		return *x.ClientCAData
	}
	return ""
}

func (x *MTLSSpec) GetClientCert() string {
	if x != nil && x.ClientCert != nil {
		return *x.ClientCert
	}
	return ""
}

func (x *MTLSSpec) GetClientCertData() string {
	if x != nil && x.ClientCertData != nil {
		return *x.ClientCertData
	}
	return ""
}

func (x *MTLSSpec) GetClientKey() string {
	if x != nil && x.ClientKey != nil {
		return *x.ClientKey
	}
	return ""
}

func (x *MTLSSpec) GetClientKeyData() string {
	if x != nil && x.ClientKeyData != nil {
		return *x.ClientKeyData
	}
	return ""
}

type JetStreamSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Jetstream server endpoint.
	Endpoint *string `protobuf:"bytes,1,opt,name=endpoint,proto3,oneof" json:"endpoint,omitempty"`
	// Path to the Jetstream nkey seed.
	NkeySeedPath  *string `protobuf:"bytes,2,opt,name=nkeySeedPath,proto3,oneof" json:"nkeySeedPath,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JetStreamSpec) Reset() {
	*x = JetStreamSpec{}
	mi := &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JetStreamSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JetStreamSpec) ProtoMessage() {}

func (x *JetStreamSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JetStreamSpec.ProtoReflect.Descriptor instead.
func (*JetStreamSpec) Descriptor() ([]byte, []int) {
	return file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{9}
}

func (x *JetStreamSpec) GetEndpoint() string {
	if x != nil && x.Endpoint != nil {
		return *x.Endpoint
	}
	return ""
}

func (x *JetStreamSpec) GetNkeySeedPath() string {
	if x != nil && x.NkeySeedPath != nil {
		return *x.NkeySeedPath
	}
	return ""
}

type CertsSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Path to a PEM encoded CA certificate file. Mutually exclusive with caCertData.
	CaCert *string `protobuf:"bytes,1,opt,name=caCert,proto3,oneof" json:"caCert,omitempty"`
	// PEM encoded CA certificate data. Mutually exclusive with caCert.
	CaCertData *string `protobuf:"bytes,2,opt,name=caCertData,proto3,oneof" json:"caCertData,omitempty"`
	// Path to a PEM encoded server certificate file. Mutually exclusive with servingCertData.
	ServingCert *string `protobuf:"bytes,3,opt,name=servingCert,proto3,oneof" json:"servingCert,omitempty"`
	// PEM encoded server certificate data. Mutually exclusive with servingCert.
	ServingCertData *string `protobuf:"bytes,4,opt,name=servingCertData,proto3,oneof" json:"servingCertData,omitempty"`
	// Path to a PEM encoded server key file. Mutually exclusive with servingKeyData.
	ServingKey *string `protobuf:"bytes,5,opt,name=servingKey,proto3,oneof" json:"servingKey,omitempty"`
	// String containing PEM encoded server key data. Mutually exclusive with servingKey.
	ServingKeyData *string `protobuf:"bytes,6,opt,name=servingKeyData,proto3,oneof" json:"servingKeyData,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CertsSpec) Reset() {
	*x = CertsSpec{}
	mi := &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertsSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertsSpec) ProtoMessage() {}

func (x *CertsSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertsSpec.ProtoReflect.Descriptor instead.
func (*CertsSpec) Descriptor() ([]byte, []int) {
	return file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{10}
}

func (x *CertsSpec) GetCaCert() string {
	if x != nil && x.CaCert != nil {
		return *x.CaCert
	}
	return ""
}

func (x *CertsSpec) GetCaCertData() string {
	if x != nil && x.CaCertData != nil {
		return *x.CaCertData
	}
	return ""
}

func (x *CertsSpec) GetServingCert() string {
	if x != nil && x.ServingCert != nil {
		return *x.ServingCert
	}
	return ""
}

func (x *CertsSpec) GetServingCertData() string {
	if x != nil && x.ServingCertData != nil {
		return *x.ServingCertData
	}
	return ""
}

func (x *CertsSpec) GetServingKey() string {
	if x != nil && x.ServingKey != nil {
		return *x.ServingKey
	}
	return ""
}

func (x *CertsSpec) GetServingKeyData() string {
	if x != nil && x.ServingKeyData != nil {
		return *x.ServingKeyData
	}
	return ""
}

type PluginsSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Directory to search for plugin binaries.
	Dir *string `protobuf:"bytes,1,opt,name=dir,proto3,oneof" json:"dir,omitempty"`
	// Optional set of filters which can be used to prevent specific plugins
	// from being loaded.
	Filters *PluginFilters `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	// Plugin cache configuration.
	Cache         *CacheSpec `protobuf:"bytes,4,opt,name=cache,proto3" json:"cache,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PluginsSpec) Reset() {
	*x = PluginsSpec{}
	mi := &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PluginsSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginsSpec) ProtoMessage() {}

func (x *PluginsSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginsSpec.ProtoReflect.Descriptor instead.
func (*PluginsSpec) Descriptor() ([]byte, []int) {
	return file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{11}
}

func (x *PluginsSpec) GetDir() string {
	if x != nil && x.Dir != nil {
		return *x.Dir
	}
	return ""
}

func (x *PluginsSpec) GetFilters() *PluginFilters {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *PluginsSpec) GetCache() *CacheSpec {
	if x != nil {
		return x.Cache
	}
	return nil
}

type PluginFilters struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of plugin go module paths not to load.
	Exclude       []string `protobuf:"bytes,1,rep,name=exclude,proto3" json:"exclude,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PluginFilters) Reset() {
	*x = PluginFilters{}
	mi := &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PluginFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginFilters) ProtoMessage() {}

func (x *PluginFilters) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginFilters.ProtoReflect.Descriptor instead.
func (*PluginFilters) Descriptor() ([]byte, []int) {
	return file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{12}
}

func (x *PluginFilters) GetExclude() []string {
	if x != nil {
		return x.Exclude
	}
	return nil
}

type CacheSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Cache backend to use for storing plugin binaries and patches.
	Backend *CacheBackend `protobuf:"varint,2,opt,name=backend,proto3,enum=config.v1.CacheBackend,oneof" json:"backend,omitempty"`
	// Filesystem cache configuration. Required if backend is Filesystem.
	Filesystem    *FilesystemCacheSpec `protobuf:"bytes,3,opt,name=filesystem,proto3" json:"filesystem,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CacheSpec) Reset() {
	*x = CacheSpec{}
	mi := &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CacheSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheSpec) ProtoMessage() {}

func (x *CacheSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheSpec.ProtoReflect.Descriptor instead.
func (*CacheSpec) Descriptor() ([]byte, []int) {
	return file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{13}
}

func (x *CacheSpec) GetBackend() CacheBackend {
	if x != nil && x.Backend != nil {
		return *x.Backend
	}
	return CacheBackend_Filesystem
}

func (x *CacheSpec) GetFilesystem() *FilesystemCacheSpec {
	if x != nil {
		return x.Filesystem
	}
	return nil
}

type FilesystemCacheSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Directory to store plugin binaries and patches in.
	Dir           *string `protobuf:"bytes,1,opt,name=dir,proto3,oneof" json:"dir,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilesystemCacheSpec) Reset() {
	*x = FilesystemCacheSpec{}
	mi := &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilesystemCacheSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemCacheSpec) ProtoMessage() {}

func (x *FilesystemCacheSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemCacheSpec.ProtoReflect.Descriptor instead.
func (*FilesystemCacheSpec) Descriptor() ([]byte, []int) {
	return file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{14}
}

func (x *FilesystemCacheSpec) GetDir() string {
	if x != nil && x.Dir != nil {
		return *x.Dir
	}
	return ""
}

type KeyringSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Directories to search for files containing runtime keys.
	// All files in these directories will be loaded into the keyring on
	// startup. Keys loaded in this way will not be persisted.
	RuntimeKeyDirs []string `protobuf:"bytes,1,rep,name=runtimeKeyDirs,proto3" json:"runtimeKeyDirs,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *KeyringSpec) Reset() {
	*x = KeyringSpec{}
	mi := &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyringSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyringSpec) ProtoMessage() {}

func (x *KeyringSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyringSpec.ProtoReflect.Descriptor instead.
func (*KeyringSpec) Descriptor() ([]byte, []int) {
	return file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{15}
}

func (x *KeyringSpec) GetRuntimeKeyDirs() []string {
	if x != nil {
		return x.RuntimeKeyDirs
	}
	return nil
}

type UpgradesSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Agents        *AgentUpgradesSpec     `protobuf:"bytes,1,opt,name=agents,proto3,oneof" json:"agents,omitempty"`
	Plugins       *PluginUpgradesSpec    `protobuf:"bytes,2,opt,name=plugins,proto3,oneof" json:"plugins,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpgradesSpec) Reset() {
	*x = UpgradesSpec{}
	mi := &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradesSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradesSpec) ProtoMessage() {}

func (x *UpgradesSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradesSpec.ProtoReflect.Descriptor instead.
func (*UpgradesSpec) Descriptor() ([]byte, []int) {
	return file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{16}
}

func (x *UpgradesSpec) GetAgents() *AgentUpgradesSpec {
	if x != nil {
		return x.Agents
	}
	return nil
}

func (x *UpgradesSpec) GetPlugins() *PluginUpgradesSpec {
	if x != nil {
		return x.Plugins
	}
	return nil
}

type AgentUpgradesSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Kubernetes agent upgrade driver configuration.
	Kubernetes    *KubernetesAgentUpgradeSpec `protobuf:"bytes,2,opt,name=kubernetes,proto3" json:"kubernetes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AgentUpgradesSpec) Reset() {
	*x = AgentUpgradesSpec{}
	mi := &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentUpgradesSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentUpgradesSpec) ProtoMessage() {}

func (x *AgentUpgradesSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentUpgradesSpec.ProtoReflect.Descriptor instead.
func (*AgentUpgradesSpec) Descriptor() ([]byte, []int) {
	return file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{17}
}

func (x *AgentUpgradesSpec) GetKubernetes() *KubernetesAgentUpgradeSpec {
	if x != nil {
		return x.Kubernetes
	}
	return nil
}

type PluginUpgradesSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Binary plugin upgrade driver configuration.
	Binary        *BinaryPluginUpgradeSpec `protobuf:"bytes,2,opt,name=binary,proto3" json:"binary,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PluginUpgradesSpec) Reset() {
	*x = PluginUpgradesSpec{}
	mi := &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PluginUpgradesSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginUpgradesSpec) ProtoMessage() {}

func (x *PluginUpgradesSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginUpgradesSpec.ProtoReflect.Descriptor instead.
func (*PluginUpgradesSpec) Descriptor() ([]byte, []int) {
	return file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{18}
}

func (x *PluginUpgradesSpec) GetBinary() *BinaryPluginUpgradeSpec {
	if x != nil {
		return x.Binary
	}
	return nil
}

type BinaryPluginUpgradeSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Patch engine to use for calculating plugin patches.
	PatchEngine   *PatchEngine `protobuf:"varint,1,opt,name=patchEngine,proto3,enum=config.v1.PatchEngine,oneof" json:"patchEngine,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BinaryPluginUpgradeSpec) Reset() {
	*x = BinaryPluginUpgradeSpec{}
	mi := &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BinaryPluginUpgradeSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinaryPluginUpgradeSpec) ProtoMessage() {}

func (x *BinaryPluginUpgradeSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinaryPluginUpgradeSpec.ProtoReflect.Descriptor instead.
func (*BinaryPluginUpgradeSpec) Descriptor() ([]byte, []int) {
	return file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{19}
}

func (x *BinaryPluginUpgradeSpec) GetPatchEngine() PatchEngine {
	if x != nil && x.PatchEngine != nil {
		return *x.PatchEngine
	}
	return PatchEngine_Bsdiff
}

type KubernetesAgentUpgradeSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Agent image resolver to use.
	ImageResolver *KubernetesAgentUpgradeSpec_ImageResolver `protobuf:"varint,1,opt,name=imageResolver,proto3,enum=config.v1.KubernetesAgentUpgradeSpec_ImageResolver,oneof" json:"imageResolver,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KubernetesAgentUpgradeSpec) Reset() {
	*x = KubernetesAgentUpgradeSpec{}
	mi := &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubernetesAgentUpgradeSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesAgentUpgradeSpec) ProtoMessage() {}

func (x *KubernetesAgentUpgradeSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesAgentUpgradeSpec.ProtoReflect.Descriptor instead.
func (*KubernetesAgentUpgradeSpec) Descriptor() ([]byte, []int) {
	return file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{20}
}

func (x *KubernetesAgentUpgradeSpec) GetImageResolver() KubernetesAgentUpgradeSpec_ImageResolver {
	if x != nil && x.ImageResolver != nil {
		return *x.ImageResolver
	}
	return KubernetesAgentUpgradeSpec_Noop
}

type RateLimitingSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Base event rate used for rate limiting agent connection attempts.
	Rate *float64 `protobuf:"fixed64,1,opt,name=rate,proto3,oneof" json:"rate,omitempty"`
	// Burst event rate.
	Burst         *int32 `protobuf:"varint,2,opt,name=burst,proto3,oneof" json:"burst,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RateLimitingSpec) Reset() {
	*x = RateLimitingSpec{}
	mi := &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RateLimitingSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitingSpec) ProtoMessage() {}

func (x *RateLimitingSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitingSpec.ProtoReflect.Descriptor instead.
func (*RateLimitingSpec) Descriptor() ([]byte, []int) {
	return file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{21}
}

func (x *RateLimitingSpec) GetRate() float64 {
	if x != nil && x.Rate != nil {
		return *x.Rate
	}
	return 0
}

func (x *RateLimitingSpec) GetBurst() int32 {
	if x != nil && x.Burst != nil {
		return *x.Burst
	}
	return 0
}

type AuthSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Auth backend to use.
	Backend *AuthSpec_Backend `protobuf:"varint,1,opt,name=backend,proto3,enum=config.v1.AuthSpec_Backend,oneof" json:"backend,omitempty"`
	// Basic auth using a username and password.
	Basic *BasicAuthSpec `protobuf:"bytes,3,opt,name=basic,proto3" json:"basic,omitempty"`
	// OpenID Connect auth.
	Openid        *OpenIDAuthSpec `protobuf:"bytes,2,opt,name=openid,proto3" json:"openid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthSpec) Reset() {
	*x = AuthSpec{}
	mi := &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthSpec) ProtoMessage() {}

func (x *AuthSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthSpec.ProtoReflect.Descriptor instead.
func (*AuthSpec) Descriptor() ([]byte, []int) {
	return file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{22}
}

func (x *AuthSpec) GetBackend() AuthSpec_Backend {
	if x != nil && x.Backend != nil {
		return *x.Backend
	}
	return AuthSpec_Basic
}

func (x *AuthSpec) GetBasic() *BasicAuthSpec {
	if x != nil {
		return x.Basic
	}
	return nil
}

func (x *AuthSpec) GetOpenid() *OpenIDAuthSpec {
	if x != nil {
		return x.Openid
	}
	return nil
}

type OpenIDAuthSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The OP's Issuer identifier. This must exactly match the issuer URL
	// obtained from the discovery endpoint, and will match the `iss' claim
	// in the ID Tokens issued by the OP.
	// The discovery endpoint consists of this URL concatenated with the
	// exact string `/.well-known/openid-configuration'.
	Issuer *string `protobuf:"bytes,1,opt,name=issuer,proto3,oneof" json:"issuer,omitempty"`
	// Optional PEM-encoded CA certificate data for the issuer.
	CaCertData *string `protobuf:"bytes,2,opt,name=caCertData,proto3,oneof" json:"caCertData,omitempty"`
	// The RP's client ID.
	ClientId *string `protobuf:"bytes,3,opt,name=clientId,proto3,oneof" json:"clientId,omitempty"`
	// The RP's client secret.
	ClientSecret *string `protobuf:"bytes,4,opt,name=clientSecret,proto3,oneof" json:"clientSecret,omitempty"`
	// IdentifyingClaim is the claim that will be used to identify the user
	// (e.g. "sub", "email", etc). Defaults to "sub".
	IdentifyingClaim *string `protobuf:"bytes,5,opt,name=identifyingClaim,proto3,oneof" json:"identifyingClaim,omitempty"`
	// Scope specifies optional requested permissions.
	Scopes        []string `protobuf:"bytes,6,rep,name=scopes,proto3" json:"scopes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OpenIDAuthSpec) Reset() {
	*x = OpenIDAuthSpec{}
	mi := &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpenIDAuthSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenIDAuthSpec) ProtoMessage() {}

func (x *OpenIDAuthSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenIDAuthSpec.ProtoReflect.Descriptor instead.
func (*OpenIDAuthSpec) Descriptor() ([]byte, []int) {
	return file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{23}
}

func (x *OpenIDAuthSpec) GetIssuer() string {
	if x != nil && x.Issuer != nil {
		return *x.Issuer
	}
	return ""
}

func (x *OpenIDAuthSpec) GetCaCertData() string {
	if x != nil && x.CaCertData != nil {
		return *x.CaCertData
	}
	return ""
}

func (x *OpenIDAuthSpec) GetClientId() string {
	if x != nil && x.ClientId != nil {
		return *x.ClientId
	}
	return ""
}

func (x *OpenIDAuthSpec) GetClientSecret() string {
	if x != nil && x.ClientSecret != nil {
		return *x.ClientSecret
	}
	return ""
}

func (x *OpenIDAuthSpec) GetIdentifyingClaim() string {
	if x != nil && x.IdentifyingClaim != nil {
		return *x.IdentifyingClaim
	}
	return ""
}

func (x *OpenIDAuthSpec) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type BasicAuthSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BasicAuthSpec) Reset() {
	*x = BasicAuthSpec{}
	mi := &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BasicAuthSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicAuthSpec) ProtoMessage() {}

func (x *BasicAuthSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicAuthSpec.ProtoReflect.Descriptor instead.
func (*BasicAuthSpec) Descriptor() ([]byte, []int) {
	return file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_rawDescGZIP(), []int{24}
}

var File_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto protoreflect.FileDescriptor

const file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_rawDesc = "" +
	"\n" +
	">github.com/aity-cloud/monty/pkg/config/v1/gateway_config.proto\x12\tconfig.v1\x1a\x1bbuf/validate/validate.proto\x1a)github.com/kralicky/codegen/cli/cli.proto\x1a7github.com/aity-cloud/monty/pkg/apis/core/v1/core.proto\"\xac\b\n" +
	"\x11GatewayConfigSpec\x122\n" +
	"\brevision\x18\x01 \x01(\v2\x0e.core.RevisionB\x06\x8a\xc0\f\x02(\x01R\brevision\x12-\n" +
	"\x06server\x18\x02 \x01(\v2\x15.config.v1.ServerSpecR\x06server\x12?\n" +
	"\n" +
	"management\x18\x03 \x01(\v2\x1f.config.v1.ManagementServerSpecR\n" +
	"management\x120\n" +
	"\x05relay\x18\x04 \x01(\v2\x1a.config.v1.RelayServerSpecR\x05relay\x123\n" +
	"\x06health\x18\x05 \x01(\v2\x1b.config.v1.HealthServerSpecR\x06health\x12<\n" +
	"\tdashboard\x18\x06 \x01(\v2\x1e.config.v1.DashboardServerSpecR\tdashboard\x128\n" +
	"\astorage\x18\a \x01(\v2\x16.config.v1.StorageSpecB\x06\x8a\xc0\f\x02(\x01R\astorage\x12*\n" +
	"\x05certs\x18\b \x01(\v2\x14.config.v1.CertsSpecR\x05certs\x120\n" +
	"\aplugins\x18\t \x01(\v2\x16.config.v1.PluginsSpecR\aplugins\x120\n" +
	"\akeyring\x18\n" +
	" \x01(\v2\x16.config.v1.KeyringSpecR\akeyring\x123\n" +
	"\bupgrades\x18\v \x01(\v2\x17.config.v1.UpgradesSpecR\bupgrades\x12?\n" +
	"\frateLimiting\x18\f \x01(\v2\x1b.config.v1.RateLimitingSpecR\frateLimiting\x12'\n" +
	"\x04auth\x18\r \x01(\v2\x13.config.v1.AuthSpecR\x04auth:\xe4\x02\xbaH\xe0\x02\x1a\xdd\x02\n" +
	"\x1bcheck_conflicting_addresses\x12*gateway listen addresses must not conflict\x1a\x91\x02[  this.server.httpListenAddress,  this.server.grpcListenAddress,  this.management.httpListenAddress,  this.management.grpcListenAddress,  this.relay.grpcListenAddress,  this.health.httpListenAddress,  this.dashboard.httpListenAddress].filter(a, !a.endsWith(':0')).unique()\"\xda\x04\n" +
	"\n" +
	"ServerSpec\x12\x84\x01\n" +
	"\x11httpListenAddress\x18\x01 \x01(\tBQ\xbaH<\xba\x019\n" +
	"\x1aserver_http_listen_address\x1a\x1bthis.isValidListenAddress()\x8a\xc0\f\x0e\n" +
	"\f0.0.0.0:8080H\x00R\x11httpListenAddress\x88\x01\x01\x12\x84\x01\n" +
	"\x11grpcListenAddress\x18\x02 \x01(\tBQ\xbaH<\xba\x019\n" +
	"\x1aserver_grpc_listen_address\x1a\x1bthis.isValidListenAddress()\x8a\xc0\f\x0e\n" +
	"\f0.0.0.0:9090H\x01R\x11grpcListenAddress\x88\x01\x01\x12\xfc\x01\n" +
	"\x10advertiseAddress\x18\x03 \x01(\tB\xca\x01\xbaH\xc0\x01\xba\x01<\n" +
	"\x1dserver_grpc_advertise_address\x1a\x1bthis.isValidListenAddress()\xba\x01~\n" +
	"\"server_grpc_advertise_address_port\x12+advertise address must have a non-zero port\x1a+!this.endsWith(':0') && !this.endsWith(':')\x8a\xc0\f\x02(\x01H\x02R\x10advertiseAddress\x88\x01\x01B\x14\n" +
	"\x12_httpListenAddressB\x14\n" +
	"\x12_grpcListenAddressB\x13\n" +
	"\x11_advertiseAddress\"\xd8\x04\n" +
	"\x14ManagementServerSpec\x12\x83\x01\n" +
	"\x11httpListenAddress\x18\x01 \x01(\tBP\xbaH:\xba\x017\n" +
	"\x18mgmt_http_listen_address\x1a\x1bthis.isValidListenAddress()\x8a\xc0\f\x0f\n" +
	"\r0.0.0.0:11080H\x00R\x11httpListenAddress\x88\x01\x01\x12\x83\x01\n" +
	"\x11grpcListenAddress\x18\x02 \x01(\tBP\xbaH:\xba\x017\n" +
	"\x18mgmt_grpc_listen_address\x1a\x1bthis.isValidListenAddress()\x8a\xc0\f\x0f\n" +
	"\r0.0.0.0:11090H\x01R\x11grpcListenAddress\x88\x01\x01\x12\xf2\x01\n" +
	"\x10advertiseAddress\x18\x03 \x01(\tB\xc0\x01\xbaH\xbc\x01\xba\x01:\n" +
	"\x1bmgmt_grpc_advertise_address\x1a\x1bthis.isValidListenAddress()\xba\x01|\n" +
	" mgmt_grpc_advertise_address_port\x12+advertise address must have a non-zero port\x1a+!this.endsWith(':0') && !this.endsWith(':')H\x02R\x10advertiseAddress\x88\x01\x01B\x14\n" +
	"\x12_httpListenAddressB\x14\n" +
	"\x12_grpcListenAddressB\x13\n" +
	"\x11_advertiseAddress\"\xba\x03\n" +
	"\x0fRelayServerSpec\x12\x84\x01\n" +
	"\x11grpcListenAddress\x18\x04 \x01(\tBQ\xbaH;\xba\x018\n" +
	"\x19relay_grpc_listen_address\x1a\x1bthis.isValidListenAddress()\x8a\xc0\f\x0f\n" +
	"\r0.0.0.0:11190H\x00R\x11grpcListenAddress\x88\x01\x01\x12\xf4\x01\n" +
	"\x10advertiseAddress\x18\x05 \x01(\tB\xc2\x01\xbaH\xbe\x01\xba\x01;\n" +
	"\x1crelay_grpc_advertise_address\x1a\x1bthis.isValidListenAddress()\xba\x01}\n" +
	"!relay_grpc_advertise_address_port\x12+advertise address must have a non-zero port\x1a+!this.endsWith(':0') && !this.endsWith(':')H\x01R\x10advertiseAddress\x88\x01\x01B\x14\n" +
	"\x12_grpcListenAddressB\x13\n" +
	"\x11_advertiseAddress\"\xaf\x01\n" +
	"\x10HealthServerSpec\x12\x84\x01\n" +
	"\x11httpListenAddress\x18\x01 \x01(\tBQ\xbaH<\xba\x019\n" +
	"\x1ahealth_http_listen_address\x1a\x1bthis.isValidListenAddress()\x8a\xc0\f\x0e\n" +
	"\f0.0.0.0:8086H\x00R\x11httpListenAddress\x88\x01\x01B\x14\n" +
	"\x12_httpListenAddress\"\xce\x05\n" +
	"\x13DashboardServerSpec\x12\x88\x01\n" +
	"\x11httpListenAddress\x18\x01 \x01(\tBU\xbaH?\xba\x01<\n" +
	"\x1ddashboard_http_listen_address\x1a\x1bthis.isValidListenAddress()\x8a\xc0\f\x0f\n" +
	"\r0.0.0.0:12080H\x00R\x11httpListenAddress\x88\x01\x01\x12\xfd\x01\n" +
	"\x10advertiseAddress\x18\x02 \x01(\tB\xcb\x01\xbaH\xc7\x01\xba\x01?\n" +
	" dashboard_http_advertise_address\x1a\x1bthis.isValidListenAddress()\xba\x01\x81\x01\n" +
	"%dashboard_http_advertise_address_port\x12+advertise address must have a non-zero port\x1a+!this.endsWith(':0') && !this.endsWith(':')H\x01R\x10advertiseAddress\x88\x01\x01\x12(\n" +
	"\bhostname\x18\x03 \x01(\tB\a\xbaH\x04r\x02h\x01H\x02R\bhostname\x88\x01\x01\x12\x85\x01\n" +
	"\x0etrustedProxies\x18\x04 \x03(\tB]\xbaHZ\x92\x01W\"U\xba\x01R\n" +
	"\n" +
	"ip_or_cidr\x12\"must be a valid IP address or CIDR\x1a this.isIp() || this.isIpPrefix()R\x0etrustedProxies\x125\n" +
	"\bwebCerts\x18\x05 \x01(\v2\x14.config.v1.CertsSpecH\x03R\bwebCerts\x88\x01\x01B\x14\n" +
	"\x12_httpListenAddressB\x13\n" +
	"\x11_advertiseAddressB\v\n" +
	"\t_hostnameB\v\n" +
	"\t_webCerts\"\x82\x03\n" +
	"\vStorageSpec\x12L\n" +
	"\abackend\x18\x01 \x01(\x0e2\x19.config.v1.StorageBackendB\x12\xbaH\x05\x82\x01\x02\x10\x01\x8a\xc0\f\x06\n" +
	"\x04EtcdH\x00R\abackend\x88\x01\x01\x12'\n" +
	"\x04etcd\x18\x02 \x01(\v2\x13.config.v1.EtcdSpecR\x04etcd\x126\n" +
	"\tjetStream\x18\x03 \x01(\v2\x18.config.v1.JetStreamSpecR\tjetStream:\xb7\x01\xbaH\xb3\x01\x1a\xb0\x01\n" +
	"\x1astorage_backend_configured\x12=selected storage backend must have matching configuration set\x1aS(this.backend == 0 && has(this.etcd)) || (this.backend == 1 && has(this.jetStream))B\n" +
	"\n" +
	"\b_backend\"f\n" +
	"\bEtcdSpec\x12/\n" +
	"\tendpoints\x18\x01 \x03(\tB\x11\xbaH\x0e\x92\x01\v\b\x01\x18\x01\"\x05r\x03\x90\x01\x01R\tendpoints\x12)\n" +
	"\x05certs\x18\x02 \x01(\v2\x13.config.v1.MTLSSpecR\x05certs\"\x9f\v\n" +
	"\bMTLSSpec\x12\x1f\n" +
	"\bserverCA\x18\x01 \x01(\tH\x00R\bserverCA\x88\x01\x01\x12^\n" +
	"\fserverCAData\x18\x02 \x01(\tB5\xbaH,\xba\x01)\n" +
	"\x13x509_server_ca_data\x1a\x12this.x509IsValid()\x8a\xc0\f\x02\x18\x01H\x01R\fserverCAData\x88\x01\x01\x12\x1f\n" +
	"\bclientCA\x18\x03 \x01(\tH\x02R\bclientCA\x88\x01\x01\x12^\n" +
	"\fclientCAData\x18\x04 \x01(\tB5\xbaH,\xba\x01)\n" +
	"\x13x509_client_ca_data\x1a\x12this.x509IsValid()\x8a\xc0\f\x02\x18\x01H\x03R\fclientCAData\x88\x01\x01\x12#\n" +
	"\n" +
	"clientCert\x18\x05 \x01(\tH\x04R\n" +
	"clientCert\x88\x01\x01\x12d\n" +
	"\x0eclientCertData\x18\x06 \x01(\tB7\xbaH.\xba\x01+\n" +
	"\x15x509_client_cert_data\x1a\x12this.x509IsValid()\x8a\xc0\f\x02\x18\x01H\x05R\x0eclientCertData\x88\x01\x01\x12!\n" +
	"\tclientKey\x18\a \x01(\tH\x06R\tclientKey\x88\x01\x01\x12_\n" +
	"\rclientKeyData\x18\b \x01(\tB4\xbaH+\xba\x01(\n" +
	"\x13pem_client_key_data\x1a\x11this.pemIsValid()\x8a\xc0\f\x02\x18\x01H\aR\rclientKeyData\x88\x01\x01:\x83\x06\xbaH\xff\x05\x1a\x8e\x01\n" +
	"\"fields_mutually_exclusive_serverca\x127fields serverCA and serverCAData are mutually exclusive\x1a/!(has(this.serverCA) && has(this.serverCAData))\x1a\x8e\x01\n" +
	"\"fields_mutually_exclusive_clientca\x127fields clientCA and clientCAData are mutually exclusive\x1a/!(has(this.clientCA) && has(this.clientCAData))\x1a\x98\x01\n" +
	"$fields_mutually_exclusive_clientcert\x12;fields clientCert and clientCertData are mutually exclusive\x1a3!(has(this.clientCert) && has(this.clientCertData))\x1a\x93\x01\n" +
	"#fields_mutually_exclusive_clientkey\x129fields clientKey and clientKeyData are mutually exclusive\x1a1!(has(this.clientKey) && has(this.clientKeyData))\x1a\xa9\x01\n" +
	"\x19x509_validate_client_cert\x1a\x8b\x01(has(this.clientCertData) && has(this.serverCAData))? x509Parse(this.clientCertData).checkSignatureFrom(x509Parse(this.serverCAData)): trueB\v\n" +
	"\t_serverCAB\x0f\n" +
	"\r_serverCADataB\v\n" +
	"\t_clientCAB\x0f\n" +
	"\r_clientCADataB\r\n" +
	"\v_clientCertB\x11\n" +
	"\x0f_clientCertDataB\f\n" +
	"\n" +
	"_clientKeyB\x10\n" +
	"\x0e_clientKeyData\"\x8c\x01\n" +
	"\rJetStreamSpec\x12,\n" +
	"\bendpoint\x18\x01 \x01(\tB\v\xbaH\b\xc8\x01\x01r\x03\x90\x01\x01H\x00R\bendpoint\x88\x01\x01\x12/\n" +
	"\fnkeySeedPath\x18\x02 \x01(\tB\x06\xbaH\x03\xc8\x01\x01H\x01R\fnkeySeedPath\x88\x01\x01B\v\n" +
	"\t_endpointB\x0f\n" +
	"\r_nkeySeedPath\"\xe4\b\n" +
	"\tCertsSpec\x12\x1b\n" +
	"\x06caCert\x18\x01 \x01(\tH\x00R\x06caCert\x88\x01\x01\x12X\n" +
	"\n" +
	"caCertData\x18\x02 \x01(\tB3\xbaH*\xba\x01'\n" +
	"\x11x509_ca_cert_data\x1a\x12this.x509IsValid()\x8a\xc0\f\x02\x18\x01H\x01R\n" +
	"caCertData\x88\x01\x01\x12%\n" +
	"\vservingCert\x18\x03 \x01(\tH\x02R\vservingCert\x88\x01\x01\x12g\n" +
	"\x0fservingCertData\x18\x04 \x01(\tB8\xbaH/\xba\x01,\n" +
	"\x16x509_serving_cert_data\x1a\x12this.x509IsValid()\x8a\xc0\f\x02\x18\x01H\x03R\x0fservingCertData\x88\x01\x01\x12#\n" +
	"\n" +
	"servingKey\x18\x05 \x01(\tH\x04R\n" +
	"servingKey\x88\x01\x01\x12b\n" +
	"\x0eservingKeyData\x18\x06 \x01(\tB5\xbaH,\xba\x01)\n" +
	"\x14pem_serving_key_data\x1a\x11this.pemIsValid()\x8a\xc0\f\x02\x18\x01H\x05R\x0eservingKeyData\x88\x01\x01:\xe6\x04\xbaH\xe2\x04\x1a\x80\x01\n" +
	"\x1cfields_mutually_exclusive_ca\x123fields caCert and caCertData are mutually exclusive\x1a+!(has(this.caCert) && has(this.caCertData))\x1a\x9d\x01\n" +
	"%fields_mutually_exclusive_servingcert\x12=fields servingCert and servingCertData are mutually exclusive\x1a5!(has(this.servingCert) && has(this.servingCertData))\x1a\x98\x01\n" +
	"$fields_mutually_exclusive_servingkey\x12;fields servingKey and servingKeyData are mutually exclusive\x1a3!(has(this.servingKey) && has(this.servingKeyData))\x1a\xa1\x01\n" +
	"\x13x509_validate_chain\x1a\x89\x01(has(this.servingCertData) && has(this.caCertData))? x509Parse(this.servingCertData).checkSignatureFrom(x509Parse(this.caCertData)): trueB\t\n" +
	"\a_caCertB\r\n" +
	"\v_caCertDataB\x0e\n" +
	"\f_servingCertB\x12\n" +
	"\x10_servingCertDataB\r\n" +
	"\v_servingKeyB\x11\n" +
	"\x0f_servingKeyData\"\xd5\x02\n" +
	"\vPluginsSpec\x129\n" +
	"\x03dir\x18\x01 \x01(\tB\"\xbaH\x03\xc8\x01\x01\x8a\xc0\f\x18\n" +
	"\x16/var/lib/monty/pluginsH\x00R\x03dir\x88\x01\x01\x122\n" +
	"\afilters\x18\x02 \x01(\v2\x18.config.v1.PluginFiltersR\afilters\x12*\n" +
	"\x05cache\x18\x04 \x01(\v2\x14.config.v1.CacheSpecR\x05cache:\xa2\x01\xbaH\x9e\x01\x1a\x9b\x01\n" +
	"\x12plugin_dirs_unique\x12=plugin search dir and filesystem cache dir cannot be the same\x1aFthis.cache.backend == 0 ? this.cache.filesystem.dir != this.dir : trueB\x06\n" +
	"\x04_dir\"\x80\x01\n" +
	"\rPluginFilters\x12o\n" +
	"\aexclude\x18\x01 \x03(\tBU\xbaHR\x92\x01O\"M\xba\x01J\n" +
	"\x0ego_module_path\x12\x1emust be a valid go module path\x1a\x18this.isValidModulePath()R\aexclude\"\xa9\x01\n" +
	"\tCacheSpec\x12P\n" +
	"\abackend\x18\x02 \x01(\x0e2\x17.config.v1.CacheBackendB\x18\xbaH\x05\x82\x01\x02\x10\x01\x8a\xc0\f\f\n" +
	"\n" +
	"FilesystemH\x00R\abackend\x88\x01\x01\x12>\n" +
	"\n" +
	"filesystem\x18\x03 \x01(\v2\x1e.config.v1.FilesystemCacheSpecR\n" +
	"filesystemB\n" +
	"\n" +
	"\b_backend\"]\n" +
	"\x13FilesystemCacheSpec\x12>\n" +
	"\x03dir\x18\x01 \x01(\tB'\xbaH\x03\xc8\x01\x01\x8a\xc0\f\x1d\n" +
	"\x1b/var/lib/monty/plugin-cacheH\x00R\x03dir\x88\x01\x01B\x06\n" +
	"\x04_dir\"?\n" +
	"\vKeyringSpec\x120\n" +
	"\x0eruntimeKeyDirs\x18\x01 \x03(\tB\b\xbaH\x05\x92\x01\x02\x18\x01R\x0eruntimeKeyDirs\"\x9e\x01\n" +
	"\fUpgradesSpec\x129\n" +
	"\x06agents\x18\x01 \x01(\v2\x1c.config.v1.AgentUpgradesSpecH\x00R\x06agents\x88\x01\x01\x12<\n" +
	"\aplugins\x18\x02 \x01(\v2\x1d.config.v1.PluginUpgradesSpecH\x01R\aplugins\x88\x01\x01B\t\n" +
	"\a_agentsB\n" +
	"\n" +
	"\b_plugins\"Z\n" +
	"\x11AgentUpgradesSpec\x12E\n" +
	"\n" +
	"kubernetes\x18\x02 \x01(\v2%.config.v1.KubernetesAgentUpgradeSpecR\n" +
	"kubernetes\"P\n" +
	"\x12PluginUpgradesSpec\x12:\n" +
	"\x06binary\x18\x02 \x01(\v2\".config.v1.BinaryPluginUpgradeSpecR\x06binary\"|\n" +
	"\x17BinaryPluginUpgradeSpec\x12Q\n" +
	"\vpatchEngine\x18\x01 \x01(\x0e2\x16.config.v1.PatchEngineB\x12\xbaH\x05\x82\x01\x02\x10\x01\x8a\xc0\f\x06\n" +
	"\x04ZstdH\x00R\vpatchEngine\x88\x01\x01B\x0e\n" +
	"\f_patchEngine\"\xd3\x01\n" +
	"\x1aKubernetesAgentUpgradeSpec\x12x\n" +
	"\rimageResolver\x18\x01 \x01(\x0e23.config.v1.KubernetesAgentUpgradeSpec.ImageResolverB\x18\xbaH\x05\x82\x01\x02\x10\x01\x8a\xc0\f\f\n" +
	"\n" +
	"KubernetesH\x00R\rimageResolver\x88\x01\x01\")\n" +
	"\rImageResolver\x12\b\n" +
	"\x04Noop\x10\x00\x12\x0e\n" +
	"\n" +
	"Kubernetes\x10\x01B\x10\n" +
	"\x0e_imageResolver\"o\n" +
	"\x10RateLimitingSpec\x12#\n" +
	"\x04rate\x18\x01 \x01(\x01B\n" +
	"\x8a\xc0\f\x06\n" +
	"\x0410.0H\x00R\x04rate\x88\x01\x01\x12#\n" +
	"\x05burst\x18\x02 \x01(\x05B\b\x8a\xc0\f\x04\n" +
	"\x0250H\x01R\x05burst\x88\x01\x01B\a\n" +
	"\x05_rateB\b\n" +
	"\x06_burst\"\xec\x01\n" +
	"\bAuthSpec\x12O\n" +
	"\abackend\x18\x01 \x01(\x0e2\x1b.config.v1.AuthSpec.BackendB\x13\xbaH\x05\x82\x01\x02\x10\x01\x8a\xc0\f\a\n" +
	"\x05BasicH\x00R\abackend\x88\x01\x01\x12.\n" +
	"\x05basic\x18\x03 \x01(\v2\x18.config.v1.BasicAuthSpecR\x05basic\x121\n" +
	"\x06openid\x18\x02 \x01(\v2\x19.config.v1.OpenIDAuthSpecR\x06openid\" \n" +
	"\aBackend\x12\t\n" +
	"\x05Basic\x10\x00\x12\n" +
	"\n" +
	"\x06OpenID\x10\x01B\n" +
	"\n" +
	"\b_backend\"\x83\x04\n" +
	"\x0eOpenIDAuthSpec\x122\n" +
	"\x06issuer\x18\x01 \x01(\tB\x15\xbaH\x12\xc8\x01\x01r\r:\bhttps://\x90\x01\x01H\x00R\x06issuer\x88\x01\x01\x12[\n" +
	"\n" +
	"caCertData\x18\x02 \x01(\tB6\xbaH3\xba\x010\n" +
	"\x1aopenid_issuer_ca_cert_data\x1a\x12this.x509IsValid()H\x01R\n" +
	"caCertData\x88\x01\x01\x12'\n" +
	"\bclientId\x18\x03 \x01(\tB\x06\xbaH\x03\xc8\x01\x01H\x02R\bclientId\x88\x01\x01\x125\n" +
	"\fclientSecret\x18\x04 \x01(\tB\f\xbaH\x03\xc8\x01\x01\x8a\xc0\f\x02\x18\x01H\x03R\fclientSecret\x88\x01\x01\x12@\n" +
	"\x10identifyingClaim\x18\x05 \x01(\tB\x0f\xbaH\x03\xc8\x01\x01\x8a\xc0\f\x05\n" +
	"\x03subH\x04R\x10identifyingClaim\x88\x01\x01\x12q\n" +
	"\x06scopes\x18\x06 \x03(\tBY\xbaHV\xba\x01K\n" +
	"\x14require_openid_scope\x12\x1a'openid' scope is required\x1a\x17this.contains('openid')\xc8\x01\x01\x92\x01\x02\x18\x01R\x06scopesB\t\n" +
	"\a_issuerB\r\n" +
	"\v_caCertDataB\v\n" +
	"\t_clientIdB\x0f\n" +
	"\r_clientSecretB\x13\n" +
	"\x11_identifyingClaim\"\x0f\n" +
	"\rBasicAuthSpec*)\n" +
	"\x0eStorageBackend\x12\b\n" +
	"\x04Etcd\x10\x00\x12\r\n" +
	"\tJetStream\x10\x01*#\n" +
	"\vPatchEngine\x12\n" +
	"\n" +
	"\x06Bsdiff\x10\x00\x12\b\n" +
	"\x04Zstd\x10\x01*\x1e\n" +
	"\fCacheBackend\x12\x0e\n" +
	"\n" +
	"Filesystem\x10\x00B<\x82\xc0\f\x04\b\x01\x18\x01Z2github.com/aity-cloud/monty/pkg/config/v1;configv1b\x06proto3"

var (
	file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_rawDescOnce sync.Once
	file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_rawDescData []byte
)

func file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_rawDescGZIP() []byte {
	file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_rawDescOnce.Do(func() {
		file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_rawDesc), len(file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_rawDesc)))
	})
	return file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_rawDescData
}

var file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_goTypes = []any{
	(StorageBackend)(0), // 0: config.v1.StorageBackend
	(PatchEngine)(0),    // 1: config.v1.PatchEngine
	(CacheBackend)(0),   // 2: config.v1.CacheBackend
	(KubernetesAgentUpgradeSpec_ImageResolver)(0), // 3: config.v1.KubernetesAgentUpgradeSpec.ImageResolver
	(AuthSpec_Backend)(0),                         // 4: config.v1.AuthSpec.Backend
	(*GatewayConfigSpec)(nil),                     // 5: config.v1.GatewayConfigSpec
	(*ServerSpec)(nil),                            // 6: config.v1.ServerSpec
	(*ManagementServerSpec)(nil),                  // 7: config.v1.ManagementServerSpec
	(*RelayServerSpec)(nil),                       // 8: config.v1.RelayServerSpec
	(*HealthServerSpec)(nil),                      // 9: config.v1.HealthServerSpec
	(*DashboardServerSpec)(nil),                   // 10: config.v1.DashboardServerSpec
	(*StorageSpec)(nil),                           // 11: config.v1.StorageSpec
	(*EtcdSpec)(nil),                              // 12: config.v1.EtcdSpec
	(*MTLSSpec)(nil),                              // 13: config.v1.MTLSSpec
	(*JetStreamSpec)(nil),                         // 14: config.v1.JetStreamSpec
	(*CertsSpec)(nil),                             // 15: config.v1.CertsSpec
	(*PluginsSpec)(nil),                           // 16: config.v1.PluginsSpec
	(*PluginFilters)(nil),                         // 17: config.v1.PluginFilters
	(*CacheSpec)(nil),                             // 18: config.v1.CacheSpec
	(*FilesystemCacheSpec)(nil),                   // 19: config.v1.FilesystemCacheSpec
	(*KeyringSpec)(nil),                           // 20: config.v1.KeyringSpec
	(*UpgradesSpec)(nil),                          // 21: config.v1.UpgradesSpec
	(*AgentUpgradesSpec)(nil),                     // 22: config.v1.AgentUpgradesSpec
	(*PluginUpgradesSpec)(nil),                    // 23: config.v1.PluginUpgradesSpec
	(*BinaryPluginUpgradeSpec)(nil),               // 24: config.v1.BinaryPluginUpgradeSpec
	(*KubernetesAgentUpgradeSpec)(nil),            // 25: config.v1.KubernetesAgentUpgradeSpec
	(*RateLimitingSpec)(nil),                      // 26: config.v1.RateLimitingSpec
	(*AuthSpec)(nil),                              // 27: config.v1.AuthSpec
	(*OpenIDAuthSpec)(nil),                        // 28: config.v1.OpenIDAuthSpec
	(*BasicAuthSpec)(nil),                         // 29: config.v1.BasicAuthSpec
	(*v1.Revision)(nil),                           // 30: core.Revision
}
var file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_depIdxs = []int32{
	30, // 0: config.v1.GatewayConfigSpec.revision:type_name -> core.Revision
	6,  // 1: config.v1.GatewayConfigSpec.server:type_name -> config.v1.ServerSpec
	7,  // 2: config.v1.GatewayConfigSpec.management:type_name -> config.v1.ManagementServerSpec
	8,  // 3: config.v1.GatewayConfigSpec.relay:type_name -> config.v1.RelayServerSpec
	9,  // 4: config.v1.GatewayConfigSpec.health:type_name -> config.v1.HealthServerSpec
	10, // 5: config.v1.GatewayConfigSpec.dashboard:type_name -> config.v1.DashboardServerSpec
	11, // 6: config.v1.GatewayConfigSpec.storage:type_name -> config.v1.StorageSpec
	15, // 7: config.v1.GatewayConfigSpec.certs:type_name -> config.v1.CertsSpec
	16, // 8: config.v1.GatewayConfigSpec.plugins:type_name -> config.v1.PluginsSpec
	20, // 9: config.v1.GatewayConfigSpec.keyring:type_name -> config.v1.KeyringSpec
	21, // 10: config.v1.GatewayConfigSpec.upgrades:type_name -> config.v1.UpgradesSpec
	26, // 11: config.v1.GatewayConfigSpec.rateLimiting:type_name -> config.v1.RateLimitingSpec
	27, // 12: config.v1.GatewayConfigSpec.auth:type_name -> config.v1.AuthSpec
	15, // 13: config.v1.DashboardServerSpec.webCerts:type_name -> config.v1.CertsSpec
	0,  // 14: config.v1.StorageSpec.backend:type_name -> config.v1.StorageBackend
	12, // 15: config.v1.StorageSpec.etcd:type_name -> config.v1.EtcdSpec
	14, // 16: config.v1.StorageSpec.jetStream:type_name -> config.v1.JetStreamSpec
	13, // 17: config.v1.EtcdSpec.certs:type_name -> config.v1.MTLSSpec
	17, // 18: config.v1.PluginsSpec.filters:type_name -> config.v1.PluginFilters
	18, // 19: config.v1.PluginsSpec.cache:type_name -> config.v1.CacheSpec
	2,  // 20: config.v1.CacheSpec.backend:type_name -> config.v1.CacheBackend
	19, // 21: config.v1.CacheSpec.filesystem:type_name -> config.v1.FilesystemCacheSpec
	22, // 22: config.v1.UpgradesSpec.agents:type_name -> config.v1.AgentUpgradesSpec
	23, // 23: config.v1.UpgradesSpec.plugins:type_name -> config.v1.PluginUpgradesSpec
	25, // 24: config.v1.AgentUpgradesSpec.kubernetes:type_name -> config.v1.KubernetesAgentUpgradeSpec
	24, // 25: config.v1.PluginUpgradesSpec.binary:type_name -> config.v1.BinaryPluginUpgradeSpec
	1,  // 26: config.v1.BinaryPluginUpgradeSpec.patchEngine:type_name -> config.v1.PatchEngine
	3,  // 27: config.v1.KubernetesAgentUpgradeSpec.imageResolver:type_name -> config.v1.KubernetesAgentUpgradeSpec.ImageResolver
	4,  // 28: config.v1.AuthSpec.backend:type_name -> config.v1.AuthSpec.Backend
	29, // 29: config.v1.AuthSpec.basic:type_name -> config.v1.BasicAuthSpec
	28, // 30: config.v1.AuthSpec.openid:type_name -> config.v1.OpenIDAuthSpec
	31, // [31:31] is the sub-list for method output_type
	31, // [31:31] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_init() }
func file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_init() {
	if File_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto != nil {
		return
	}
	file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[1].OneofWrappers = []any{}
	file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[2].OneofWrappers = []any{}
	file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[3].OneofWrappers = []any{}
	file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[4].OneofWrappers = []any{}
	file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[5].OneofWrappers = []any{}
	file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[6].OneofWrappers = []any{}
	file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[8].OneofWrappers = []any{}
	file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[9].OneofWrappers = []any{}
	file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[10].OneofWrappers = []any{}
	file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[11].OneofWrappers = []any{}
	file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[13].OneofWrappers = []any{}
	file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[14].OneofWrappers = []any{}
	file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[16].OneofWrappers = []any{}
	file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[19].OneofWrappers = []any{}
	file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[20].OneofWrappers = []any{}
	file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[21].OneofWrappers = []any{}
	file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[22].OneofWrappers = []any{}
	file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes[23].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_rawDesc), len(file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_rawDesc)),
			NumEnums:      5,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_goTypes,
		DependencyIndexes: file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_depIdxs,
		EnumInfos:         file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_enumTypes,
		MessageInfos:      file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_msgTypes,
	}.Build()
	File_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto = out.File
	file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_goTypes = nil
	file_github_com_aity_cloud_monty_pkg_config_v1_gateway_config_proto_depIdxs = nil
}
