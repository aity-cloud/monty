// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: github.com/rancher/opni/pkg/plugins/driverutil/types.proto

package driverutil

import (
	_ "github.com/kralicky/codegen/cli"
	v1 "github.com/rancher/opni/pkg/apis/core/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Target int32

const (
	Target_ActiveConfiguration  Target = 0
	Target_DefaultConfiguration Target = 1
)

// Enum value maps for Target.
var (
	Target_name = map[int32]string{
		0: "ActiveConfiguration",
		1: "DefaultConfiguration",
	}
	Target_value = map[string]int32{
		"ActiveConfiguration":  0,
		"DefaultConfiguration": 1,
	}
)

func (x Target) Enum() *Target {
	p := new(Target)
	*p = x
	return p
}

func (x Target) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Target) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_rancher_opni_pkg_plugins_driverutil_types_proto_enumTypes[0].Descriptor()
}

func (Target) Type() protoreflect.EnumType {
	return &file_github_com_rancher_opni_pkg_plugins_driverutil_types_proto_enumTypes[0]
}

func (x Target) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Target.Descriptor instead.
func (Target) EnumDescriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_plugins_driverutil_types_proto_rawDescGZIP(), []int{0}
}

type Action int32

const (
	Action_NoAction Action = 0
	Action_Set      Action = 1
	Action_Reset    Action = 2
)

// Enum value maps for Action.
var (
	Action_name = map[int32]string{
		0: "NoAction",
		1: "Set",
		2: "Reset",
	}
	Action_value = map[string]int32{
		"NoAction": 0,
		"Set":      1,
		"Reset":    2,
	}
)

func (x Action) Enum() *Action {
	p := new(Action)
	*p = x
	return p
}

func (x Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_rancher_opni_pkg_plugins_driverutil_types_proto_enumTypes[1].Descriptor()
}

func (Action) Type() protoreflect.EnumType {
	return &file_github_com_rancher_opni_pkg_plugins_driverutil_types_proto_enumTypes[1]
}

func (x Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action.Descriptor instead.
func (Action) EnumDescriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_plugins_driverutil_types_proto_rawDescGZIP(), []int{1}
}

type InstallState int32

const (
	InstallState_NotInstalled InstallState = 0
	InstallState_Installed    InstallState = 1
	InstallState_Uninstalling InstallState = 2
)

// Enum value maps for InstallState.
var (
	InstallState_name = map[int32]string{
		0: "NotInstalled",
		1: "Installed",
		2: "Uninstalling",
	}
	InstallState_value = map[string]int32{
		"NotInstalled": 0,
		"Installed":    1,
		"Uninstalling": 2,
	}
)

func (x InstallState) Enum() *InstallState {
	p := new(InstallState)
	*p = x
	return p
}

func (x InstallState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstallState) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_rancher_opni_pkg_plugins_driverutil_types_proto_enumTypes[2].Descriptor()
}

func (InstallState) Type() protoreflect.EnumType {
	return &file_github_com_rancher_opni_pkg_plugins_driverutil_types_proto_enumTypes[2]
}

func (x InstallState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstallState.Descriptor instead.
func (InstallState) EnumDescriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_plugins_driverutil_types_proto_rawDescGZIP(), []int{2}
}

type ConfigurationState int32

const (
	ConfigurationState_NotConfigured ConfigurationState = 0
	ConfigurationState_Configured    ConfigurationState = 1
)

// Enum value maps for ConfigurationState.
var (
	ConfigurationState_name = map[int32]string{
		0: "NotConfigured",
		1: "Configured",
	}
	ConfigurationState_value = map[string]int32{
		"NotConfigured": 0,
		"Configured":    1,
	}
)

func (x ConfigurationState) Enum() *ConfigurationState {
	p := new(ConfigurationState)
	*p = x
	return p
}

func (x ConfigurationState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigurationState) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_rancher_opni_pkg_plugins_driverutil_types_proto_enumTypes[3].Descriptor()
}

func (ConfigurationState) Type() protoreflect.EnumType {
	return &file_github_com_rancher_opni_pkg_plugins_driverutil_types_proto_enumTypes[3]
}

func (x ConfigurationState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigurationState.Descriptor instead.
func (ConfigurationState) EnumDescriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_plugins_driverutil_types_proto_rawDescGZIP(), []int{3}
}

type ApplicationState int32

const (
	ApplicationState_NotRunning ApplicationState = 0
	ApplicationState_Pending    ApplicationState = 1
	ApplicationState_Running    ApplicationState = 2
	ApplicationState_Failed     ApplicationState = 3
)

// Enum value maps for ApplicationState.
var (
	ApplicationState_name = map[int32]string{
		0: "NotRunning",
		1: "Pending",
		2: "Running",
		3: "Failed",
	}
	ApplicationState_value = map[string]int32{
		"NotRunning": 0,
		"Pending":    1,
		"Running":    2,
		"Failed":     3,
	}
)

func (x ApplicationState) Enum() *ApplicationState {
	p := new(ApplicationState)
	*p = x
	return p
}

func (x ApplicationState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApplicationState) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_rancher_opni_pkg_plugins_driverutil_types_proto_enumTypes[4].Descriptor()
}

func (ApplicationState) Type() protoreflect.EnumType {
	return &file_github_com_rancher_opni_pkg_plugins_driverutil_types_proto_enumTypes[4]
}

func (x ApplicationState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ApplicationState.Descriptor instead.
func (ApplicationState) EnumDescriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_plugins_driverutil_types_proto_rawDescGZIP(), []int{4}
}

// Get request options. See also: [pkg/storage.GetOptions]
type GetRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If set, will return the config at the specified revision instead of
	// the current config.
	// This revision value can be obtained from the revision field of a
	// typed GetConfiguration/GetDefaultConfiguration response, or from one of
	// the history entries in a typed ConfigurationHistory response.
	Revision      *v1.Revision `protobuf:"bytes,1,opt,name=revision,proto3" json:"revision,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	mi := &file_github_com_rancher_opni_pkg_plugins_driverutil_types_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_plugins_driverutil_types_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_plugins_driverutil_types_proto_rawDescGZIP(), []int{0}
}

func (x *GetRequest) GetRevision() *v1.Revision {
	if x != nil {
		return x.Revision
	}
	return nil
}

// History request options. See also: [pkg/storage.HistoryOptions]
type ConfigurationHistoryRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The configuration type to return history for.
	Target Target `protobuf:"varint,1,opt,name=target,proto3,enum=driverutil.Target" json:"target,omitempty"`
	// The latest modification revision to include in the returned history.
	Revision *v1.Revision `protobuf:"bytes,2,opt,name=revision,proto3" json:"revision,omitempty"`
	// If set, will include the values of the configuration in the response.
	// Otherwise, only the revision field of each entry will be populated.
	IncludeValues bool `protobuf:"varint,3,opt,name=includeValues,proto3" json:"includeValues,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigurationHistoryRequest) Reset() {
	*x = ConfigurationHistoryRequest{}
	mi := &file_github_com_rancher_opni_pkg_plugins_driverutil_types_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigurationHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationHistoryRequest) ProtoMessage() {}

func (x *ConfigurationHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_plugins_driverutil_types_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationHistoryRequest.ProtoReflect.Descriptor instead.
func (*ConfigurationHistoryRequest) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_plugins_driverutil_types_proto_rawDescGZIP(), []int{1}
}

func (x *ConfigurationHistoryRequest) GetTarget() Target {
	if x != nil {
		return x.Target
	}
	return Target_ActiveConfiguration
}

func (x *ConfigurationHistoryRequest) GetRevision() *v1.Revision {
	if x != nil {
		return x.Revision
	}
	return nil
}

func (x *ConfigurationHistoryRequest) GetIncludeValues() bool {
	if x != nil {
		return x.IncludeValues
	}
	return false
}

type InstallStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ConfigState   ConfigurationState     `protobuf:"varint,1,opt,name=configState,proto3,enum=driverutil.ConfigurationState" json:"configState,omitempty"`
	InstallState  InstallState           `protobuf:"varint,2,opt,name=installState,proto3,enum=driverutil.InstallState" json:"installState,omitempty"`
	AppState      ApplicationState       `protobuf:"varint,3,opt,name=appState,proto3,enum=driverutil.ApplicationState" json:"appState,omitempty"`
	Warnings      []string               `protobuf:"bytes,4,rep,name=warnings,proto3" json:"warnings,omitempty"`
	Version       string                 `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InstallStatus) Reset() {
	*x = InstallStatus{}
	mi := &file_github_com_rancher_opni_pkg_plugins_driverutil_types_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstallStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallStatus) ProtoMessage() {}

func (x *InstallStatus) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_plugins_driverutil_types_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallStatus.ProtoReflect.Descriptor instead.
func (*InstallStatus) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_plugins_driverutil_types_proto_rawDescGZIP(), []int{2}
}

func (x *InstallStatus) GetConfigState() ConfigurationState {
	if x != nil {
		return x.ConfigState
	}
	return ConfigurationState_NotConfigured
}

func (x *InstallStatus) GetInstallState() InstallState {
	if x != nil {
		return x.InstallState
	}
	return InstallState_NotInstalled
}

func (x *InstallStatus) GetAppState() ApplicationState {
	if x != nil {
		return x.AppState
	}
	return ApplicationState_NotRunning
}

func (x *InstallStatus) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

func (x *InstallStatus) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *InstallStatus) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type PresetMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A display name for the preset.
	DisplayName string `protobuf:"bytes,1,opt,name=displayName,proto3" json:"displayName,omitempty"`
	// Longer description of the preset.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Optional list of messages that should be displayed to the user when the
	// preset is used (determined at the client's discretion).
	// For example, this may contain additional information about requirements
	// or next steps that the user should be aware of.
	Notes         []string `protobuf:"bytes,3,rep,name=notes,proto3" json:"notes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PresetMetadata) Reset() {
	*x = PresetMetadata{}
	mi := &file_github_com_rancher_opni_pkg_plugins_driverutil_types_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PresetMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresetMetadata) ProtoMessage() {}

func (x *PresetMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_plugins_driverutil_types_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresetMetadata.ProtoReflect.Descriptor instead.
func (*PresetMetadata) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_plugins_driverutil_types_proto_rawDescGZIP(), []int{3}
}

func (x *PresetMetadata) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *PresetMetadata) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PresetMetadata) GetNotes() []string {
	if x != nil {
		return x.Notes
	}
	return nil
}

var File_github_com_rancher_opni_pkg_plugins_driverutil_types_proto protoreflect.FileDescriptor

const file_github_com_rancher_opni_pkg_plugins_driverutil_types_proto_rawDesc = "" +
	"\n" +
	":github.com/rancher/opni/pkg/plugins/driverutil/types.proto\x12\n" +
	"driverutil\x1a)github.com/kralicky/codegen/cli/cli.proto\x1a3github.com/rancher/opni/pkg/apis/core/v1/core.proto\"@\n" +
	"\n" +
	"GetRequest\x122\n" +
	"\brevision\x18\x01 \x01(\v2\x0e.core.RevisionB\x06\x92\xc0\f\x02\x10\x01R\brevision\"\xaf\x01\n" +
	"\x1bConfigurationHistoryRequest\x12*\n" +
	"\x06target\x18\x01 \x01(\x0e2\x12.driverutil.TargetR\x06target\x122\n" +
	"\brevision\x18\x02 \x01(\v2\x0e.core.RevisionB\x06\x92\xc0\f\x02\x10\x01R\brevision\x120\n" +
	"\rincludeValues\x18\x03 \x01(\bB\n" +
	"\x8a\xc0\f\x06\n" +
	"\x04trueR\rincludeValues\"\x81\x03\n" +
	"\rInstallStatus\x12@\n" +
	"\vconfigState\x18\x01 \x01(\x0e2\x1e.driverutil.ConfigurationStateR\vconfigState\x12<\n" +
	"\finstallState\x18\x02 \x01(\x0e2\x18.driverutil.InstallStateR\finstallState\x128\n" +
	"\bappState\x18\x03 \x01(\x0e2\x1c.driverutil.ApplicationStateR\bappState\x12\x1a\n" +
	"\bwarnings\x18\x04 \x03(\tR\bwarnings\x12\x18\n" +
	"\aversion\x18\x05 \x01(\tR\aversion\x12C\n" +
	"\bmetadata\x18\x06 \x03(\v2'.driverutil.InstallStatus.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"j\n" +
	"\x0ePresetMetadata\x12 \n" +
	"\vdisplayName\x18\x01 \x01(\tR\vdisplayName\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12\x14\n" +
	"\x05notes\x18\x03 \x03(\tR\x05notes*;\n" +
	"\x06Target\x12\x17\n" +
	"\x13ActiveConfiguration\x10\x00\x12\x18\n" +
	"\x14DefaultConfiguration\x10\x01**\n" +
	"\x06Action\x12\f\n" +
	"\bNoAction\x10\x00\x12\a\n" +
	"\x03Set\x10\x01\x12\t\n" +
	"\x05Reset\x10\x02*A\n" +
	"\fInstallState\x12\x10\n" +
	"\fNotInstalled\x10\x00\x12\r\n" +
	"\tInstalled\x10\x01\x12\x10\n" +
	"\fUninstalling\x10\x02*7\n" +
	"\x12ConfigurationState\x12\x11\n" +
	"\rNotConfigured\x10\x00\x12\x0e\n" +
	"\n" +
	"Configured\x10\x01*H\n" +
	"\x10ApplicationState\x12\x0e\n" +
	"\n" +
	"NotRunning\x10\x00\x12\v\n" +
	"\aPending\x10\x01\x12\v\n" +
	"\aRunning\x10\x02\x12\n" +
	"\n" +
	"\x06Failed\x10\x03B6\x82\xc0\f\x02\b\x01Z.github.com/rancher/opni/pkg/plugins/driverutilb\x06proto3"

var (
	file_github_com_rancher_opni_pkg_plugins_driverutil_types_proto_rawDescOnce sync.Once
	file_github_com_rancher_opni_pkg_plugins_driverutil_types_proto_rawDescData []byte
)

func file_github_com_rancher_opni_pkg_plugins_driverutil_types_proto_rawDescGZIP() []byte {
	file_github_com_rancher_opni_pkg_plugins_driverutil_types_proto_rawDescOnce.Do(func() {
		file_github_com_rancher_opni_pkg_plugins_driverutil_types_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_github_com_rancher_opni_pkg_plugins_driverutil_types_proto_rawDesc), len(file_github_com_rancher_opni_pkg_plugins_driverutil_types_proto_rawDesc)))
	})
	return file_github_com_rancher_opni_pkg_plugins_driverutil_types_proto_rawDescData
}

var file_github_com_rancher_opni_pkg_plugins_driverutil_types_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_github_com_rancher_opni_pkg_plugins_driverutil_types_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_github_com_rancher_opni_pkg_plugins_driverutil_types_proto_goTypes = []any{
	(Target)(0),                         // 0: driverutil.Target
	(Action)(0),                         // 1: driverutil.Action
	(InstallState)(0),                   // 2: driverutil.InstallState
	(ConfigurationState)(0),             // 3: driverutil.ConfigurationState
	(ApplicationState)(0),               // 4: driverutil.ApplicationState
	(*GetRequest)(nil),                  // 5: driverutil.GetRequest
	(*ConfigurationHistoryRequest)(nil), // 6: driverutil.ConfigurationHistoryRequest
	(*InstallStatus)(nil),               // 7: driverutil.InstallStatus
	(*PresetMetadata)(nil),              // 8: driverutil.PresetMetadata
	nil,                                 // 9: driverutil.InstallStatus.MetadataEntry
	(*v1.Revision)(nil),                 // 10: core.Revision
}
var file_github_com_rancher_opni_pkg_plugins_driverutil_types_proto_depIdxs = []int32{
	10, // 0: driverutil.GetRequest.revision:type_name -> core.Revision
	0,  // 1: driverutil.ConfigurationHistoryRequest.target:type_name -> driverutil.Target
	10, // 2: driverutil.ConfigurationHistoryRequest.revision:type_name -> core.Revision
	3,  // 3: driverutil.InstallStatus.configState:type_name -> driverutil.ConfigurationState
	2,  // 4: driverutil.InstallStatus.installState:type_name -> driverutil.InstallState
	4,  // 5: driverutil.InstallStatus.appState:type_name -> driverutil.ApplicationState
	9,  // 6: driverutil.InstallStatus.metadata:type_name -> driverutil.InstallStatus.MetadataEntry
	7,  // [7:7] is the sub-list for method output_type
	7,  // [7:7] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_github_com_rancher_opni_pkg_plugins_driverutil_types_proto_init() }
func file_github_com_rancher_opni_pkg_plugins_driverutil_types_proto_init() {
	if File_github_com_rancher_opni_pkg_plugins_driverutil_types_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_github_com_rancher_opni_pkg_plugins_driverutil_types_proto_rawDesc), len(file_github_com_rancher_opni_pkg_plugins_driverutil_types_proto_rawDesc)),
			NumEnums:      5,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_rancher_opni_pkg_plugins_driverutil_types_proto_goTypes,
		DependencyIndexes: file_github_com_rancher_opni_pkg_plugins_driverutil_types_proto_depIdxs,
		EnumInfos:         file_github_com_rancher_opni_pkg_plugins_driverutil_types_proto_enumTypes,
		MessageInfos:      file_github_com_rancher_opni_pkg_plugins_driverutil_types_proto_msgTypes,
	}.Build()
	File_github_com_rancher_opni_pkg_plugins_driverutil_types_proto = out.File
	file_github_com_rancher_opni_pkg_plugins_driverutil_types_proto_goTypes = nil
	file_github_com_rancher_opni_pkg_plugins_driverutil_types_proto_depIdxs = nil
}
