// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: github.com/aity-cloud/monty/pkg/apis/control/v1/remote.proto

package v1

import (
	context "context"
	v1 "github.com/aity-cloud/monty/pkg/apis/core/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Health_GetHealth_FullMethodName = "/control.Health/GetHealth"
)

// HealthClient is the client API for Health service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HealthClient interface {
	GetHealth(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.Health, error)
}

type healthClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthClient(cc grpc.ClientConnInterface) HealthClient {
	return &healthClient{cc}
}

func (c *healthClient) GetHealth(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.Health, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.Health)
	err := c.cc.Invoke(ctx, Health_GetHealth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthServer is the server API for Health service.
// All implementations should embed UnimplementedHealthServer
// for forward compatibility.
type HealthServer interface {
	GetHealth(context.Context, *emptypb.Empty) (*v1.Health, error)
}

// UnimplementedHealthServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHealthServer struct{}

func (UnimplementedHealthServer) GetHealth(context.Context, *emptypb.Empty) (*v1.Health, error) {
	return nil, status.Error(codes.Unimplemented, "method GetHealth not implemented")
}
func (UnimplementedHealthServer) testEmbeddedByValue() {}

// UnsafeHealthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthServer will
// result in compilation errors.
type UnsafeHealthServer interface {
	mustEmbedUnimplementedHealthServer()
}

func RegisterHealthServer(s grpc.ServiceRegistrar, srv HealthServer) {
	// If the following call panics, it indicates UnimplementedHealthServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Health_ServiceDesc, srv)
}

func _Health_GetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServer).GetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Health_GetHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServer).GetHealth(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Health_ServiceDesc is the grpc.ServiceDesc for Health service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Health_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "control.Health",
	HandlerType: (*HealthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHealth",
			Handler:    _Health_GetHealth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/aity-cloud/monty/pkg/apis/control/v1/remote.proto",
}

const (
	HealthListener_UpdateHealth_FullMethodName = "/control.HealthListener/UpdateHealth"
)

// HealthListenerClient is the client API for HealthListener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HealthListenerClient interface {
	UpdateHealth(ctx context.Context, in *v1.Health, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type healthListenerClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthListenerClient(cc grpc.ClientConnInterface) HealthListenerClient {
	return &healthListenerClient{cc}
}

func (c *healthListenerClient) UpdateHealth(ctx context.Context, in *v1.Health, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HealthListener_UpdateHealth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthListenerServer is the server API for HealthListener service.
// All implementations should embed UnimplementedHealthListenerServer
// for forward compatibility.
type HealthListenerServer interface {
	UpdateHealth(context.Context, *v1.Health) (*emptypb.Empty, error)
}

// UnimplementedHealthListenerServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHealthListenerServer struct{}

func (UnimplementedHealthListenerServer) UpdateHealth(context.Context, *v1.Health) (*emptypb.Empty, error) {
	return nil, status.Error(codes.Unimplemented, "method UpdateHealth not implemented")
}
func (UnimplementedHealthListenerServer) testEmbeddedByValue() {}

// UnsafeHealthListenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthListenerServer will
// result in compilation errors.
type UnsafeHealthListenerServer interface {
	mustEmbedUnimplementedHealthListenerServer()
}

func RegisterHealthListenerServer(s grpc.ServiceRegistrar, srv HealthListenerServer) {
	// If the following call panics, it indicates UnimplementedHealthListenerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HealthListener_ServiceDesc, srv)
}

func _HealthListener_UpdateHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Health)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthListenerServer).UpdateHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthListener_UpdateHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthListenerServer).UpdateHealth(ctx, req.(*v1.Health))
	}
	return interceptor(ctx, in, info, handler)
}

// HealthListener_ServiceDesc is the grpc.ServiceDesc for HealthListener service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HealthListener_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "control.HealthListener",
	HandlerType: (*HealthListenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateHealth",
			Handler:    _HealthListener_UpdateHealth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/aity-cloud/monty/pkg/apis/control/v1/remote.proto",
}

const (
	UpdateSync_SyncManifest_FullMethodName = "/control.UpdateSync/SyncManifest"
)

// UpdateSyncClient is the client API for UpdateSync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UpdateSyncClient interface {
	SyncManifest(ctx context.Context, in *UpdateManifest, opts ...grpc.CallOption) (*SyncResults, error)
}

type updateSyncClient struct {
	cc grpc.ClientConnInterface
}

func NewUpdateSyncClient(cc grpc.ClientConnInterface) UpdateSyncClient {
	return &updateSyncClient{cc}
}

func (c *updateSyncClient) SyncManifest(ctx context.Context, in *UpdateManifest, opts ...grpc.CallOption) (*SyncResults, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncResults)
	err := c.cc.Invoke(ctx, UpdateSync_SyncManifest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpdateSyncServer is the server API for UpdateSync service.
// All implementations should embed UnimplementedUpdateSyncServer
// for forward compatibility.
type UpdateSyncServer interface {
	SyncManifest(context.Context, *UpdateManifest) (*SyncResults, error)
}

// UnimplementedUpdateSyncServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUpdateSyncServer struct{}

func (UnimplementedUpdateSyncServer) SyncManifest(context.Context, *UpdateManifest) (*SyncResults, error) {
	return nil, status.Error(codes.Unimplemented, "method SyncManifest not implemented")
}
func (UnimplementedUpdateSyncServer) testEmbeddedByValue() {}

// UnsafeUpdateSyncServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpdateSyncServer will
// result in compilation errors.
type UnsafeUpdateSyncServer interface {
	mustEmbedUnimplementedUpdateSyncServer()
}

func RegisterUpdateSyncServer(s grpc.ServiceRegistrar, srv UpdateSyncServer) {
	// If the following call panics, it indicates UnimplementedUpdateSyncServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UpdateSync_ServiceDesc, srv)
}

func _UpdateSync_SyncManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateManifest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateSyncServer).SyncManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UpdateSync_SyncManifest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateSyncServer).SyncManifest(ctx, req.(*UpdateManifest))
	}
	return interceptor(ctx, in, info, handler)
}

// UpdateSync_ServiceDesc is the grpc.ServiceDesc for UpdateSync service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UpdateSync_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "control.UpdateSync",
	HandlerType: (*UpdateSyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncManifest",
			Handler:    _UpdateSync_SyncManifest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/aity-cloud/monty/pkg/apis/control/v1/remote.proto",
}
