// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: github.com/aity-cloud/monty/pkg/apis/management/v1/management.proto

package v1

import (
	context "context"
	v11 "github.com/aity-cloud/monty/pkg/apis/capability/v1"
	v1 "github.com/aity-cloud/monty/pkg/apis/core/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LocalPassword_CreateLocalPassword_FullMethodName = "/management.LocalPassword/CreateLocalPassword"
)

// LocalPasswordClient is the client API for LocalPassword service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocalPasswordClient interface {
	CreateLocalPassword(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LocalPasswordResponse, error)
}

type localPasswordClient struct {
	cc grpc.ClientConnInterface
}

func NewLocalPasswordClient(cc grpc.ClientConnInterface) LocalPasswordClient {
	return &localPasswordClient{cc}
}

func (c *localPasswordClient) CreateLocalPassword(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LocalPasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LocalPasswordResponse)
	err := c.cc.Invoke(ctx, LocalPassword_CreateLocalPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocalPasswordServer is the server API for LocalPassword service.
// All implementations should embed UnimplementedLocalPasswordServer
// for forward compatibility.
type LocalPasswordServer interface {
	CreateLocalPassword(context.Context, *emptypb.Empty) (*LocalPasswordResponse, error)
}

// UnimplementedLocalPasswordServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLocalPasswordServer struct{}

func (UnimplementedLocalPasswordServer) CreateLocalPassword(context.Context, *emptypb.Empty) (*LocalPasswordResponse, error) {
	return nil, status.Error(codes.Unimplemented, "method CreateLocalPassword not implemented")
}
func (UnimplementedLocalPasswordServer) testEmbeddedByValue() {}

// UnsafeLocalPasswordServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocalPasswordServer will
// result in compilation errors.
type UnsafeLocalPasswordServer interface {
	mustEmbedUnimplementedLocalPasswordServer()
}

func RegisterLocalPasswordServer(s grpc.ServiceRegistrar, srv LocalPasswordServer) {
	// If the following call panics, it indicates UnimplementedLocalPasswordServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LocalPassword_ServiceDesc, srv)
}

func _LocalPassword_CreateLocalPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalPasswordServer).CreateLocalPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalPassword_CreateLocalPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalPasswordServer).CreateLocalPassword(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// LocalPassword_ServiceDesc is the grpc.ServiceDesc for LocalPassword service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LocalPassword_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "management.LocalPassword",
	HandlerType: (*LocalPasswordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLocalPassword",
			Handler:    _LocalPassword_CreateLocalPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/aity-cloud/monty/pkg/apis/management/v1/management.proto",
}

const (
	Management_CreateBootstrapToken_FullMethodName           = "/management.Management/CreateBootstrapToken"
	Management_RevokeBootstrapToken_FullMethodName           = "/management.Management/RevokeBootstrapToken"
	Management_ListBootstrapTokens_FullMethodName            = "/management.Management/ListBootstrapTokens"
	Management_GetBootstrapToken_FullMethodName              = "/management.Management/GetBootstrapToken"
	Management_ListClusters_FullMethodName                   = "/management.Management/ListClusters"
	Management_WatchClusters_FullMethodName                  = "/management.Management/WatchClusters"
	Management_DeleteCluster_FullMethodName                  = "/management.Management/DeleteCluster"
	Management_CertsInfo_FullMethodName                      = "/management.Management/CertsInfo"
	Management_GetCluster_FullMethodName                     = "/management.Management/GetCluster"
	Management_GetClusterHealthStatus_FullMethodName         = "/management.Management/GetClusterHealthStatus"
	Management_WatchClusterHealthStatus_FullMethodName       = "/management.Management/WatchClusterHealthStatus"
	Management_EditCluster_FullMethodName                    = "/management.Management/EditCluster"
	Management_ListRBACBackends_FullMethodName               = "/management.Management/ListRBACBackends"
	Management_GetAvailableBackendPermissions_FullMethodName = "/management.Management/GetAvailableBackendPermissions"
	Management_CreateBackendRole_FullMethodName              = "/management.Management/CreateBackendRole"
	Management_UpdateBackendRole_FullMethodName              = "/management.Management/UpdateBackendRole"
	Management_DeleteBackendRole_FullMethodName              = "/management.Management/DeleteBackendRole"
	Management_GetBackendRole_FullMethodName                 = "/management.Management/GetBackendRole"
	Management_ListBackendRoles_FullMethodName               = "/management.Management/ListBackendRoles"
	Management_AddAdminRoleBinding_FullMethodName            = "/management.Management/AddAdminRoleBinding"
	Management_RemoveAdminRoleBinding_FullMethodName         = "/management.Management/RemoveAdminRoleBinding"
	Management_ListAdminRoleBinding_FullMethodName           = "/management.Management/ListAdminRoleBinding"
	Management_CreateRoleBinding_FullMethodName              = "/management.Management/CreateRoleBinding"
	Management_UpdateRoleBinding_FullMethodName              = "/management.Management/UpdateRoleBinding"
	Management_DeleteRoleBinding_FullMethodName              = "/management.Management/DeleteRoleBinding"
	Management_GetRoleBinding_FullMethodName                 = "/management.Management/GetRoleBinding"
	Management_ListRoleBindings_FullMethodName               = "/management.Management/ListRoleBindings"
	Management_APIExtensions_FullMethodName                  = "/management.Management/APIExtensions"
	Management_ListCapabilities_FullMethodName               = "/management.Management/ListCapabilities"
	Management_InstallCapability_FullMethodName              = "/management.Management/InstallCapability"
	Management_UninstallCapability_FullMethodName            = "/management.Management/UninstallCapability"
	Management_CapabilityStatus_FullMethodName               = "/management.Management/CapabilityStatus"
	Management_CapabilityUninstallStatus_FullMethodName      = "/management.Management/CapabilityUninstallStatus"
	Management_CancelCapabilityUninstall_FullMethodName      = "/management.Management/CancelCapabilityUninstall"
	Management_GetDashboardSettings_FullMethodName           = "/management.Management/GetDashboardSettings"
	Management_UpdateDashboardSettings_FullMethodName        = "/management.Management/UpdateDashboardSettings"
)

// ManagementClient is the client API for Management service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagementClient interface {
	CreateBootstrapToken(ctx context.Context, in *CreateBootstrapTokenRequest, opts ...grpc.CallOption) (*v1.BootstrapToken, error)
	RevokeBootstrapToken(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListBootstrapTokens(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.BootstrapTokenList, error)
	GetBootstrapToken(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*v1.BootstrapToken, error)
	ListClusters(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (*v1.ClusterList, error)
	WatchClusters(ctx context.Context, in *WatchClustersRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WatchEvent], error)
	DeleteCluster(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CertsInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CertsInfoResponse, error)
	GetCluster(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*v1.Cluster, error)
	GetClusterHealthStatus(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*v1.HealthStatus, error)
	WatchClusterHealthStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[v1.ClusterHealthStatus], error)
	EditCluster(ctx context.Context, in *EditClusterRequest, opts ...grpc.CallOption) (*v1.Cluster, error)
	ListRBACBackends(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.CapabilityTypeList, error)
	GetAvailableBackendPermissions(ctx context.Context, in *v1.CapabilityType, opts ...grpc.CallOption) (*v1.AvailablePermissions, error)
	CreateBackendRole(ctx context.Context, in *v1.BackendRole, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateBackendRole(ctx context.Context, in *v1.BackendRole, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteBackendRole(ctx context.Context, in *v1.BackendRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetBackendRole(ctx context.Context, in *v1.BackendRoleRequest, opts ...grpc.CallOption) (*v1.Role, error)
	ListBackendRoles(ctx context.Context, in *v1.CapabilityType, opts ...grpc.CallOption) (*v1.RoleList, error)
	AddAdminRoleBinding(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveAdminRoleBinding(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListAdminRoleBinding(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.ReferenceList, error)
	CreateRoleBinding(ctx context.Context, in *v1.RoleBinding, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateRoleBinding(ctx context.Context, in *v1.RoleBinding, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteRoleBinding(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetRoleBinding(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*v1.RoleBinding, error)
	ListRoleBindings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.RoleBindingList, error)
	APIExtensions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*APIExtensionInfoList, error)
	ListCapabilities(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CapabilityList, error)
	InstallCapability(ctx context.Context, in *v11.InstallRequest, opts ...grpc.CallOption) (*v11.InstallResponse, error)
	UninstallCapability(ctx context.Context, in *v11.UninstallRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CapabilityStatus(ctx context.Context, in *v11.StatusRequest, opts ...grpc.CallOption) (*v11.NodeCapabilityStatus, error)
	CapabilityUninstallStatus(ctx context.Context, in *v11.UninstallStatusRequest, opts ...grpc.CallOption) (*v1.TaskStatus, error)
	CancelCapabilityUninstall(ctx context.Context, in *v11.CancelUninstallRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetDashboardSettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DashboardSettings, error)
	UpdateDashboardSettings(ctx context.Context, in *DashboardSettings, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type managementClient struct {
	cc grpc.ClientConnInterface
}

func NewManagementClient(cc grpc.ClientConnInterface) ManagementClient {
	return &managementClient{cc}
}

func (c *managementClient) CreateBootstrapToken(ctx context.Context, in *CreateBootstrapTokenRequest, opts ...grpc.CallOption) (*v1.BootstrapToken, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.BootstrapToken)
	err := c.cc.Invoke(ctx, Management_CreateBootstrapToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) RevokeBootstrapToken(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Management_RevokeBootstrapToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) ListBootstrapTokens(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.BootstrapTokenList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.BootstrapTokenList)
	err := c.cc.Invoke(ctx, Management_ListBootstrapTokens_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) GetBootstrapToken(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*v1.BootstrapToken, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.BootstrapToken)
	err := c.cc.Invoke(ctx, Management_GetBootstrapToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) ListClusters(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (*v1.ClusterList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.ClusterList)
	err := c.cc.Invoke(ctx, Management_ListClusters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) WatchClusters(ctx context.Context, in *WatchClustersRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WatchEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Management_ServiceDesc.Streams[0], Management_WatchClusters_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WatchClustersRequest, WatchEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Management_WatchClustersClient = grpc.ServerStreamingClient[WatchEvent]

func (c *managementClient) DeleteCluster(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Management_DeleteCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) CertsInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CertsInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CertsInfoResponse)
	err := c.cc.Invoke(ctx, Management_CertsInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) GetCluster(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*v1.Cluster, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.Cluster)
	err := c.cc.Invoke(ctx, Management_GetCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) GetClusterHealthStatus(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*v1.HealthStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.HealthStatus)
	err := c.cc.Invoke(ctx, Management_GetClusterHealthStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) WatchClusterHealthStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[v1.ClusterHealthStatus], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Management_ServiceDesc.Streams[1], Management_WatchClusterHealthStatus_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, v1.ClusterHealthStatus]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Management_WatchClusterHealthStatusClient = grpc.ServerStreamingClient[v1.ClusterHealthStatus]

func (c *managementClient) EditCluster(ctx context.Context, in *EditClusterRequest, opts ...grpc.CallOption) (*v1.Cluster, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.Cluster)
	err := c.cc.Invoke(ctx, Management_EditCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) ListRBACBackends(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.CapabilityTypeList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.CapabilityTypeList)
	err := c.cc.Invoke(ctx, Management_ListRBACBackends_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) GetAvailableBackendPermissions(ctx context.Context, in *v1.CapabilityType, opts ...grpc.CallOption) (*v1.AvailablePermissions, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.AvailablePermissions)
	err := c.cc.Invoke(ctx, Management_GetAvailableBackendPermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) CreateBackendRole(ctx context.Context, in *v1.BackendRole, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Management_CreateBackendRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) UpdateBackendRole(ctx context.Context, in *v1.BackendRole, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Management_UpdateBackendRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) DeleteBackendRole(ctx context.Context, in *v1.BackendRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Management_DeleteBackendRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) GetBackendRole(ctx context.Context, in *v1.BackendRoleRequest, opts ...grpc.CallOption) (*v1.Role, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.Role)
	err := c.cc.Invoke(ctx, Management_GetBackendRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) ListBackendRoles(ctx context.Context, in *v1.CapabilityType, opts ...grpc.CallOption) (*v1.RoleList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.RoleList)
	err := c.cc.Invoke(ctx, Management_ListBackendRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) AddAdminRoleBinding(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Management_AddAdminRoleBinding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) RemoveAdminRoleBinding(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Management_RemoveAdminRoleBinding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) ListAdminRoleBinding(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.ReferenceList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.ReferenceList)
	err := c.cc.Invoke(ctx, Management_ListAdminRoleBinding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) CreateRoleBinding(ctx context.Context, in *v1.RoleBinding, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Management_CreateRoleBinding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) UpdateRoleBinding(ctx context.Context, in *v1.RoleBinding, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Management_UpdateRoleBinding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) DeleteRoleBinding(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Management_DeleteRoleBinding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) GetRoleBinding(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*v1.RoleBinding, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.RoleBinding)
	err := c.cc.Invoke(ctx, Management_GetRoleBinding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) ListRoleBindings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.RoleBindingList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.RoleBindingList)
	err := c.cc.Invoke(ctx, Management_ListRoleBindings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) APIExtensions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*APIExtensionInfoList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APIExtensionInfoList)
	err := c.cc.Invoke(ctx, Management_APIExtensions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) ListCapabilities(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CapabilityList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CapabilityList)
	err := c.cc.Invoke(ctx, Management_ListCapabilities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) InstallCapability(ctx context.Context, in *v11.InstallRequest, opts ...grpc.CallOption) (*v11.InstallResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v11.InstallResponse)
	err := c.cc.Invoke(ctx, Management_InstallCapability_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) UninstallCapability(ctx context.Context, in *v11.UninstallRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Management_UninstallCapability_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) CapabilityStatus(ctx context.Context, in *v11.StatusRequest, opts ...grpc.CallOption) (*v11.NodeCapabilityStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v11.NodeCapabilityStatus)
	err := c.cc.Invoke(ctx, Management_CapabilityStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) CapabilityUninstallStatus(ctx context.Context, in *v11.UninstallStatusRequest, opts ...grpc.CallOption) (*v1.TaskStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.TaskStatus)
	err := c.cc.Invoke(ctx, Management_CapabilityUninstallStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) CancelCapabilityUninstall(ctx context.Context, in *v11.CancelUninstallRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Management_CancelCapabilityUninstall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) GetDashboardSettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DashboardSettings, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DashboardSettings)
	err := c.cc.Invoke(ctx, Management_GetDashboardSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) UpdateDashboardSettings(ctx context.Context, in *DashboardSettings, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Management_UpdateDashboardSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagementServer is the server API for Management service.
// All implementations should embed UnimplementedManagementServer
// for forward compatibility.
type ManagementServer interface {
	CreateBootstrapToken(context.Context, *CreateBootstrapTokenRequest) (*v1.BootstrapToken, error)
	RevokeBootstrapToken(context.Context, *v1.Reference) (*emptypb.Empty, error)
	ListBootstrapTokens(context.Context, *emptypb.Empty) (*v1.BootstrapTokenList, error)
	GetBootstrapToken(context.Context, *v1.Reference) (*v1.BootstrapToken, error)
	ListClusters(context.Context, *ListClustersRequest) (*v1.ClusterList, error)
	WatchClusters(*WatchClustersRequest, grpc.ServerStreamingServer[WatchEvent]) error
	DeleteCluster(context.Context, *v1.Reference) (*emptypb.Empty, error)
	CertsInfo(context.Context, *emptypb.Empty) (*CertsInfoResponse, error)
	GetCluster(context.Context, *v1.Reference) (*v1.Cluster, error)
	GetClusterHealthStatus(context.Context, *v1.Reference) (*v1.HealthStatus, error)
	WatchClusterHealthStatus(*emptypb.Empty, grpc.ServerStreamingServer[v1.ClusterHealthStatus]) error
	EditCluster(context.Context, *EditClusterRequest) (*v1.Cluster, error)
	ListRBACBackends(context.Context, *emptypb.Empty) (*v1.CapabilityTypeList, error)
	GetAvailableBackendPermissions(context.Context, *v1.CapabilityType) (*v1.AvailablePermissions, error)
	CreateBackendRole(context.Context, *v1.BackendRole) (*emptypb.Empty, error)
	UpdateBackendRole(context.Context, *v1.BackendRole) (*emptypb.Empty, error)
	DeleteBackendRole(context.Context, *v1.BackendRoleRequest) (*emptypb.Empty, error)
	GetBackendRole(context.Context, *v1.BackendRoleRequest) (*v1.Role, error)
	ListBackendRoles(context.Context, *v1.CapabilityType) (*v1.RoleList, error)
	AddAdminRoleBinding(context.Context, *v1.Reference) (*emptypb.Empty, error)
	RemoveAdminRoleBinding(context.Context, *v1.Reference) (*emptypb.Empty, error)
	ListAdminRoleBinding(context.Context, *emptypb.Empty) (*v1.ReferenceList, error)
	CreateRoleBinding(context.Context, *v1.RoleBinding) (*emptypb.Empty, error)
	UpdateRoleBinding(context.Context, *v1.RoleBinding) (*emptypb.Empty, error)
	DeleteRoleBinding(context.Context, *v1.Reference) (*emptypb.Empty, error)
	GetRoleBinding(context.Context, *v1.Reference) (*v1.RoleBinding, error)
	ListRoleBindings(context.Context, *emptypb.Empty) (*v1.RoleBindingList, error)
	APIExtensions(context.Context, *emptypb.Empty) (*APIExtensionInfoList, error)
	ListCapabilities(context.Context, *emptypb.Empty) (*CapabilityList, error)
	InstallCapability(context.Context, *v11.InstallRequest) (*v11.InstallResponse, error)
	UninstallCapability(context.Context, *v11.UninstallRequest) (*emptypb.Empty, error)
	CapabilityStatus(context.Context, *v11.StatusRequest) (*v11.NodeCapabilityStatus, error)
	CapabilityUninstallStatus(context.Context, *v11.UninstallStatusRequest) (*v1.TaskStatus, error)
	CancelCapabilityUninstall(context.Context, *v11.CancelUninstallRequest) (*emptypb.Empty, error)
	GetDashboardSettings(context.Context, *emptypb.Empty) (*DashboardSettings, error)
	UpdateDashboardSettings(context.Context, *DashboardSettings) (*emptypb.Empty, error)
}

// UnimplementedManagementServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedManagementServer struct{}

func (UnimplementedManagementServer) CreateBootstrapToken(context.Context, *CreateBootstrapTokenRequest) (*v1.BootstrapToken, error) {
	return nil, status.Error(codes.Unimplemented, "method CreateBootstrapToken not implemented")
}
func (UnimplementedManagementServer) RevokeBootstrapToken(context.Context, *v1.Reference) (*emptypb.Empty, error) {
	return nil, status.Error(codes.Unimplemented, "method RevokeBootstrapToken not implemented")
}
func (UnimplementedManagementServer) ListBootstrapTokens(context.Context, *emptypb.Empty) (*v1.BootstrapTokenList, error) {
	return nil, status.Error(codes.Unimplemented, "method ListBootstrapTokens not implemented")
}
func (UnimplementedManagementServer) GetBootstrapToken(context.Context, *v1.Reference) (*v1.BootstrapToken, error) {
	return nil, status.Error(codes.Unimplemented, "method GetBootstrapToken not implemented")
}
func (UnimplementedManagementServer) ListClusters(context.Context, *ListClustersRequest) (*v1.ClusterList, error) {
	return nil, status.Error(codes.Unimplemented, "method ListClusters not implemented")
}
func (UnimplementedManagementServer) WatchClusters(*WatchClustersRequest, grpc.ServerStreamingServer[WatchEvent]) error {
	return status.Error(codes.Unimplemented, "method WatchClusters not implemented")
}
func (UnimplementedManagementServer) DeleteCluster(context.Context, *v1.Reference) (*emptypb.Empty, error) {
	return nil, status.Error(codes.Unimplemented, "method DeleteCluster not implemented")
}
func (UnimplementedManagementServer) CertsInfo(context.Context, *emptypb.Empty) (*CertsInfoResponse, error) {
	return nil, status.Error(codes.Unimplemented, "method CertsInfo not implemented")
}
func (UnimplementedManagementServer) GetCluster(context.Context, *v1.Reference) (*v1.Cluster, error) {
	return nil, status.Error(codes.Unimplemented, "method GetCluster not implemented")
}
func (UnimplementedManagementServer) GetClusterHealthStatus(context.Context, *v1.Reference) (*v1.HealthStatus, error) {
	return nil, status.Error(codes.Unimplemented, "method GetClusterHealthStatus not implemented")
}
func (UnimplementedManagementServer) WatchClusterHealthStatus(*emptypb.Empty, grpc.ServerStreamingServer[v1.ClusterHealthStatus]) error {
	return status.Error(codes.Unimplemented, "method WatchClusterHealthStatus not implemented")
}
func (UnimplementedManagementServer) EditCluster(context.Context, *EditClusterRequest) (*v1.Cluster, error) {
	return nil, status.Error(codes.Unimplemented, "method EditCluster not implemented")
}
func (UnimplementedManagementServer) ListRBACBackends(context.Context, *emptypb.Empty) (*v1.CapabilityTypeList, error) {
	return nil, status.Error(codes.Unimplemented, "method ListRBACBackends not implemented")
}
func (UnimplementedManagementServer) GetAvailableBackendPermissions(context.Context, *v1.CapabilityType) (*v1.AvailablePermissions, error) {
	return nil, status.Error(codes.Unimplemented, "method GetAvailableBackendPermissions not implemented")
}
func (UnimplementedManagementServer) CreateBackendRole(context.Context, *v1.BackendRole) (*emptypb.Empty, error) {
	return nil, status.Error(codes.Unimplemented, "method CreateBackendRole not implemented")
}
func (UnimplementedManagementServer) UpdateBackendRole(context.Context, *v1.BackendRole) (*emptypb.Empty, error) {
	return nil, status.Error(codes.Unimplemented, "method UpdateBackendRole not implemented")
}
func (UnimplementedManagementServer) DeleteBackendRole(context.Context, *v1.BackendRoleRequest) (*emptypb.Empty, error) {
	return nil, status.Error(codes.Unimplemented, "method DeleteBackendRole not implemented")
}
func (UnimplementedManagementServer) GetBackendRole(context.Context, *v1.BackendRoleRequest) (*v1.Role, error) {
	return nil, status.Error(codes.Unimplemented, "method GetBackendRole not implemented")
}
func (UnimplementedManagementServer) ListBackendRoles(context.Context, *v1.CapabilityType) (*v1.RoleList, error) {
	return nil, status.Error(codes.Unimplemented, "method ListBackendRoles not implemented")
}
func (UnimplementedManagementServer) AddAdminRoleBinding(context.Context, *v1.Reference) (*emptypb.Empty, error) {
	return nil, status.Error(codes.Unimplemented, "method AddAdminRoleBinding not implemented")
}
func (UnimplementedManagementServer) RemoveAdminRoleBinding(context.Context, *v1.Reference) (*emptypb.Empty, error) {
	return nil, status.Error(codes.Unimplemented, "method RemoveAdminRoleBinding not implemented")
}
func (UnimplementedManagementServer) ListAdminRoleBinding(context.Context, *emptypb.Empty) (*v1.ReferenceList, error) {
	return nil, status.Error(codes.Unimplemented, "method ListAdminRoleBinding not implemented")
}
func (UnimplementedManagementServer) CreateRoleBinding(context.Context, *v1.RoleBinding) (*emptypb.Empty, error) {
	return nil, status.Error(codes.Unimplemented, "method CreateRoleBinding not implemented")
}
func (UnimplementedManagementServer) UpdateRoleBinding(context.Context, *v1.RoleBinding) (*emptypb.Empty, error) {
	return nil, status.Error(codes.Unimplemented, "method UpdateRoleBinding not implemented")
}
func (UnimplementedManagementServer) DeleteRoleBinding(context.Context, *v1.Reference) (*emptypb.Empty, error) {
	return nil, status.Error(codes.Unimplemented, "method DeleteRoleBinding not implemented")
}
func (UnimplementedManagementServer) GetRoleBinding(context.Context, *v1.Reference) (*v1.RoleBinding, error) {
	return nil, status.Error(codes.Unimplemented, "method GetRoleBinding not implemented")
}
func (UnimplementedManagementServer) ListRoleBindings(context.Context, *emptypb.Empty) (*v1.RoleBindingList, error) {
	return nil, status.Error(codes.Unimplemented, "method ListRoleBindings not implemented")
}
func (UnimplementedManagementServer) APIExtensions(context.Context, *emptypb.Empty) (*APIExtensionInfoList, error) {
	return nil, status.Error(codes.Unimplemented, "method APIExtensions not implemented")
}
func (UnimplementedManagementServer) ListCapabilities(context.Context, *emptypb.Empty) (*CapabilityList, error) {
	return nil, status.Error(codes.Unimplemented, "method ListCapabilities not implemented")
}
func (UnimplementedManagementServer) InstallCapability(context.Context, *v11.InstallRequest) (*v11.InstallResponse, error) {
	return nil, status.Error(codes.Unimplemented, "method InstallCapability not implemented")
}
func (UnimplementedManagementServer) UninstallCapability(context.Context, *v11.UninstallRequest) (*emptypb.Empty, error) {
	return nil, status.Error(codes.Unimplemented, "method UninstallCapability not implemented")
}
func (UnimplementedManagementServer) CapabilityStatus(context.Context, *v11.StatusRequest) (*v11.NodeCapabilityStatus, error) {
	return nil, status.Error(codes.Unimplemented, "method CapabilityStatus not implemented")
}
func (UnimplementedManagementServer) CapabilityUninstallStatus(context.Context, *v11.UninstallStatusRequest) (*v1.TaskStatus, error) {
	return nil, status.Error(codes.Unimplemented, "method CapabilityUninstallStatus not implemented")
}
func (UnimplementedManagementServer) CancelCapabilityUninstall(context.Context, *v11.CancelUninstallRequest) (*emptypb.Empty, error) {
	return nil, status.Error(codes.Unimplemented, "method CancelCapabilityUninstall not implemented")
}
func (UnimplementedManagementServer) GetDashboardSettings(context.Context, *emptypb.Empty) (*DashboardSettings, error) {
	return nil, status.Error(codes.Unimplemented, "method GetDashboardSettings not implemented")
}
func (UnimplementedManagementServer) UpdateDashboardSettings(context.Context, *DashboardSettings) (*emptypb.Empty, error) {
	return nil, status.Error(codes.Unimplemented, "method UpdateDashboardSettings not implemented")
}
func (UnimplementedManagementServer) testEmbeddedByValue() {}

// UnsafeManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagementServer will
// result in compilation errors.
type UnsafeManagementServer interface {
	mustEmbedUnimplementedManagementServer()
}

func RegisterManagementServer(s grpc.ServiceRegistrar, srv ManagementServer) {
	// If the following call panics, it indicates UnimplementedManagementServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Management_ServiceDesc, srv)
}

func _Management_CreateBootstrapToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBootstrapTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).CreateBootstrapToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_CreateBootstrapToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).CreateBootstrapToken(ctx, req.(*CreateBootstrapTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_RevokeBootstrapToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Reference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).RevokeBootstrapToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_RevokeBootstrapToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).RevokeBootstrapToken(ctx, req.(*v1.Reference))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_ListBootstrapTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).ListBootstrapTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_ListBootstrapTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).ListBootstrapTokens(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_GetBootstrapToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Reference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).GetBootstrapToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_GetBootstrapToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).GetBootstrapToken(ctx, req.(*v1.Reference))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_ListClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).ListClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_ListClusters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).ListClusters(ctx, req.(*ListClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_WatchClusters_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchClustersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManagementServer).WatchClusters(m, &grpc.GenericServerStream[WatchClustersRequest, WatchEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Management_WatchClustersServer = grpc.ServerStreamingServer[WatchEvent]

func _Management_DeleteCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Reference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).DeleteCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_DeleteCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).DeleteCluster(ctx, req.(*v1.Reference))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_CertsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).CertsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_CertsInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).CertsInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_GetCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Reference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).GetCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_GetCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).GetCluster(ctx, req.(*v1.Reference))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_GetClusterHealthStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Reference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).GetClusterHealthStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_GetClusterHealthStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).GetClusterHealthStatus(ctx, req.(*v1.Reference))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_WatchClusterHealthStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManagementServer).WatchClusterHealthStatus(m, &grpc.GenericServerStream[emptypb.Empty, v1.ClusterHealthStatus]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Management_WatchClusterHealthStatusServer = grpc.ServerStreamingServer[v1.ClusterHealthStatus]

func _Management_EditCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).EditCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_EditCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).EditCluster(ctx, req.(*EditClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_ListRBACBackends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).ListRBACBackends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_ListRBACBackends_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).ListRBACBackends(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_GetAvailableBackendPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.CapabilityType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).GetAvailableBackendPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_GetAvailableBackendPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).GetAvailableBackendPermissions(ctx, req.(*v1.CapabilityType))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_CreateBackendRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.BackendRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).CreateBackendRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_CreateBackendRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).CreateBackendRole(ctx, req.(*v1.BackendRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_UpdateBackendRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.BackendRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).UpdateBackendRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_UpdateBackendRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).UpdateBackendRole(ctx, req.(*v1.BackendRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_DeleteBackendRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.BackendRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).DeleteBackendRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_DeleteBackendRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).DeleteBackendRole(ctx, req.(*v1.BackendRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_GetBackendRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.BackendRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).GetBackendRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_GetBackendRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).GetBackendRole(ctx, req.(*v1.BackendRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_ListBackendRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.CapabilityType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).ListBackendRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_ListBackendRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).ListBackendRoles(ctx, req.(*v1.CapabilityType))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_AddAdminRoleBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Reference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).AddAdminRoleBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_AddAdminRoleBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).AddAdminRoleBinding(ctx, req.(*v1.Reference))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_RemoveAdminRoleBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Reference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).RemoveAdminRoleBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_RemoveAdminRoleBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).RemoveAdminRoleBinding(ctx, req.(*v1.Reference))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_ListAdminRoleBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).ListAdminRoleBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_ListAdminRoleBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).ListAdminRoleBinding(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_CreateRoleBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.RoleBinding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).CreateRoleBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_CreateRoleBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).CreateRoleBinding(ctx, req.(*v1.RoleBinding))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_UpdateRoleBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.RoleBinding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).UpdateRoleBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_UpdateRoleBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).UpdateRoleBinding(ctx, req.(*v1.RoleBinding))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_DeleteRoleBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Reference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).DeleteRoleBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_DeleteRoleBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).DeleteRoleBinding(ctx, req.(*v1.Reference))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_GetRoleBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Reference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).GetRoleBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_GetRoleBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).GetRoleBinding(ctx, req.(*v1.Reference))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_ListRoleBindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).ListRoleBindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_ListRoleBindings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).ListRoleBindings(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_APIExtensions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).APIExtensions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_APIExtensions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).APIExtensions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_ListCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).ListCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_ListCapabilities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).ListCapabilities(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_InstallCapability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v11.InstallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).InstallCapability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_InstallCapability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).InstallCapability(ctx, req.(*v11.InstallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_UninstallCapability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v11.UninstallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).UninstallCapability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_UninstallCapability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).UninstallCapability(ctx, req.(*v11.UninstallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_CapabilityStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v11.StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).CapabilityStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_CapabilityStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).CapabilityStatus(ctx, req.(*v11.StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_CapabilityUninstallStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v11.UninstallStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).CapabilityUninstallStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_CapabilityUninstallStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).CapabilityUninstallStatus(ctx, req.(*v11.UninstallStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_CancelCapabilityUninstall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v11.CancelUninstallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).CancelCapabilityUninstall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_CancelCapabilityUninstall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).CancelCapabilityUninstall(ctx, req.(*v11.CancelUninstallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_GetDashboardSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).GetDashboardSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_GetDashboardSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).GetDashboardSettings(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_UpdateDashboardSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DashboardSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).UpdateDashboardSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_UpdateDashboardSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).UpdateDashboardSettings(ctx, req.(*DashboardSettings))
	}
	return interceptor(ctx, in, info, handler)
}

// Management_ServiceDesc is the grpc.ServiceDesc for Management service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Management_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "management.Management",
	HandlerType: (*ManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBootstrapToken",
			Handler:    _Management_CreateBootstrapToken_Handler,
		},
		{
			MethodName: "RevokeBootstrapToken",
			Handler:    _Management_RevokeBootstrapToken_Handler,
		},
		{
			MethodName: "ListBootstrapTokens",
			Handler:    _Management_ListBootstrapTokens_Handler,
		},
		{
			MethodName: "GetBootstrapToken",
			Handler:    _Management_GetBootstrapToken_Handler,
		},
		{
			MethodName: "ListClusters",
			Handler:    _Management_ListClusters_Handler,
		},
		{
			MethodName: "DeleteCluster",
			Handler:    _Management_DeleteCluster_Handler,
		},
		{
			MethodName: "CertsInfo",
			Handler:    _Management_CertsInfo_Handler,
		},
		{
			MethodName: "GetCluster",
			Handler:    _Management_GetCluster_Handler,
		},
		{
			MethodName: "GetClusterHealthStatus",
			Handler:    _Management_GetClusterHealthStatus_Handler,
		},
		{
			MethodName: "EditCluster",
			Handler:    _Management_EditCluster_Handler,
		},
		{
			MethodName: "ListRBACBackends",
			Handler:    _Management_ListRBACBackends_Handler,
		},
		{
			MethodName: "GetAvailableBackendPermissions",
			Handler:    _Management_GetAvailableBackendPermissions_Handler,
		},
		{
			MethodName: "CreateBackendRole",
			Handler:    _Management_CreateBackendRole_Handler,
		},
		{
			MethodName: "UpdateBackendRole",
			Handler:    _Management_UpdateBackendRole_Handler,
		},
		{
			MethodName: "DeleteBackendRole",
			Handler:    _Management_DeleteBackendRole_Handler,
		},
		{
			MethodName: "GetBackendRole",
			Handler:    _Management_GetBackendRole_Handler,
		},
		{
			MethodName: "ListBackendRoles",
			Handler:    _Management_ListBackendRoles_Handler,
		},
		{
			MethodName: "AddAdminRoleBinding",
			Handler:    _Management_AddAdminRoleBinding_Handler,
		},
		{
			MethodName: "RemoveAdminRoleBinding",
			Handler:    _Management_RemoveAdminRoleBinding_Handler,
		},
		{
			MethodName: "ListAdminRoleBinding",
			Handler:    _Management_ListAdminRoleBinding_Handler,
		},
		{
			MethodName: "CreateRoleBinding",
			Handler:    _Management_CreateRoleBinding_Handler,
		},
		{
			MethodName: "UpdateRoleBinding",
			Handler:    _Management_UpdateRoleBinding_Handler,
		},
		{
			MethodName: "DeleteRoleBinding",
			Handler:    _Management_DeleteRoleBinding_Handler,
		},
		{
			MethodName: "GetRoleBinding",
			Handler:    _Management_GetRoleBinding_Handler,
		},
		{
			MethodName: "ListRoleBindings",
			Handler:    _Management_ListRoleBindings_Handler,
		},
		{
			MethodName: "APIExtensions",
			Handler:    _Management_APIExtensions_Handler,
		},
		{
			MethodName: "ListCapabilities",
			Handler:    _Management_ListCapabilities_Handler,
		},
		{
			MethodName: "InstallCapability",
			Handler:    _Management_InstallCapability_Handler,
		},
		{
			MethodName: "UninstallCapability",
			Handler:    _Management_UninstallCapability_Handler,
		},
		{
			MethodName: "CapabilityStatus",
			Handler:    _Management_CapabilityStatus_Handler,
		},
		{
			MethodName: "CapabilityUninstallStatus",
			Handler:    _Management_CapabilityUninstallStatus_Handler,
		},
		{
			MethodName: "CancelCapabilityUninstall",
			Handler:    _Management_CancelCapabilityUninstall_Handler,
		},
		{
			MethodName: "GetDashboardSettings",
			Handler:    _Management_GetDashboardSettings_Handler,
		},
		{
			MethodName: "UpdateDashboardSettings",
			Handler:    _Management_UpdateDashboardSettings_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchClusters",
			Handler:       _Management_WatchClusters_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchClusterHealthStatus",
			Handler:       _Management_WatchClusterHealthStatus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/aity-cloud/monty/pkg/apis/management/v1/management.proto",
}
