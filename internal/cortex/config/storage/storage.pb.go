// Code generated by internal/codegen. You may edit parts of this file.
// Field numbers and custom options will be preserved for matching field names.
// All other modifications will be lost.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: github.com/aity-cloud/monty/internal/cortex/config/storage/storage.proto

package storage

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/kralicky/codegen/cli"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Config struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Backend storage to use. Supported backends are: s3, gcs, azure, swift, filesystem.
	Backend       *string           `protobuf:"bytes,1,opt,name=backend,proto3,oneof" json:"backend,omitempty"`
	S3            *S3Config         `protobuf:"bytes,2,opt,name=s3,proto3" json:"s3,omitempty"`
	Gcs           *GcsConfig        `protobuf:"bytes,3,opt,name=gcs,proto3" json:"gcs,omitempty"`
	Azure         *AzureConfig      `protobuf:"bytes,4,opt,name=azure,proto3" json:"azure,omitempty"`
	Swift         *SwiftConfig      `protobuf:"bytes,5,opt,name=swift,proto3" json:"swift,omitempty"`
	Filesystem    *FilesystemConfig `protobuf:"bytes,6,opt,name=filesystem,proto3" json:"filesystem,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Config) Reset() {
	*x = Config{}
	mi := &file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_rawDescGZIP(), []int{0}
}

func (x *Config) GetBackend() string {
	if x != nil && x.Backend != nil {
		return *x.Backend
	}
	return ""
}

func (x *Config) GetS3() *S3Config {
	if x != nil {
		return x.S3
	}
	return nil
}

func (x *Config) GetGcs() *GcsConfig {
	if x != nil {
		return x.Gcs
	}
	return nil
}

func (x *Config) GetAzure() *AzureConfig {
	if x != nil {
		return x.Azure
	}
	return nil
}

func (x *Config) GetSwift() *SwiftConfig {
	if x != nil {
		return x.Swift
	}
	return nil
}

func (x *Config) GetFilesystem() *FilesystemConfig {
	if x != nil {
		return x.Filesystem
	}
	return nil
}

type AzureConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Azure storage account name
	AccountName *string `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3,oneof" json:"account_name,omitempty"`
	// Azure storage account key
	AccountKey *string `protobuf:"bytes,2,opt,name=account_key,json=accountKey,proto3,oneof" json:"account_key,omitempty"`
	// Azure storage container name
	ContainerName *string `protobuf:"bytes,3,opt,name=container_name,json=containerName,proto3,oneof" json:"container_name,omitempty"`
	// Azure storage endpoint suffix without schema. The account name will be prefixed to this value to create the FQDN
	EndpointSuffix *string `protobuf:"bytes,4,opt,name=endpoint_suffix,json=endpointSuffix,proto3,oneof" json:"endpoint_suffix,omitempty"`
	// Number of retries for recoverable errors
	MaxRetries *int32 `protobuf:"varint,5,opt,name=max_retries,json=maxRetries,proto3,oneof" json:"max_retries,omitempty"`
	// Deprecated: Azure storage MSI resource. It will be set automatically by Azure SDK.
	//
	// Deprecated: Marked as deprecated in github.com/aity-cloud/monty/internal/cortex/config/storage/storage.proto.
	MsiResource *string `protobuf:"bytes,6,opt,name=msi_resource,json=msiResource,proto3,oneof" json:"msi_resource,omitempty"`
	// Azure storage MSI resource managed identity client Id. If not supplied default Azure credential will be used. Set it to empty if you need to authenticate via Azure Workload Identity.
	UserAssignedId *string     `protobuf:"bytes,7,opt,name=user_assigned_id,json=userAssignedId,proto3,oneof" json:"user_assigned_id,omitempty"`
	Http           *HttpConfig `protobuf:"bytes,8,opt,name=http,proto3" json:"http,omitempty"`
	// The values of `account-name` and `endpoint-suffix` values will not be ignored if `connection-string` is set. Use this method over `account-key` if you need to authenticate via a SAS token or if you use the Azurite emulator.
	ConnectionString *string `protobuf:"bytes,10,opt,name=connection_string,json=connectionString,proto3,oneof" json:"connection_string,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AzureConfig) Reset() {
	*x = AzureConfig{}
	mi := &file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AzureConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AzureConfig) ProtoMessage() {}

func (x *AzureConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AzureConfig.ProtoReflect.Descriptor instead.
func (*AzureConfig) Descriptor() ([]byte, []int) {
	return file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_rawDescGZIP(), []int{1}
}

func (x *AzureConfig) GetAccountName() string {
	if x != nil && x.AccountName != nil {
		return *x.AccountName
	}
	return ""
}

func (x *AzureConfig) GetAccountKey() string {
	if x != nil && x.AccountKey != nil {
		return *x.AccountKey
	}
	return ""
}

func (x *AzureConfig) GetContainerName() string {
	if x != nil && x.ContainerName != nil {
		return *x.ContainerName
	}
	return ""
}

func (x *AzureConfig) GetEndpointSuffix() string {
	if x != nil && x.EndpointSuffix != nil {
		return *x.EndpointSuffix
	}
	return ""
}

func (x *AzureConfig) GetMaxRetries() int32 {
	if x != nil && x.MaxRetries != nil {
		return *x.MaxRetries
	}
	return 0
}

// Deprecated: Marked as deprecated in github.com/aity-cloud/monty/internal/cortex/config/storage/storage.proto.
func (x *AzureConfig) GetMsiResource() string {
	if x != nil && x.MsiResource != nil {
		return *x.MsiResource
	}
	return ""
}

func (x *AzureConfig) GetUserAssignedId() string {
	if x != nil && x.UserAssignedId != nil {
		return *x.UserAssignedId
	}
	return ""
}

func (x *AzureConfig) GetHttp() *HttpConfig {
	if x != nil {
		return x.Http
	}
	return nil
}

func (x *AzureConfig) GetConnectionString() string {
	if x != nil && x.ConnectionString != nil {
		return *x.ConnectionString
	}
	return ""
}

type FilesystemConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilesystemConfig) Reset() {
	*x = FilesystemConfig{}
	mi := &file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilesystemConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemConfig) ProtoMessage() {}

func (x *FilesystemConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemConfig.ProtoReflect.Descriptor instead.
func (*FilesystemConfig) Descriptor() ([]byte, []int) {
	return file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_rawDescGZIP(), []int{2}
}

type GcsConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// GCS bucket name
	BucketName *string `protobuf:"bytes,1,opt,name=bucket_name,json=bucketName,proto3,oneof" json:"bucket_name,omitempty"`
	// JSON representing either a Google Developers Console client_credentials.json file or a Google Developers service account key file. If empty, fallback to Google default logic.
	ServiceAccount *string `protobuf:"bytes,2,opt,name=service_account,json=serviceAccount,proto3,oneof" json:"service_account,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GcsConfig) Reset() {
	*x = GcsConfig{}
	mi := &file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GcsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcsConfig) ProtoMessage() {}

func (x *GcsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcsConfig.ProtoReflect.Descriptor instead.
func (*GcsConfig) Descriptor() ([]byte, []int) {
	return file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_rawDescGZIP(), []int{3}
}

func (x *GcsConfig) GetBucketName() string {
	if x != nil && x.BucketName != nil {
		return *x.BucketName
	}
	return ""
}

func (x *GcsConfig) GetServiceAccount() string {
	if x != nil && x.ServiceAccount != nil {
		return *x.ServiceAccount
	}
	return ""
}

type HttpConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The time an idle connection will remain idle before closing.
	IdleConnTimeout *durationpb.Duration `protobuf:"bytes,1,opt,name=idle_conn_timeout,json=idleConnTimeout,proto3" json:"idle_conn_timeout,omitempty"`
	// The amount of time the client will wait for a servers response headers.
	ResponseHeaderTimeout *durationpb.Duration `protobuf:"bytes,2,opt,name=response_header_timeout,json=responseHeaderTimeout,proto3" json:"response_header_timeout,omitempty"`
	// If the client connects via HTTPS and this option is enabled, the client will accept any certificate and hostname.
	InsecureSkipVerify *bool `protobuf:"varint,3,opt,name=insecure_skip_verify,json=insecureSkipVerify,proto3,oneof" json:"insecure_skip_verify,omitempty"`
	// Maximum time to wait for a TLS handshake. 0 means no limit.
	TlsHandshakeTimeout *durationpb.Duration `protobuf:"bytes,4,opt,name=tls_handshake_timeout,json=tlsHandshakeTimeout,proto3" json:"tls_handshake_timeout,omitempty"`
	// The time to wait for a server's first response headers after fully writing the request headers if the request has an Expect header. 0 to send the request body immediately.
	ExpectContinueTimeout *durationpb.Duration `protobuf:"bytes,5,opt,name=expect_continue_timeout,json=expectContinueTimeout,proto3" json:"expect_continue_timeout,omitempty"`
	// Maximum number of idle (keep-alive) connections across all hosts. 0 means no limit.
	MaxIdleConnections *int32 `protobuf:"varint,6,opt,name=max_idle_connections,json=maxIdleConnections,proto3,oneof" json:"max_idle_connections,omitempty"`
	// Maximum number of idle (keep-alive) connections to keep per-host. If 0, a built-in default value is used.
	MaxIdleConnectionsPerHost *int32 `protobuf:"varint,7,opt,name=max_idle_connections_per_host,json=maxIdleConnectionsPerHost,proto3,oneof" json:"max_idle_connections_per_host,omitempty"`
	// Maximum number of connections per host. 0 means no limit.
	MaxConnectionsPerHost *int32 `protobuf:"varint,8,opt,name=max_connections_per_host,json=maxConnectionsPerHost,proto3,oneof" json:"max_connections_per_host,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *HttpConfig) Reset() {
	*x = HttpConfig{}
	mi := &file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpConfig) ProtoMessage() {}

func (x *HttpConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpConfig.ProtoReflect.Descriptor instead.
func (*HttpConfig) Descriptor() ([]byte, []int) {
	return file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_rawDescGZIP(), []int{4}
}

func (x *HttpConfig) GetIdleConnTimeout() *durationpb.Duration {
	if x != nil {
		return x.IdleConnTimeout
	}
	return nil
}

func (x *HttpConfig) GetResponseHeaderTimeout() *durationpb.Duration {
	if x != nil {
		return x.ResponseHeaderTimeout
	}
	return nil
}

func (x *HttpConfig) GetInsecureSkipVerify() bool {
	if x != nil && x.InsecureSkipVerify != nil {
		return *x.InsecureSkipVerify
	}
	return false
}

func (x *HttpConfig) GetTlsHandshakeTimeout() *durationpb.Duration {
	if x != nil {
		return x.TlsHandshakeTimeout
	}
	return nil
}

func (x *HttpConfig) GetExpectContinueTimeout() *durationpb.Duration {
	if x != nil {
		return x.ExpectContinueTimeout
	}
	return nil
}

func (x *HttpConfig) GetMaxIdleConnections() int32 {
	if x != nil && x.MaxIdleConnections != nil {
		return *x.MaxIdleConnections
	}
	return 0
}

func (x *HttpConfig) GetMaxIdleConnectionsPerHost() int32 {
	if x != nil && x.MaxIdleConnectionsPerHost != nil {
		return *x.MaxIdleConnectionsPerHost
	}
	return 0
}

func (x *HttpConfig) GetMaxConnectionsPerHost() int32 {
	if x != nil && x.MaxConnectionsPerHost != nil {
		return *x.MaxConnectionsPerHost
	}
	return 0
}

type S3Config struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The S3 bucket endpoint. It could be an AWS S3 endpoint listed at https://docs.aws.amazon.com/general/latest/gr/s3.html or the address of an S3-compatible service in hostname:port format.
	Endpoint *string `protobuf:"bytes,1,opt,name=endpoint,proto3,oneof" json:"endpoint,omitempty"`
	// S3 region. If unset, the client will issue a S3 GetBucketLocation API call to autodetect it.
	Region *string `protobuf:"bytes,2,opt,name=region,proto3,oneof" json:"region,omitempty"`
	// S3 bucket name
	BucketName *string `protobuf:"bytes,3,opt,name=bucket_name,json=bucketName,proto3,oneof" json:"bucket_name,omitempty"`
	// S3 secret access key
	SecretAccessKey *string `protobuf:"bytes,4,opt,name=secret_access_key,json=secretAccessKey,proto3,oneof" json:"secret_access_key,omitempty"`
	// S3 access key ID
	AccessKeyId *string `protobuf:"bytes,5,opt,name=access_key_id,json=accessKeyId,proto3,oneof" json:"access_key_id,omitempty"`
	// If enabled, use http:// for the S3 endpoint instead of https://. This could be useful in local dev/test environments while using an S3-compatible backend storage, like Minio.
	Insecure *bool `protobuf:"varint,6,opt,name=insecure,proto3,oneof" json:"insecure,omitempty"`
	// The signature version to use for authenticating against S3. Supported values are: v4, v2.
	SignatureVersion *string `protobuf:"bytes,7,opt,name=signature_version,json=signatureVersion,proto3,oneof" json:"signature_version,omitempty"`
	// The s3 bucket lookup style. Supported values are: auto, virtual-hosted, path.
	BucketLookupType *string      `protobuf:"bytes,8,opt,name=bucket_lookup_type,json=bucketLookupType,proto3,oneof" json:"bucket_lookup_type,omitempty"`
	Sse              *S3SSEConfig `protobuf:"bytes,9,opt,name=sse,proto3" json:"sse,omitempty"`
	Http             *HttpConfig  `protobuf:"bytes,10,opt,name=http,proto3" json:"http,omitempty"`
	// The list api version. Supported values are: v1, v2, and ”.
	ListObjectsVersion *string `protobuf:"bytes,11,opt,name=list_objects_version,json=listObjectsVersion,proto3,oneof" json:"list_objects_version,omitempty"`
	// If enabled, S3 endpoint will use the non-dualstack variant.
	DisableDualstack *bool `protobuf:"varint,14,opt,name=disable_dualstack,json=disableDualstack,proto3,oneof" json:"disable_dualstack,omitempty"`
	// If true, attach MD5 checksum when upload objects and S3 uses MD5 checksum algorithm to verify the provided digest. If false, use CRC32C algorithm instead.
	SendContentMd5 *bool `protobuf:"varint,15,opt,name=send_content_md5,json=sendContentMd5,proto3,oneof" json:"send_content_md5,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *S3Config) Reset() {
	*x = S3Config{}
	mi := &file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S3Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3Config) ProtoMessage() {}

func (x *S3Config) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3Config.ProtoReflect.Descriptor instead.
func (*S3Config) Descriptor() ([]byte, []int) {
	return file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_rawDescGZIP(), []int{5}
}

func (x *S3Config) GetEndpoint() string {
	if x != nil && x.Endpoint != nil {
		return *x.Endpoint
	}
	return ""
}

func (x *S3Config) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *S3Config) GetBucketName() string {
	if x != nil && x.BucketName != nil {
		return *x.BucketName
	}
	return ""
}

func (x *S3Config) GetSecretAccessKey() string {
	if x != nil && x.SecretAccessKey != nil {
		return *x.SecretAccessKey
	}
	return ""
}

func (x *S3Config) GetAccessKeyId() string {
	if x != nil && x.AccessKeyId != nil {
		return *x.AccessKeyId
	}
	return ""
}

func (x *S3Config) GetInsecure() bool {
	if x != nil && x.Insecure != nil {
		return *x.Insecure
	}
	return false
}

func (x *S3Config) GetSignatureVersion() string {
	if x != nil && x.SignatureVersion != nil {
		return *x.SignatureVersion
	}
	return ""
}

func (x *S3Config) GetBucketLookupType() string {
	if x != nil && x.BucketLookupType != nil {
		return *x.BucketLookupType
	}
	return ""
}

func (x *S3Config) GetSse() *S3SSEConfig {
	if x != nil {
		return x.Sse
	}
	return nil
}

func (x *S3Config) GetHttp() *HttpConfig {
	if x != nil {
		return x.Http
	}
	return nil
}

func (x *S3Config) GetListObjectsVersion() string {
	if x != nil && x.ListObjectsVersion != nil {
		return *x.ListObjectsVersion
	}
	return ""
}

func (x *S3Config) GetDisableDualstack() bool {
	if x != nil && x.DisableDualstack != nil {
		return *x.DisableDualstack
	}
	return false
}

func (x *S3Config) GetSendContentMd5() bool {
	if x != nil && x.SendContentMd5 != nil {
		return *x.SendContentMd5
	}
	return false
}

type S3SSEConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Enable AWS Server Side Encryption. Supported values: SSE-KMS, SSE-S3.
	Type *string `protobuf:"bytes,1,opt,name=type,proto3,oneof" json:"type,omitempty"`
	// KMS Key ID used to encrypt objects in S3
	KmsKeyId *string `protobuf:"bytes,2,opt,name=kms_key_id,json=kmsKeyId,proto3,oneof" json:"kms_key_id,omitempty"`
	// KMS Encryption Context used for object encryption. It expects JSON formatted string.
	KmsEncryptionContext *string `protobuf:"bytes,3,opt,name=kms_encryption_context,json=kmsEncryptionContext,proto3,oneof" json:"kms_encryption_context,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *S3SSEConfig) Reset() {
	*x = S3SSEConfig{}
	mi := &file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S3SSEConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3SSEConfig) ProtoMessage() {}

func (x *S3SSEConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3SSEConfig.ProtoReflect.Descriptor instead.
func (*S3SSEConfig) Descriptor() ([]byte, []int) {
	return file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_rawDescGZIP(), []int{6}
}

func (x *S3SSEConfig) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *S3SSEConfig) GetKmsKeyId() string {
	if x != nil && x.KmsKeyId != nil {
		return *x.KmsKeyId
	}
	return ""
}

func (x *S3SSEConfig) GetKmsEncryptionContext() string {
	if x != nil && x.KmsEncryptionContext != nil {
		return *x.KmsEncryptionContext
	}
	return ""
}

type SwiftConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// OpenStack Swift authentication API version. 0 to autodetect.
	AuthVersion *int32 `protobuf:"varint,1,opt,name=auth_version,json=authVersion,proto3,oneof" json:"auth_version,omitempty"`
	// OpenStack Swift authentication URL
	AuthUrl *string `protobuf:"bytes,2,opt,name=auth_url,json=authUrl,proto3,oneof" json:"auth_url,omitempty"`
	// OpenStack Swift username.
	Username *string `protobuf:"bytes,3,opt,name=username,proto3,oneof" json:"username,omitempty"`
	// OpenStack Swift user's domain name.
	UserDomainName *string `protobuf:"bytes,4,opt,name=user_domain_name,json=userDomainName,proto3,oneof" json:"user_domain_name,omitempty"`
	// OpenStack Swift user's domain ID.
	UserDomainId *string `protobuf:"bytes,5,opt,name=user_domain_id,json=userDomainId,proto3,oneof" json:"user_domain_id,omitempty"`
	// OpenStack Swift user ID.
	UserId *string `protobuf:"bytes,6,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	// OpenStack Swift application credential ID.
	ApplicationCredentialId *string `protobuf:"bytes,10,opt,name=application_credential_id,json=applicationCredentialId,proto3,oneof" json:"application_credential_id,omitempty"`
	// OpenStack Swift application credential name.
	ApplicationCredentialName *string `protobuf:"bytes,11,opt,name=application_credential_name,json=applicationCredentialName,proto3,oneof" json:"application_credential_name,omitempty"`
	// OpenStack Swift application credential secret.
	ApplicationCredentialSecret *string `protobuf:"bytes,12,opt,name=application_credential_secret,json=applicationCredentialSecret,proto3,oneof" json:"application_credential_secret,omitempty"`
	// OpenStack Swift project ID (v2,v3 auth only).
	ProjectId *string `protobuf:"bytes,13,opt,name=project_id,json=projectId,proto3,oneof" json:"project_id,omitempty"`
	// OpenStack Swift project name (v2,v3 auth only).
	ProjectName *string `protobuf:"bytes,14,opt,name=project_name,json=projectName,proto3,oneof" json:"project_name,omitempty"`
	// ID of the OpenStack Swift project's domain (v3 auth only), only needed if it differs the from user domain.
	ProjectDomainId *string `protobuf:"bytes,15,opt,name=project_domain_id,json=projectDomainId,proto3,oneof" json:"project_domain_id,omitempty"`
	// Name of the OpenStack Swift project's domain (v3 auth only), only needed if it differs from the user domain.
	ProjectDomainName *string `protobuf:"bytes,16,opt,name=project_domain_name,json=projectDomainName,proto3,oneof" json:"project_domain_name,omitempty"`
	// OpenStack Swift Region to use (v2,v3 auth only).
	RegionName *string `protobuf:"bytes,17,opt,name=region_name,json=regionName,proto3,oneof" json:"region_name,omitempty"`
	// Name of the OpenStack Swift container to put chunks in.
	ContainerName *string `protobuf:"bytes,18,opt,name=container_name,json=containerName,proto3,oneof" json:"container_name,omitempty"`
	// Max retries on requests error.
	MaxRetries *int32 `protobuf:"varint,19,opt,name=max_retries,json=maxRetries,proto3,oneof" json:"max_retries,omitempty"`
	// Time after which a connection attempt is aborted.
	ConnectTimeout *durationpb.Duration `protobuf:"bytes,20,opt,name=connect_timeout,json=connectTimeout,proto3" json:"connect_timeout,omitempty"`
	// Time after which an idle request is aborted. The timeout watchdog is reset each time some data is received, so the timeout triggers after X time no data is received on a request.
	RequestTimeout *durationpb.Duration `protobuf:"bytes,21,opt,name=request_timeout,json=requestTimeout,proto3" json:"request_timeout,omitempty"`
	// OpenStack Swift API key.
	Password *string `protobuf:"bytes,22,opt,name=password,proto3,oneof" json:"password,omitempty"`
	// OpenStack Swift user's domain ID.
	DomainId *string `protobuf:"bytes,23,opt,name=domain_id,json=domainId,proto3,oneof" json:"domain_id,omitempty"`
	// OpenStack Swift user's domain name.
	DomainName    *string `protobuf:"bytes,24,opt,name=domain_name,json=domainName,proto3,oneof" json:"domain_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SwiftConfig) Reset() {
	*x = SwiftConfig{}
	mi := &file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SwiftConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwiftConfig) ProtoMessage() {}

func (x *SwiftConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwiftConfig.ProtoReflect.Descriptor instead.
func (*SwiftConfig) Descriptor() ([]byte, []int) {
	return file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_rawDescGZIP(), []int{7}
}

func (x *SwiftConfig) GetAuthVersion() int32 {
	if x != nil && x.AuthVersion != nil {
		return *x.AuthVersion
	}
	return 0
}

func (x *SwiftConfig) GetAuthUrl() string {
	if x != nil && x.AuthUrl != nil {
		return *x.AuthUrl
	}
	return ""
}

func (x *SwiftConfig) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *SwiftConfig) GetUserDomainName() string {
	if x != nil && x.UserDomainName != nil {
		return *x.UserDomainName
	}
	return ""
}

func (x *SwiftConfig) GetUserDomainId() string {
	if x != nil && x.UserDomainId != nil {
		return *x.UserDomainId
	}
	return ""
}

func (x *SwiftConfig) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *SwiftConfig) GetApplicationCredentialId() string {
	if x != nil && x.ApplicationCredentialId != nil {
		return *x.ApplicationCredentialId
	}
	return ""
}

func (x *SwiftConfig) GetApplicationCredentialName() string {
	if x != nil && x.ApplicationCredentialName != nil {
		return *x.ApplicationCredentialName
	}
	return ""
}

func (x *SwiftConfig) GetApplicationCredentialSecret() string {
	if x != nil && x.ApplicationCredentialSecret != nil {
		return *x.ApplicationCredentialSecret
	}
	return ""
}

func (x *SwiftConfig) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

func (x *SwiftConfig) GetProjectName() string {
	if x != nil && x.ProjectName != nil {
		return *x.ProjectName
	}
	return ""
}

func (x *SwiftConfig) GetProjectDomainId() string {
	if x != nil && x.ProjectDomainId != nil {
		return *x.ProjectDomainId
	}
	return ""
}

func (x *SwiftConfig) GetProjectDomainName() string {
	if x != nil && x.ProjectDomainName != nil {
		return *x.ProjectDomainName
	}
	return ""
}

func (x *SwiftConfig) GetRegionName() string {
	if x != nil && x.RegionName != nil {
		return *x.RegionName
	}
	return ""
}

func (x *SwiftConfig) GetContainerName() string {
	if x != nil && x.ContainerName != nil {
		return *x.ContainerName
	}
	return ""
}

func (x *SwiftConfig) GetMaxRetries() int32 {
	if x != nil && x.MaxRetries != nil {
		return *x.MaxRetries
	}
	return 0
}

func (x *SwiftConfig) GetConnectTimeout() *durationpb.Duration {
	if x != nil {
		return x.ConnectTimeout
	}
	return nil
}

func (x *SwiftConfig) GetRequestTimeout() *durationpb.Duration {
	if x != nil {
		return x.RequestTimeout
	}
	return nil
}

func (x *SwiftConfig) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *SwiftConfig) GetDomainId() string {
	if x != nil && x.DomainId != nil {
		return *x.DomainId
	}
	return ""
}

func (x *SwiftConfig) GetDomainName() string {
	if x != nil && x.DomainName != nil {
		return *x.DomainName
	}
	return ""
}

var File_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto protoreflect.FileDescriptor

const file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_rawDesc = "" +
	"\n" +
	"Hgithub.com/aity-cloud/monty/internal/cortex/config/storage/storage.proto\x12\astorage\x1a\x1bbuf/validate/validate.proto\x1a)github.com/kralicky/codegen/cli/cli.proto\x1a\x1egoogle/protobuf/duration.proto\"\xf0\x02\n" +
	"\x06Config\x12~\n" +
	"\abackend\x18\x01 \x01(\tB_\xbaHT\xba\x01Q\n" +
	"\abackend\x12\x0finvalid backend\x1a5this in ['s3', 'gcs', 'azure', 'swift', 'filesystem']\x8a\xc0\f\x04\n" +
	"\x02s3H\x00R\abackend\x88\x01\x01\x12!\n" +
	"\x02s3\x18\x02 \x01(\v2\x11.storage.S3ConfigR\x02s3\x12$\n" +
	"\x03gcs\x18\x03 \x01(\v2\x12.storage.GcsConfigR\x03gcs\x12*\n" +
	"\x05azure\x18\x04 \x01(\v2\x14.storage.AzureConfigR\x05azure\x12*\n" +
	"\x05swift\x18\x05 \x01(\v2\x14.storage.SwiftConfigR\x05swift\x129\n" +
	"\n" +
	"filesystem\x18\x06 \x01(\v2\x19.storage.FilesystemConfigR\n" +
	"filesystemB\n" +
	"\n" +
	"\b_backend\"\x84\a\n" +
	"\vAzureConfig\x12.\n" +
	"\faccount_name\x18\x01 \x01(\tB\x06\xbaH\x03\xc8\x01\x01H\x00R\vaccountName\x88\x01\x01\x12,\n" +
	"\vaccount_key\x18\x02 \x01(\tB\x06\x8a\xc0\f\x02\x18\x01H\x01R\n" +
	"accountKey\x88\x01\x01\x122\n" +
	"\x0econtainer_name\x18\x03 \x01(\tB\x06\xbaH\x03\xc8\x01\x01H\x02R\rcontainerName\x88\x01\x01\x12,\n" +
	"\x0fendpoint_suffix\x18\x04 \x01(\tH\x03R\x0eendpointSuffix\x88\x01\x01\x125\n" +
	"\vmax_retries\x18\x05 \x01(\x05B\x0f\xbaH\x04\x1a\x02 \x00\x8a\xc0\f\x04\n" +
	"\x0220H\x04R\n" +
	"maxRetries\x88\x01\x01\x120\n" +
	"\fmsi_resource\x18\x06 \x01(\tB\b\x8a\xc0\f\x02\x18\x01\x18\x01H\x05R\vmsiResource\x88\x01\x01\x12-\n" +
	"\x10user_assigned_id\x18\a \x01(\tH\x06R\x0euserAssignedId\x88\x01\x01\x12'\n" +
	"\x04http\x18\b \x01(\v2\x13.storage.HttpConfigR\x04http\x128\n" +
	"\x11connection_string\x18\n" +
	" \x01(\tB\x06\x8a\xc0\f\x02\x18\x01H\aR\x10connectionString\x88\x01\x01:\xa5\x02\xbaH\xa1\x02\x1a}\n" +
	"\x1arequire_msi_or_account_key\x12.either msi_resource or account_key must be set\x1a/has(this.msi_resource) != has(this.account_key)\x1a\x9f\x01\n" +
	"\x1bno_user_id_with_account_key\x12Duser_assigned_id cannot be set when using account_key authentication\x1a:has(this.account_key) ? !has(this.user_assigned_id) : trueB\x0f\n" +
	"\r_account_nameB\x0e\n" +
	"\f_account_keyB\x11\n" +
	"\x0f_container_nameB\x12\n" +
	"\x10_endpoint_suffixB\x0e\n" +
	"\f_max_retriesB\x0f\n" +
	"\r_msi_resourceB\x13\n" +
	"\x11_user_assigned_idB\x14\n" +
	"\x12_connection_string\"\x12\n" +
	"\x10FilesystemConfig\"\x99\x01\n" +
	"\tGcsConfig\x12,\n" +
	"\vbucket_name\x18\x01 \x01(\tB\x06\xbaH\x03\xc8\x01\x01H\x00R\n" +
	"bucketName\x88\x01\x01\x12:\n" +
	"\x0fservice_account\x18\x02 \x01(\tB\f\xbaH\x03\xc8\x01\x01\x8a\xc0\f\x02\x18\x01H\x01R\x0eserviceAccount\x88\x01\x01B\x0e\n" +
	"\f_bucket_nameB\x12\n" +
	"\x10_service_account\"\x86\x06\n" +
	"\n" +
	"HttpConfig\x12R\n" +
	"\x11idle_conn_timeout\x18\x01 \x01(\v2\x19.google.protobuf.DurationB\v\x8a\xc0\f\a\n" +
	"\x051m30sR\x0fidleConnTimeout\x12]\n" +
	"\x17response_header_timeout\x18\x02 \x01(\v2\x19.google.protobuf.DurationB\n" +
	"\x8a\xc0\f\x06\n" +
	"\x042m0sR\x15responseHeaderTimeout\x12B\n" +
	"\x14insecure_skip_verify\x18\x03 \x01(\bB\v\x8a\xc0\f\a\n" +
	"\x05falseH\x00R\x12insecureSkipVerify\x88\x01\x01\x12X\n" +
	"\x15tls_handshake_timeout\x18\x04 \x01(\v2\x19.google.protobuf.DurationB\t\x8a\xc0\f\x05\n" +
	"\x0310sR\x13tlsHandshakeTimeout\x12[\n" +
	"\x17expect_continue_timeout\x18\x05 \x01(\v2\x19.google.protobuf.DurationB\b\x8a\xc0\f\x04\n" +
	"\x021sR\x15expectContinueTimeout\x12@\n" +
	"\x14max_idle_connections\x18\x06 \x01(\x05B\t\x8a\xc0\f\x05\n" +
	"\x03100H\x01R\x12maxIdleConnections\x88\x01\x01\x12P\n" +
	"\x1dmax_idle_connections_per_host\x18\a \x01(\x05B\t\x8a\xc0\f\x05\n" +
	"\x03100H\x02R\x19maxIdleConnectionsPerHost\x88\x01\x01\x12E\n" +
	"\x18max_connections_per_host\x18\b \x01(\x05B\a\x8a\xc0\f\x03\n" +
	"\x010H\x03R\x15maxConnectionsPerHost\x88\x01\x01B\x17\n" +
	"\x15_insecure_skip_verifyB\x17\n" +
	"\x15_max_idle_connectionsB \n" +
	"\x1e_max_idle_connections_per_hostB\x1b\n" +
	"\x19_max_connections_per_host\"\xec\x06\n" +
	"\bS3Config\x12,\n" +
	"\bendpoint\x18\x01 \x01(\tB\v\xbaH\b\xc8\x01\x01r\x03\x88\x01\x01H\x00R\bendpoint\x88\x01\x01\x12\x1b\n" +
	"\x06region\x18\x02 \x01(\tH\x01R\x06region\x88\x01\x01\x12,\n" +
	"\vbucket_name\x18\x03 \x01(\tB\x06\xbaH\x03\xc8\x01\x01H\x02R\n" +
	"bucketName\x88\x01\x01\x12=\n" +
	"\x11secret_access_key\x18\x04 \x01(\tB\f\xbaH\x03\xc8\x01\x01\x8a\xc0\f\x02\x18\x01H\x03R\x0fsecretAccessKey\x88\x01\x01\x12/\n" +
	"\raccess_key_id\x18\x05 \x01(\tB\x06\xbaH\x03\xc8\x01\x01H\x04R\vaccessKeyId\x88\x01\x01\x12,\n" +
	"\binsecure\x18\x06 \x01(\bB\v\x8a\xc0\f\a\n" +
	"\x05falseH\x05R\binsecure\x88\x01\x01\x12:\n" +
	"\x11signature_version\x18\a \x01(\tB\b\x8a\xc0\f\x04\n" +
	"\x02v4H\x06R\x10signatureVersion\x88\x01\x01\x12=\n" +
	"\x12bucket_lookup_type\x18\b \x01(\tB\n" +
	"\x8a\xc0\f\x06\n" +
	"\x04autoH\aR\x10bucketLookupType\x88\x01\x01\x12&\n" +
	"\x03sse\x18\t \x01(\v2\x14.storage.S3SSEConfigR\x03sse\x12'\n" +
	"\x04http\x18\n" +
	" \x01(\v2\x13.storage.HttpConfigR\x04http\x125\n" +
	"\x14list_objects_version\x18\v \x01(\tH\bR\x12listObjectsVersion\x88\x01\x01\x12=\n" +
	"\x11disable_dualstack\x18\x0e \x01(\bB\v\x8a\xc0\f\a\n" +
	"\x05falseH\tR\x10disableDualstack\x88\x01\x01\x129\n" +
	"\x10send_content_md5\x18\x0f \x01(\bB\n" +
	"\x8a\xc0\f\x06\n" +
	"\x04trueH\n" +
	"R\x0esendContentMd5\x88\x01\x01B\v\n" +
	"\t_endpointB\t\n" +
	"\a_regionB\x0e\n" +
	"\f_bucket_nameB\x14\n" +
	"\x12_secret_access_keyB\x10\n" +
	"\x0e_access_key_idB\v\n" +
	"\t_insecureB\x14\n" +
	"\x12_signature_versionB\x15\n" +
	"\x13_bucket_lookup_typeB\x17\n" +
	"\x15_list_objects_versionB\x14\n" +
	"\x12_disable_dualstackB\x13\n" +
	"\x11_send_content_md5\"\xd7\x01\n" +
	"\vS3SSEConfig\x12/\n" +
	"\x04type\x18\x01 \x01(\tB\x16\xbaH\x13r\x11R\aSSE-KMSR\x06SSE-S3H\x00R\x04type\x88\x01\x01\x12!\n" +
	"\n" +
	"kms_key_id\x18\x02 \x01(\tH\x01R\bkmsKeyId\x88\x01\x01\x12A\n" +
	"\x16kms_encryption_context\x18\x03 \x01(\tB\x06\x8a\xc0\f\x02\x18\x01H\x02R\x14kmsEncryptionContext\x88\x01\x01B\a\n" +
	"\x05_typeB\r\n" +
	"\v_kms_key_idB\x19\n" +
	"\x17_kms_encryption_context\"\xb1\x15\n" +
	"\vSwiftConfig\x12/\n" +
	"\fauth_version\x18\x01 \x01(\x05B\a\x8a\xc0\f\x03\n" +
	"\x010H\x00R\vauthVersion\x88\x01\x01\x12+\n" +
	"\bauth_url\x18\x02 \x01(\tB\v\xbaH\b\xc8\x01\x01r\x03\x88\x01\x01H\x01R\aauthUrl\x88\x01\x01\x12\x1f\n" +
	"\busername\x18\x03 \x01(\tH\x02R\busername\x88\x01\x01\x12-\n" +
	"\x10user_domain_name\x18\x04 \x01(\tH\x03R\x0euserDomainName\x88\x01\x01\x12)\n" +
	"\x0euser_domain_id\x18\x05 \x01(\tH\x04R\fuserDomainId\x88\x01\x01\x12\x1c\n" +
	"\auser_id\x18\x06 \x01(\tH\x05R\x06userId\x88\x01\x01\x12?\n" +
	"\x19application_credential_id\x18\n" +
	" \x01(\tH\x06R\x17applicationCredentialId\x88\x01\x01\x12C\n" +
	"\x1bapplication_credential_name\x18\v \x01(\tH\aR\x19applicationCredentialName\x88\x01\x01\x12G\n" +
	"\x1dapplication_credential_secret\x18\f \x01(\tH\bR\x1bapplicationCredentialSecret\x88\x01\x01\x12\"\n" +
	"\n" +
	"project_id\x18\r \x01(\tH\tR\tprojectId\x88\x01\x01\x12&\n" +
	"\fproject_name\x18\x0e \x01(\tH\n" +
	"R\vprojectName\x88\x01\x01\x12/\n" +
	"\x11project_domain_id\x18\x0f \x01(\tH\vR\x0fprojectDomainId\x88\x01\x01\x123\n" +
	"\x13project_domain_name\x18\x10 \x01(\tH\fR\x11projectDomainName\x88\x01\x01\x12$\n" +
	"\vregion_name\x18\x11 \x01(\tH\rR\n" +
	"regionName\x88\x01\x01\x12*\n" +
	"\x0econtainer_name\x18\x12 \x01(\tH\x0eR\rcontainerName\x88\x01\x01\x12-\n" +
	"\vmax_retries\x18\x13 \x01(\x05B\a\x8a\xc0\f\x03\n" +
	"\x013H\x0fR\n" +
	"maxRetries\x88\x01\x01\x12M\n" +
	"\x0fconnect_timeout\x18\x14 \x01(\v2\x19.google.protobuf.DurationB\t\x8a\xc0\f\x05\n" +
	"\x0310sR\x0econnectTimeout\x12L\n" +
	"\x0frequest_timeout\x18\x15 \x01(\v2\x19.google.protobuf.DurationB\b\x8a\xc0\f\x04\n" +
	"\x025sR\x0erequestTimeout\x12\x1f\n" +
	"\bpassword\x18\x16 \x01(\tH\x10R\bpassword\x88\x01\x01\x12 \n" +
	"\tdomain_id\x18\x17 \x01(\tH\x11R\bdomainId\x88\x01\x01\x12$\n" +
	"\vdomain_name\x18\x18 \x01(\tH\x12R\n" +
	"domainName\x88\x01\x01:\xb7\n" +
	"\xbaH\xb3\n" +
	"\x1a\x83\x02\n" +
	"\x1dusername_xor_credentials_auth\x12busername/user_id are mutually exclusive with application_credential_name/application_credential_id\x1a~!((has(this.username) || has(this.user_id)) && (has(this.application_credential_name) || has(this.application_credential_id)))\x1a\xef\x01\n" +
	"\x17require_any_credentials\x12[one of {username|user_id|application_credential_name|application_credential_id} is required\x1awhas(this.username) || has(this.user_id) || has(this.application_credential_name) || has(this.application_credential_id)\x1a\x8f\x01\n" +
	"\x10require_password\x124password is required when username or user_id is set\x1aE(has(this.username) || has(this.user_id)) ? has(this.password) : true\x1a\x92\x02\n" +
	"%require_application_credential_secret\x12napplication_credential_secret is required when application_credential_id or application_credential_name is set\x1ay(has(this.application_credential_name) || has(this.application_credential_id)) == has(this.application_credential_secret)\x1a\xd9\x01\n" +
	"\x1bautodetect_auth_version_url\x12Nwhen auth_version is set to 0 (autodetect) auth_url must end with /v2.X or /v3\x1ajthis.auth_version == 0 ? (this.auth_url.matches(r'.*/v2\\.[0-9]$') || this.auth_url.endsWith('/v3')) : true\x1a\xb5\x01\n" +
	"\x19explicit_auth_version_url\x12Lwhen auth_version is not 0 (autodetect) auth_url must not end with a version\x1aJthis.auth_version != 0 ? (!this.auth_url.matches(r'.*/v[0-9\\.]+$')) : trueB\x0f\n" +
	"\r_auth_versionB\v\n" +
	"\t_auth_urlB\v\n" +
	"\t_usernameB\x13\n" +
	"\x11_user_domain_nameB\x11\n" +
	"\x0f_user_domain_idB\n" +
	"\n" +
	"\b_user_idB\x1c\n" +
	"\x1a_application_credential_idB\x1e\n" +
	"\x1c_application_credential_nameB \n" +
	"\x1e_application_credential_secretB\r\n" +
	"\v_project_idB\x0f\n" +
	"\r_project_nameB\x14\n" +
	"\x12_project_domain_idB\x16\n" +
	"\x14_project_domain_nameB\x0e\n" +
	"\f_region_nameB\x11\n" +
	"\x0f_container_nameB\x0e\n" +
	"\f_max_retriesB\v\n" +
	"\t_passwordB\f\n" +
	"\n" +
	"_domain_idB\x0e\n" +
	"\f_domain_nameBD\x82\xc0\f\x04\b\x01\x10\x01Z:github.com/aity-cloud/monty/internal/cortex/config/storageb\x06proto3"

var (
	file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_rawDescOnce sync.Once
	file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_rawDescData []byte
)

func file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_rawDescGZIP() []byte {
	file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_rawDescOnce.Do(func() {
		file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_rawDesc), len(file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_rawDesc)))
	})
	return file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_rawDescData
}

var file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_goTypes = []any{
	(*Config)(nil),              // 0: storage.Config
	(*AzureConfig)(nil),         // 1: storage.AzureConfig
	(*FilesystemConfig)(nil),    // 2: storage.FilesystemConfig
	(*GcsConfig)(nil),           // 3: storage.GcsConfig
	(*HttpConfig)(nil),          // 4: storage.HttpConfig
	(*S3Config)(nil),            // 5: storage.S3Config
	(*S3SSEConfig)(nil),         // 6: storage.S3SSEConfig
	(*SwiftConfig)(nil),         // 7: storage.SwiftConfig
	(*durationpb.Duration)(nil), // 8: google.protobuf.Duration
}
var file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_depIdxs = []int32{
	5,  // 0: storage.Config.s3:type_name -> storage.S3Config
	3,  // 1: storage.Config.gcs:type_name -> storage.GcsConfig
	1,  // 2: storage.Config.azure:type_name -> storage.AzureConfig
	7,  // 3: storage.Config.swift:type_name -> storage.SwiftConfig
	2,  // 4: storage.Config.filesystem:type_name -> storage.FilesystemConfig
	4,  // 5: storage.AzureConfig.http:type_name -> storage.HttpConfig
	8,  // 6: storage.HttpConfig.idle_conn_timeout:type_name -> google.protobuf.Duration
	8,  // 7: storage.HttpConfig.response_header_timeout:type_name -> google.protobuf.Duration
	8,  // 8: storage.HttpConfig.tls_handshake_timeout:type_name -> google.protobuf.Duration
	8,  // 9: storage.HttpConfig.expect_continue_timeout:type_name -> google.protobuf.Duration
	6,  // 10: storage.S3Config.sse:type_name -> storage.S3SSEConfig
	4,  // 11: storage.S3Config.http:type_name -> storage.HttpConfig
	8,  // 12: storage.SwiftConfig.connect_timeout:type_name -> google.protobuf.Duration
	8,  // 13: storage.SwiftConfig.request_timeout:type_name -> google.protobuf.Duration
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_init() }
func file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_init() {
	if File_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto != nil {
		return
	}
	file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_msgTypes[0].OneofWrappers = []any{}
	file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_msgTypes[1].OneofWrappers = []any{}
	file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_msgTypes[3].OneofWrappers = []any{}
	file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_msgTypes[4].OneofWrappers = []any{}
	file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_msgTypes[5].OneofWrappers = []any{}
	file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_msgTypes[6].OneofWrappers = []any{}
	file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_msgTypes[7].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_rawDesc), len(file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_goTypes,
		DependencyIndexes: file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_depIdxs,
		MessageInfos:      file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_msgTypes,
	}.Build()
	File_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto = out.File
	file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_goTypes = nil
	file_github_com_aity_cloud_monty_internal_cortex_config_storage_storage_proto_depIdxs = nil
}
