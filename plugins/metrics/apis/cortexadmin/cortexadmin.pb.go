// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: github.com/rancher/opni/plugins/metrics/apis/cortexadmin/cortexadmin.proto

package cortexadmin

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MetricMetadata_MetricType int32

const (
	MetricMetadata_UNKNOWN        MetricMetadata_MetricType = 0
	MetricMetadata_COUNTER        MetricMetadata_MetricType = 1
	MetricMetadata_GAUGE          MetricMetadata_MetricType = 2
	MetricMetadata_HISTOGRAM      MetricMetadata_MetricType = 3
	MetricMetadata_GAUGEHISTOGRAM MetricMetadata_MetricType = 4
	MetricMetadata_SUMMARY        MetricMetadata_MetricType = 5
	MetricMetadata_INFO           MetricMetadata_MetricType = 6
	MetricMetadata_STATESET       MetricMetadata_MetricType = 7
)

// Enum value maps for MetricMetadata_MetricType.
var (
	MetricMetadata_MetricType_name = map[int32]string{
		0: "UNKNOWN",
		1: "COUNTER",
		2: "GAUGE",
		3: "HISTOGRAM",
		4: "GAUGEHISTOGRAM",
		5: "SUMMARY",
		6: "INFO",
		7: "STATESET",
	}
	MetricMetadata_MetricType_value = map[string]int32{
		"UNKNOWN":        0,
		"COUNTER":        1,
		"GAUGE":          2,
		"HISTOGRAM":      3,
		"GAUGEHISTOGRAM": 4,
		"SUMMARY":        5,
		"INFO":           6,
		"STATESET":       7,
	}
)

func (x MetricMetadata_MetricType) Enum() *MetricMetadata_MetricType {
	p := new(MetricMetadata_MetricType)
	*p = x
	return p
}

func (x MetricMetadata_MetricType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricMetadata_MetricType) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_enumTypes[0].Descriptor()
}

func (MetricMetadata_MetricType) Type() protoreflect.EnumType {
	return &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_enumTypes[0]
}

func (x MetricMetadata_MetricType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricMetadata_MetricType.Descriptor instead.
func (MetricMetadata_MetricType) EnumDescriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_rawDescGZIP(), []int{18, 0}
}

type Cluster struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClusterId     string                 `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Cluster) Reset() {
	*x = Cluster{}
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster) ProtoMessage() {}

func (x *Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster.ProtoReflect.Descriptor instead.
func (*Cluster) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_rawDescGZIP(), []int{0}
}

func (x *Cluster) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type SeriesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tenant        string                 `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	JobId         string                 `protobuf:"bytes,2,opt,name=jobId,proto3" json:"jobId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SeriesRequest) Reset() {
	*x = SeriesRequest{}
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SeriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeriesRequest) ProtoMessage() {}

func (x *SeriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeriesRequest.ProtoReflect.Descriptor instead.
func (*SeriesRequest) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_rawDescGZIP(), []int{1}
}

func (x *SeriesRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *SeriesRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

type MatcherRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tenant        string                 `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	MatchExpr     string                 `protobuf:"bytes,2,opt,name=matchExpr,proto3" json:"matchExpr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatcherRequest) Reset() {
	*x = MatcherRequest{}
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatcherRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatcherRequest) ProtoMessage() {}

func (x *MatcherRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatcherRequest.ProtoReflect.Descriptor instead.
func (*MatcherRequest) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_rawDescGZIP(), []int{2}
}

func (x *MatcherRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *MatcherRequest) GetMatchExpr() string {
	if x != nil {
		return x.MatchExpr
	}
	return ""
}

type LabelRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tenant        string                 `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	JobId         string                 `protobuf:"bytes,2,opt,name=jobId,proto3" json:"jobId,omitempty"`
	MetricName    string                 `protobuf:"bytes,3,opt,name=metricName,proto3" json:"metricName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LabelRequest) Reset() {
	*x = LabelRequest{}
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LabelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelRequest) ProtoMessage() {}

func (x *LabelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelRequest.ProtoReflect.Descriptor instead.
func (*LabelRequest) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_rawDescGZIP(), []int{3}
}

func (x *LabelRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *LabelRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *LabelRequest) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

type MetricLabels struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*LabelSet            `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetricLabels) Reset() {
	*x = MetricLabels{}
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricLabels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricLabels) ProtoMessage() {}

func (x *MetricLabels) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricLabels.ProtoReflect.Descriptor instead.
func (*MetricLabels) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_rawDescGZIP(), []int{4}
}

func (x *MetricLabels) GetItems() []*LabelSet {
	if x != nil {
		return x.Items
	}
	return nil
}

type LabelSet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Items         []string               `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LabelSet) Reset() {
	*x = LabelSet{}
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LabelSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelSet) ProtoMessage() {}

func (x *LabelSet) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelSet.ProtoReflect.Descriptor instead.
func (*LabelSet) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_rawDescGZIP(), []int{5}
}

func (x *LabelSet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LabelSet) GetItems() []string {
	if x != nil {
		return x.Items
	}
	return nil
}

type SeriesMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Description   string                 `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Type          string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Unit          string                 `protobuf:"bytes,3,opt,name=unit,proto3" json:"unit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SeriesMetadata) Reset() {
	*x = SeriesMetadata{}
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SeriesMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeriesMetadata) ProtoMessage() {}

func (x *SeriesMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeriesMetadata.ProtoReflect.Descriptor instead.
func (*SeriesMetadata) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_rawDescGZIP(), []int{6}
}

func (x *SeriesMetadata) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SeriesMetadata) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SeriesMetadata) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

type SeriesInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SeriesName    string                 `protobuf:"bytes,1,opt,name=seriesName,proto3" json:"seriesName,omitempty"`
	Metadata      *SeriesMetadata        `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SeriesInfo) Reset() {
	*x = SeriesInfo{}
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SeriesInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeriesInfo) ProtoMessage() {}

func (x *SeriesInfo) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeriesInfo.ProtoReflect.Descriptor instead.
func (*SeriesInfo) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_rawDescGZIP(), []int{7}
}

func (x *SeriesInfo) GetSeriesName() string {
	if x != nil {
		return x.SeriesName
	}
	return ""
}

func (x *SeriesInfo) GetMetadata() *SeriesMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type SeriesInfoList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*SeriesInfo          `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SeriesInfoList) Reset() {
	*x = SeriesInfoList{}
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SeriesInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeriesInfoList) ProtoMessage() {}

func (x *SeriesInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeriesInfoList.ProtoReflect.Descriptor instead.
func (*SeriesInfoList) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_rawDescGZIP(), []int{8}
}

func (x *SeriesInfoList) GetItems() []*SeriesInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

type UserIDStatsList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*UserIDStats         `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserIDStatsList) Reset() {
	*x = UserIDStatsList{}
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserIDStatsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIDStatsList) ProtoMessage() {}

func (x *UserIDStatsList) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIDStatsList.ProtoReflect.Descriptor instead.
func (*UserIDStatsList) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_rawDescGZIP(), []int{9}
}

func (x *UserIDStatsList) GetItems() []*UserIDStats {
	if x != nil {
		return x.Items
	}
	return nil
}

type UserIDStats struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	UserID            string                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	IngestionRate     float64                `protobuf:"fixed64,2,opt,name=ingestionRate,proto3" json:"ingestionRate,omitempty"`
	NumSeries         uint64                 `protobuf:"varint,3,opt,name=numSeries,proto3" json:"numSeries,omitempty"`
	APIIngestionRate  float64                `protobuf:"fixed64,4,opt,name=APIIngestionRate,proto3" json:"APIIngestionRate,omitempty"`   // title case to match cortex
	RuleIngestionRate float64                `protobuf:"fixed64,5,opt,name=RuleIngestionRate,proto3" json:"RuleIngestionRate,omitempty"` // title case to match cortex
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *UserIDStats) Reset() {
	*x = UserIDStats{}
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserIDStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIDStats) ProtoMessage() {}

func (x *UserIDStats) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIDStats.ProtoReflect.Descriptor instead.
func (*UserIDStats) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_rawDescGZIP(), []int{10}
}

func (x *UserIDStats) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UserIDStats) GetIngestionRate() float64 {
	if x != nil {
		return x.IngestionRate
	}
	return 0
}

func (x *UserIDStats) GetNumSeries() uint64 {
	if x != nil {
		return x.NumSeries
	}
	return 0
}

func (x *UserIDStats) GetAPIIngestionRate() float64 {
	if x != nil {
		return x.APIIngestionRate
	}
	return 0
}

func (x *UserIDStats) GetRuleIngestionRate() float64 {
	if x != nil {
		return x.RuleIngestionRate
	}
	return 0
}

type WriteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClusterID     string                 `protobuf:"bytes,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Timeseries    []*TimeSeries          `protobuf:"bytes,2,rep,name=timeseries,proto3" json:"timeseries,omitempty"`
	Metadata      []*MetricMetadata      `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteRequest) Reset() {
	*x = WriteRequest{}
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteRequest) ProtoMessage() {}

func (x *WriteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteRequest.ProtoReflect.Descriptor instead.
func (*WriteRequest) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_rawDescGZIP(), []int{11}
}

func (x *WriteRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *WriteRequest) GetTimeseries() []*TimeSeries {
	if x != nil {
		return x.Timeseries
	}
	return nil
}

func (x *WriteRequest) GetMetadata() []*MetricMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type MetricMetadataRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tenants       []string               `protobuf:"bytes,1,rep,name=tenants,proto3" json:"tenants,omitempty"`
	MetricName    string                 `protobuf:"bytes,2,opt,name=metricName,proto3" json:"metricName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetricMetadataRequest) Reset() {
	*x = MetricMetadataRequest{}
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricMetadataRequest) ProtoMessage() {}

func (x *MetricMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricMetadataRequest.ProtoReflect.Descriptor instead.
func (*MetricMetadataRequest) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_rawDescGZIP(), []int{12}
}

func (x *MetricMetadataRequest) GetTenants() []string {
	if x != nil {
		return x.Tenants
	}
	return nil
}

func (x *MetricMetadataRequest) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

type WriteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteResponse) Reset() {
	*x = WriteResponse{}
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteResponse) ProtoMessage() {}

func (x *WriteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteResponse.ProtoReflect.Descriptor instead.
func (*WriteResponse) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_rawDescGZIP(), []int{13}
}

type TimeSeries struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Labels        []*Label               `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
	Samples       []*Sample              `protobuf:"bytes,2,rep,name=samples,proto3" json:"samples,omitempty"`
	Exemplars     []*Exemplar            `protobuf:"bytes,3,rep,name=exemplars,proto3" json:"exemplars,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TimeSeries) Reset() {
	*x = TimeSeries{}
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeSeries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeSeries) ProtoMessage() {}

func (x *TimeSeries) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeSeries.ProtoReflect.Descriptor instead.
func (*TimeSeries) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_rawDescGZIP(), []int{14}
}

func (x *TimeSeries) GetLabels() []*Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *TimeSeries) GetSamples() []*Sample {
	if x != nil {
		return x.Samples
	}
	return nil
}

func (x *TimeSeries) GetExemplars() []*Exemplar {
	if x != nil {
		return x.Exemplars
	}
	return nil
}

type Label struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Label) Reset() {
	*x = Label{}
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Label) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Label) ProtoMessage() {}

func (x *Label) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Label.ProtoReflect.Descriptor instead.
func (*Label) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_rawDescGZIP(), []int{15}
}

func (x *Label) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Label) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Sample struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TimestampMs   int64                  `protobuf:"varint,1,opt,name=timestampMs,proto3" json:"timestampMs,omitempty"`
	Value         float64                `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Sample) Reset() {
	*x = Sample{}
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Sample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sample) ProtoMessage() {}

func (x *Sample) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sample.ProtoReflect.Descriptor instead.
func (*Sample) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_rawDescGZIP(), []int{16}
}

func (x *Sample) GetTimestampMs() int64 {
	if x != nil {
		return x.TimestampMs
	}
	return 0
}

func (x *Sample) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Exemplar struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Labels        []*Label               `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
	Value         float64                `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
	TimestampMs   int64                  `protobuf:"varint,3,opt,name=timestampMs,proto3" json:"timestampMs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Exemplar) Reset() {
	*x = Exemplar{}
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Exemplar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Exemplar) ProtoMessage() {}

func (x *Exemplar) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Exemplar.ProtoReflect.Descriptor instead.
func (*Exemplar) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_rawDescGZIP(), []int{17}
}

func (x *Exemplar) GetLabels() []*Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Exemplar) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Exemplar) GetTimestampMs() int64 {
	if x != nil {
		return x.TimestampMs
	}
	return 0
}

type MetricMetadata struct {
	state            protoimpl.MessageState    `protogen:"open.v1"`
	Type             MetricMetadata_MetricType `protobuf:"varint,1,opt,name=type,proto3,enum=cortexadmin.MetricMetadata_MetricType" json:"type,omitempty"`
	MetricFamilyName string                    `protobuf:"bytes,2,opt,name=metricFamilyName,proto3" json:"metricFamilyName,omitempty"`
	Help             string                    `protobuf:"bytes,4,opt,name=help,proto3" json:"help,omitempty"`
	Unit             string                    `protobuf:"bytes,5,opt,name=unit,proto3" json:"unit,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *MetricMetadata) Reset() {
	*x = MetricMetadata{}
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricMetadata) ProtoMessage() {}

func (x *MetricMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricMetadata.ProtoReflect.Descriptor instead.
func (*MetricMetadata) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_rawDescGZIP(), []int{18}
}

func (x *MetricMetadata) GetType() MetricMetadata_MetricType {
	if x != nil {
		return x.Type
	}
	return MetricMetadata_UNKNOWN
}

func (x *MetricMetadata) GetMetricFamilyName() string {
	if x != nil {
		return x.MetricFamilyName
	}
	return ""
}

func (x *MetricMetadata) GetHelp() string {
	if x != nil {
		return x.Help
	}
	return ""
}

func (x *MetricMetadata) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

type QueryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tenants       []string               `protobuf:"bytes,1,rep,name=tenants,proto3" json:"tenants,omitempty"`
	Query         string                 `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryRequest) Reset() {
	*x = QueryRequest{}
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequest) ProtoMessage() {}

func (x *QueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRequest.ProtoReflect.Descriptor instead.
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_rawDescGZIP(), []int{19}
}

func (x *QueryRequest) GetTenants() []string {
	if x != nil {
		return x.Tenants
	}
	return nil
}

func (x *QueryRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type QueryRangeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tenants       []string               `protobuf:"bytes,1,rep,name=tenants,proto3" json:"tenants,omitempty"`
	Query         string                 `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	Start         *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start,proto3" json:"start,omitempty"`
	End           *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end,proto3" json:"end,omitempty"`
	Step          *durationpb.Duration   `protobuf:"bytes,5,opt,name=step,proto3" json:"step,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryRangeRequest) Reset() {
	*x = QueryRangeRequest{}
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRangeRequest) ProtoMessage() {}

func (x *QueryRangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRangeRequest.ProtoReflect.Descriptor instead.
func (*QueryRangeRequest) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_rawDescGZIP(), []int{20}
}

func (x *QueryRangeRequest) GetTenants() []string {
	if x != nil {
		return x.Tenants
	}
	return nil
}

func (x *QueryRangeRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *QueryRangeRequest) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *QueryRangeRequest) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *QueryRangeRequest) GetStep() *durationpb.Duration {
	if x != nil {
		return x.Step
	}
	return nil
}

type QueryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryResponse) Reset() {
	*x = QueryResponse{}
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResponse) ProtoMessage() {}

func (x *QueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResponse.ProtoReflect.Descriptor instead.
func (*QueryResponse) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_rawDescGZIP(), []int{21}
}

func (x *QueryResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ConfigRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ConfigModes   []string               `protobuf:"bytes,1,rep,name=configModes,proto3" json:"configModes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigRequest) Reset() {
	*x = ConfigRequest{}
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest) ProtoMessage() {}

func (x *ConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest.ProtoReflect.Descriptor instead.
func (*ConfigRequest) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_rawDescGZIP(), []int{22}
}

func (x *ConfigRequest) GetConfigModes() []string {
	if x != nil {
		return x.ConfigModes
	}
	return nil
}

type ConfigResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ConfigYaml    []string               `protobuf:"bytes,4,rep,name=configYaml,proto3" json:"configYaml,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigResponse) Reset() {
	*x = ConfigResponse{}
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigResponse) ProtoMessage() {}

func (x *ConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigResponse.ProtoReflect.Descriptor instead.
func (*ConfigResponse) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_rawDescGZIP(), []int{23}
}

func (x *ConfigResponse) GetConfigYaml() []string {
	if x != nil {
		return x.ConfigYaml
	}
	return nil
}

type LoadRuleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClusterId     string                 `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Namespace     string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"` // defaults to "default"
	YamlContent   []byte                 `protobuf:"bytes,3,opt,name=yamlContent,proto3" json:"yamlContent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoadRuleRequest) Reset() {
	*x = LoadRuleRequest{}
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoadRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadRuleRequest) ProtoMessage() {}

func (x *LoadRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadRuleRequest.ProtoReflect.Descriptor instead.
func (*LoadRuleRequest) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_rawDescGZIP(), []int{24}
}

func (x *LoadRuleRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *LoadRuleRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *LoadRuleRequest) GetYamlContent() []byte {
	if x != nil {
		return x.YamlContent
	}
	return nil
}

type DeleteRuleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClusterId     string                 `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Namespace     string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	GroupName     string                 `protobuf:"bytes,3,opt,name=groupName,proto3" json:"groupName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteRuleRequest) Reset() {
	*x = DeleteRuleRequest{}
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRuleRequest) ProtoMessage() {}

func (x *DeleteRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRuleRequest.ProtoReflect.Descriptor instead.
func (*DeleteRuleRequest) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_rawDescGZIP(), []int{25}
}

func (x *DeleteRuleRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeleteRuleRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DeleteRuleRequest) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

type GetRuleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClusterId     string                 `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Namespace     string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	GroupName     string                 `protobuf:"bytes,3,opt,name=groupName,proto3" json:"groupName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRuleRequest) Reset() {
	*x = GetRuleRequest{}
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRuleRequest) ProtoMessage() {}

func (x *GetRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRuleRequest.ProtoReflect.Descriptor instead.
func (*GetRuleRequest) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_rawDescGZIP(), []int{26}
}

func (x *GetRuleRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *GetRuleRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetRuleRequest) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

type ListRulesRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ClusterId       []string               `protobuf:"bytes,1,rep,name=clusterId,proto3" json:"clusterId,omitempty"`
	RuleType        []string               `protobuf:"bytes,2,rep,name=ruleType,proto3" json:"ruleType,omitempty"`
	HealthFilter    []string               `protobuf:"bytes,3,rep,name=healthFilter,proto3" json:"healthFilter,omitempty"`
	StateFilter     []string               `protobuf:"bytes,4,rep,name=stateFilter,proto3" json:"stateFilter,omitempty"`
	RuleNameRegexp  string                 `protobuf:"bytes,5,opt,name=ruleNameRegexp,proto3" json:"ruleNameRegexp,omitempty"`
	GroupNameRegexp string                 `protobuf:"bytes,6,opt,name=groupNameRegexp,proto3" json:"groupNameRegexp,omitempty"`
	ListInvalid     *bool                  `protobuf:"varint,7,opt,name=listInvalid,proto3,oneof" json:"listInvalid,omitempty"`
	RequestAll      *bool                  `protobuf:"varint,8,opt,name=requestAll,proto3,oneof" json:"requestAll,omitempty"`
	NamespaceRegexp string                 `protobuf:"bytes,9,opt,name=namespaceRegexp,proto3" json:"namespaceRegexp,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ListRulesRequest) Reset() {
	*x = ListRulesRequest{}
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRulesRequest) ProtoMessage() {}

func (x *ListRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRulesRequest.ProtoReflect.Descriptor instead.
func (*ListRulesRequest) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_rawDescGZIP(), []int{27}
}

func (x *ListRulesRequest) GetClusterId() []string {
	if x != nil {
		return x.ClusterId
	}
	return nil
}

func (x *ListRulesRequest) GetRuleType() []string {
	if x != nil {
		return x.RuleType
	}
	return nil
}

func (x *ListRulesRequest) GetHealthFilter() []string {
	if x != nil {
		return x.HealthFilter
	}
	return nil
}

func (x *ListRulesRequest) GetStateFilter() []string {
	if x != nil {
		return x.StateFilter
	}
	return nil
}

func (x *ListRulesRequest) GetRuleNameRegexp() string {
	if x != nil {
		return x.RuleNameRegexp
	}
	return ""
}

func (x *ListRulesRequest) GetGroupNameRegexp() string {
	if x != nil {
		return x.GroupNameRegexp
	}
	return ""
}

func (x *ListRulesRequest) GetListInvalid() bool {
	if x != nil && x.ListInvalid != nil {
		return *x.ListInvalid
	}
	return false
}

func (x *ListRulesRequest) GetRequestAll() bool {
	if x != nil && x.RequestAll != nil {
		return *x.RequestAll
	}
	return false
}

func (x *ListRulesRequest) GetNamespaceRegexp() string {
	if x != nil {
		return x.NamespaceRegexp
	}
	return ""
}

// matches the return of cortex ruler api
// https://github.com/cortexproject/cortex/blob/c0e4545fd26f33ca5cc3323ee48e4c2ccd182b83/pkg/ruler/api.go#L215
type ListRulesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Data          *RuleGroups            `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRulesResponse) Reset() {
	*x = ListRulesResponse{}
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRulesResponse) ProtoMessage() {}

func (x *ListRulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRulesResponse.ProtoReflect.Descriptor instead.
func (*ListRulesResponse) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_rawDescGZIP(), []int{28}
}

func (x *ListRulesResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ListRulesResponse) GetData() *RuleGroups {
	if x != nil {
		return x.Data
	}
	return nil
}

type RuleGroups struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Groups        []*RuleGroup           `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RuleGroups) Reset() {
	*x = RuleGroups{}
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuleGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleGroups) ProtoMessage() {}

func (x *RuleGroups) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleGroups.ProtoReflect.Descriptor instead.
func (*RuleGroups) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_rawDescGZIP(), []int{29}
}

func (x *RuleGroups) GetGroups() []*RuleGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

type RuleGroup struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Name     string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	File     string                 `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`
	Rules    []*Rule                `protobuf:"bytes,3,rep,name=rules,proto3" json:"rules,omitempty"`
	Interval float64                `protobuf:"fixed64,4,opt,name=interval,proto3" json:"interval,omitempty"`
	// Note : string instead of timestamp to preserve compatibility with native prometheus api return value
	LastEvaluation string  `protobuf:"bytes,5,opt,name=lastEvaluation,proto3" json:"lastEvaluation,omitempty"`
	EvaluationTime float64 `protobuf:"fixed64,6,opt,name=evaluationTime,proto3" json:"evaluationTime,omitempty"`
	// opni specific field
	ClusterId     string `protobuf:"bytes,7,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RuleGroup) Reset() {
	*x = RuleGroup{}
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuleGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleGroup) ProtoMessage() {}

func (x *RuleGroup) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleGroup.ProtoReflect.Descriptor instead.
func (*RuleGroup) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_rawDescGZIP(), []int{30}
}

func (x *RuleGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RuleGroup) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *RuleGroup) GetRules() []*Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *RuleGroup) GetInterval() float64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *RuleGroup) GetLastEvaluation() string {
	if x != nil {
		return x.LastEvaluation
	}
	return ""
}

func (x *RuleGroup) GetEvaluationTime() float64 {
	if x != nil {
		return x.EvaluationTime
	}
	return 0
}

func (x *RuleGroup) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

// combination of alerting and recording rule (alerting rule is a superset of recording)
type Rule struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	State       string                 `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Name        string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Query       string                 `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	Duration    float64                `protobuf:"fixed64,4,opt,name=duration,proto3" json:"duration,omitempty"`
	Labels      map[string]string      `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Annotations map[string]string      `protobuf:"bytes,6,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Health      string                 `protobuf:"bytes,7,opt,name=health,proto3" json:"health,omitempty"`
	Alerts      []*Alert               `protobuf:"bytes,8,rep,name=alerts,proto3" json:"alerts,omitempty"`
	LastError   string                 `protobuf:"bytes,9,opt,name=lastError,proto3" json:"lastError,omitempty"`
	Type        string                 `protobuf:"bytes,10,opt,name=type,proto3" json:"type,omitempty"`
	// Note : string instead of timestamp to preserve compatibility with native prometheus api return value
	LastEvaluation string  `protobuf:"bytes,11,opt,name=lastEvaluation,proto3" json:"lastEvaluation,omitempty"`
	EvaluationTime float64 `protobuf:"fixed64,12,opt,name=evaluationTime,proto3" json:"evaluationTime,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Rule) Reset() {
	*x = Rule{}
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule) ProtoMessage() {}

func (x *Rule) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule.ProtoReflect.Descriptor instead.
func (*Rule) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_rawDescGZIP(), []int{31}
}

func (x *Rule) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Rule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Rule) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *Rule) GetDuration() float64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Rule) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Rule) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *Rule) GetHealth() string {
	if x != nil {
		return x.Health
	}
	return ""
}

func (x *Rule) GetAlerts() []*Alert {
	if x != nil {
		return x.Alerts
	}
	return nil
}

func (x *Rule) GetLastError() string {
	if x != nil {
		return x.LastError
	}
	return ""
}

func (x *Rule) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Rule) GetLastEvaluation() string {
	if x != nil {
		return x.LastEvaluation
	}
	return ""
}

func (x *Rule) GetEvaluationTime() float64 {
	if x != nil {
		return x.EvaluationTime
	}
	return 0
}

type Alert struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	Labels      map[string]string      `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Annotations map[string]string      `protobuf:"bytes,2,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	State       string                 `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	// Note : string instead of timestamp to preserve compatibility with native prometheus api return value
	ActiveAt      string `protobuf:"bytes,4,opt,name=activeAt,proto3" json:"activeAt,omitempty"`
	Value         string `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Alert) Reset() {
	*x = Alert{}
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Alert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alert) ProtoMessage() {}

func (x *Alert) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alert.ProtoReflect.Descriptor instead.
func (*Alert) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_rawDescGZIP(), []int{32}
}

func (x *Alert) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Alert) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *Alert) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Alert) GetActiveAt() string {
	if x != nil {
		return x.ActiveAt
	}
	return ""
}

func (x *Alert) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto protoreflect.FileDescriptor

const file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_rawDesc = "" +
	"\n" +
	"Jgithub.com/rancher/opni/plugins/metrics/apis/cortexadmin/cortexadmin.proto\x12\vcortexadmin\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1bgoogle/protobuf/empty.proto\x1a\x1cgoogle/api/annotations.proto\x1aEgithub.com/rancher/opni/plugins/metrics/apis/cortexadmin/status.proto\"'\n" +
	"\aCluster\x12\x1c\n" +
	"\tclusterId\x18\x01 \x01(\tR\tclusterId\"=\n" +
	"\rSeriesRequest\x12\x16\n" +
	"\x06tenant\x18\x01 \x01(\tR\x06tenant\x12\x14\n" +
	"\x05jobId\x18\x02 \x01(\tR\x05jobId\"F\n" +
	"\x0eMatcherRequest\x12\x16\n" +
	"\x06tenant\x18\x01 \x01(\tR\x06tenant\x12\x1c\n" +
	"\tmatchExpr\x18\x02 \x01(\tR\tmatchExpr\"\\\n" +
	"\fLabelRequest\x12\x16\n" +
	"\x06tenant\x18\x01 \x01(\tR\x06tenant\x12\x14\n" +
	"\x05jobId\x18\x02 \x01(\tR\x05jobId\x12\x1e\n" +
	"\n" +
	"metricName\x18\x03 \x01(\tR\n" +
	"metricName\";\n" +
	"\fMetricLabels\x12+\n" +
	"\x05items\x18\x01 \x03(\v2\x15.cortexadmin.LabelSetR\x05items\"4\n" +
	"\bLabelSet\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05items\x18\x02 \x03(\tR\x05items\"Z\n" +
	"\x0eSeriesMetadata\x12 \n" +
	"\vdescription\x18\x01 \x01(\tR\vdescription\x12\x12\n" +
	"\x04type\x18\x02 \x01(\tR\x04type\x12\x12\n" +
	"\x04unit\x18\x03 \x01(\tR\x04unit\"e\n" +
	"\n" +
	"SeriesInfo\x12\x1e\n" +
	"\n" +
	"seriesName\x18\x01 \x01(\tR\n" +
	"seriesName\x127\n" +
	"\bmetadata\x18\x02 \x01(\v2\x1b.cortexadmin.SeriesMetadataR\bmetadata\"?\n" +
	"\x0eSeriesInfoList\x12-\n" +
	"\x05items\x18\x01 \x03(\v2\x17.cortexadmin.SeriesInfoR\x05items\"A\n" +
	"\x0fUserIDStatsList\x12.\n" +
	"\x05items\x18\x02 \x03(\v2\x18.cortexadmin.UserIDStatsR\x05items\"\xc3\x01\n" +
	"\vUserIDStats\x12\x16\n" +
	"\x06userID\x18\x01 \x01(\tR\x06userID\x12$\n" +
	"\ringestionRate\x18\x02 \x01(\x01R\ringestionRate\x12\x1c\n" +
	"\tnumSeries\x18\x03 \x01(\x04R\tnumSeries\x12*\n" +
	"\x10APIIngestionRate\x18\x04 \x01(\x01R\x10APIIngestionRate\x12,\n" +
	"\x11RuleIngestionRate\x18\x05 \x01(\x01R\x11RuleIngestionRate\"\x9e\x01\n" +
	"\fWriteRequest\x12\x1c\n" +
	"\tclusterID\x18\x01 \x01(\tR\tclusterID\x127\n" +
	"\n" +
	"timeseries\x18\x02 \x03(\v2\x17.cortexadmin.TimeSeriesR\n" +
	"timeseries\x127\n" +
	"\bmetadata\x18\x03 \x03(\v2\x1b.cortexadmin.MetricMetadataR\bmetadata\"Q\n" +
	"\x15MetricMetadataRequest\x12\x18\n" +
	"\atenants\x18\x01 \x03(\tR\atenants\x12\x1e\n" +
	"\n" +
	"metricName\x18\x02 \x01(\tR\n" +
	"metricName\"\x0f\n" +
	"\rWriteResponse\"\x9c\x01\n" +
	"\n" +
	"TimeSeries\x12*\n" +
	"\x06labels\x18\x01 \x03(\v2\x12.cortexadmin.LabelR\x06labels\x12-\n" +
	"\asamples\x18\x02 \x03(\v2\x13.cortexadmin.SampleR\asamples\x123\n" +
	"\texemplars\x18\x03 \x03(\v2\x15.cortexadmin.ExemplarR\texemplars\"1\n" +
	"\x05Label\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\"@\n" +
	"\x06Sample\x12 \n" +
	"\vtimestampMs\x18\x01 \x01(\x03R\vtimestampMs\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x01R\x05value\"n\n" +
	"\bExemplar\x12*\n" +
	"\x06labels\x18\x01 \x03(\v2\x12.cortexadmin.LabelR\x06labels\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x01R\x05value\x12 \n" +
	"\vtimestampMs\x18\x03 \x01(\x03R\vtimestampMs\"\x9b\x02\n" +
	"\x0eMetricMetadata\x12:\n" +
	"\x04type\x18\x01 \x01(\x0e2&.cortexadmin.MetricMetadata.MetricTypeR\x04type\x12*\n" +
	"\x10metricFamilyName\x18\x02 \x01(\tR\x10metricFamilyName\x12\x12\n" +
	"\x04help\x18\x04 \x01(\tR\x04help\x12\x12\n" +
	"\x04unit\x18\x05 \x01(\tR\x04unit\"y\n" +
	"\n" +
	"MetricType\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\v\n" +
	"\aCOUNTER\x10\x01\x12\t\n" +
	"\x05GAUGE\x10\x02\x12\r\n" +
	"\tHISTOGRAM\x10\x03\x12\x12\n" +
	"\x0eGAUGEHISTOGRAM\x10\x04\x12\v\n" +
	"\aSUMMARY\x10\x05\x12\b\n" +
	"\x04INFO\x10\x06\x12\f\n" +
	"\bSTATESET\x10\a\">\n" +
	"\fQueryRequest\x12\x18\n" +
	"\atenants\x18\x01 \x03(\tR\atenants\x12\x14\n" +
	"\x05query\x18\x02 \x01(\tR\x05query\"\xd2\x01\n" +
	"\x11QueryRangeRequest\x12\x18\n" +
	"\atenants\x18\x01 \x03(\tR\atenants\x12\x14\n" +
	"\x05query\x18\x02 \x01(\tR\x05query\x120\n" +
	"\x05start\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\x05start\x12,\n" +
	"\x03end\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\x03end\x12-\n" +
	"\x04step\x18\x05 \x01(\v2\x19.google.protobuf.DurationR\x04step\"#\n" +
	"\rQueryResponse\x12\x12\n" +
	"\x04data\x18\x02 \x01(\fR\x04data\"1\n" +
	"\rConfigRequest\x12 \n" +
	"\vconfigModes\x18\x01 \x03(\tR\vconfigModes\"0\n" +
	"\x0eConfigResponse\x12\x1e\n" +
	"\n" +
	"configYaml\x18\x04 \x03(\tR\n" +
	"configYaml\"o\n" +
	"\x0fLoadRuleRequest\x12\x1c\n" +
	"\tclusterId\x18\x01 \x01(\tR\tclusterId\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\x12 \n" +
	"\vyamlContent\x18\x03 \x01(\fR\vyamlContent\"m\n" +
	"\x11DeleteRuleRequest\x12\x1c\n" +
	"\tclusterId\x18\x01 \x01(\tR\tclusterId\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\x12\x1c\n" +
	"\tgroupName\x18\x03 \x01(\tR\tgroupName\"j\n" +
	"\x0eGetRuleRequest\x12\x1c\n" +
	"\tclusterId\x18\x01 \x01(\tR\tclusterId\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\x12\x1c\n" +
	"\tgroupName\x18\x03 \x01(\tR\tgroupName\"\xf9\x02\n" +
	"\x10ListRulesRequest\x12\x1c\n" +
	"\tclusterId\x18\x01 \x03(\tR\tclusterId\x12\x1a\n" +
	"\bruleType\x18\x02 \x03(\tR\bruleType\x12\"\n" +
	"\fhealthFilter\x18\x03 \x03(\tR\fhealthFilter\x12 \n" +
	"\vstateFilter\x18\x04 \x03(\tR\vstateFilter\x12&\n" +
	"\x0eruleNameRegexp\x18\x05 \x01(\tR\x0eruleNameRegexp\x12(\n" +
	"\x0fgroupNameRegexp\x18\x06 \x01(\tR\x0fgroupNameRegexp\x12%\n" +
	"\vlistInvalid\x18\a \x01(\bH\x00R\vlistInvalid\x88\x01\x01\x12#\n" +
	"\n" +
	"requestAll\x18\b \x01(\bH\x01R\n" +
	"requestAll\x88\x01\x01\x12(\n" +
	"\x0fnamespaceRegexp\x18\t \x01(\tR\x0fnamespaceRegexpB\x0e\n" +
	"\f_listInvalidB\r\n" +
	"\v_requestAll\"X\n" +
	"\x11ListRulesResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\tR\x06status\x12+\n" +
	"\x04data\x18\x02 \x01(\v2\x17.cortexadmin.RuleGroupsR\x04data\"<\n" +
	"\n" +
	"RuleGroups\x12.\n" +
	"\x06groups\x18\x01 \x03(\v2\x16.cortexadmin.RuleGroupR\x06groups\"\xe6\x01\n" +
	"\tRuleGroup\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04file\x18\x02 \x01(\tR\x04file\x12'\n" +
	"\x05rules\x18\x03 \x03(\v2\x11.cortexadmin.RuleR\x05rules\x12\x1a\n" +
	"\binterval\x18\x04 \x01(\x01R\binterval\x12&\n" +
	"\x0elastEvaluation\x18\x05 \x01(\tR\x0elastEvaluation\x12&\n" +
	"\x0eevaluationTime\x18\x06 \x01(\x01R\x0eevaluationTime\x12\x1c\n" +
	"\tclusterId\x18\a \x01(\tR\tclusterId\"\xa0\x04\n" +
	"\x04Rule\x12\x14\n" +
	"\x05state\x18\x01 \x01(\tR\x05state\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05query\x18\x03 \x01(\tR\x05query\x12\x1a\n" +
	"\bduration\x18\x04 \x01(\x01R\bduration\x125\n" +
	"\x06labels\x18\x05 \x03(\v2\x1d.cortexadmin.Rule.LabelsEntryR\x06labels\x12D\n" +
	"\vannotations\x18\x06 \x03(\v2\".cortexadmin.Rule.AnnotationsEntryR\vannotations\x12\x16\n" +
	"\x06health\x18\a \x01(\tR\x06health\x12*\n" +
	"\x06alerts\x18\b \x03(\v2\x12.cortexadmin.AlertR\x06alerts\x12\x1c\n" +
	"\tlastError\x18\t \x01(\tR\tlastError\x12\x12\n" +
	"\x04type\x18\n" +
	" \x01(\tR\x04type\x12&\n" +
	"\x0elastEvaluation\x18\v \x01(\tR\x0elastEvaluation\x12&\n" +
	"\x0eevaluationTime\x18\f \x01(\x01R\x0eevaluationTime\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a>\n" +
	"\x10AnnotationsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xc9\x02\n" +
	"\x05Alert\x126\n" +
	"\x06labels\x18\x01 \x03(\v2\x1e.cortexadmin.Alert.LabelsEntryR\x06labels\x12E\n" +
	"\vannotations\x18\x02 \x03(\v2#.cortexadmin.Alert.AnnotationsEntryR\vannotations\x12\x14\n" +
	"\x05state\x18\x03 \x01(\tR\x05state\x12\x1a\n" +
	"\bactiveAt\x18\x04 \x01(\tR\bactiveAt\x12\x14\n" +
	"\x05value\x18\x05 \x01(\tR\x05value\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a>\n" +
	"\x10AnnotationsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x012\xbb\v\n" +
	"\vCortexAdmin\x12]\n" +
	"\fAllUserStats\x12\x16.google.protobuf.Empty\x1a\x1c.cortexadmin.UserIDStatsList\"\x17\x82\xd3\xe4\x93\x02\x11\x12\x0f/all_user_stats\x12`\n" +
	"\fWriteMetrics\x12\x19.cortexadmin.WriteRequest\x1a\x1a.cortexadmin.WriteResponse\"\x19\x82\xd3\xe4\x93\x02\x13:\x01*\"\x0e/write_metrics\x12[\n" +
	"\x05Query\x12\x19.cortexadmin.QueryRequest\x1a\x1a.cortexadmin.QueryResponse\"\x1b\x82\xd3\xe4\x93\x02\x15Z\v:\x01*\"\x06/query\x12\x06/query\x12q\n" +
	"\n" +
	"QueryRange\x12\x1e.cortexadmin.QueryRangeRequest\x1a\x1a.cortexadmin.QueryResponse\"'\x82\xd3\xe4\x93\x02!Z\x11:\x01*\"\f/query_range\x12\f/query_range\x12j\n" +
	"\aGetRule\x12\x1b.cortexadmin.GetRuleRequest\x1a\x1a.cortexadmin.QueryResponse\"&\x82\xd3\xe4\x93\x02 \x12\x1e/rules/{namespace}/{groupName}\x12g\n" +
	"\x11GetMetricMetadata\x12\".cortexadmin.MetricMetadataRequest\x1a\x1b.cortexadmin.MetricMetadata\"\x11\x82\xd3\xe4\x93\x02\v\x12\t/metadata\x12Z\n" +
	"\tListRules\x12\x1d.cortexadmin.ListRulesRequest\x1a\x1e.cortexadmin.ListRulesResponse\"\x0e\x82\xd3\xe4\x93\x02\b\x12\x06/rules\x12Q\n" +
	"\tLoadRules\x12\x1c.cortexadmin.LoadRuleRequest\x1a\x16.google.protobuf.Empty\"\x0e\x82\xd3\xe4\x93\x02\b\"\x06/rules\x12`\n" +
	"\n" +
	"DeleteRule\x12\x1e.cortexadmin.DeleteRuleRequest\x1a\x16.google.protobuf.Empty\"\x1a\x82\xd3\xe4\x93\x02\x14*\x12/rules/{groupName}\x12T\n" +
	"\vFlushBlocks\x12\x16.google.protobuf.Empty\x1a\x16.google.protobuf.Empty\"\x15\x82\xd3\xe4\x93\x02\x0f\"\r/flush_blocks\x12e\n" +
	"\x10GetSeriesMetrics\x12\x1a.cortexadmin.SeriesRequest\x1a\x1b.cortexadmin.SeriesInfoList\"\x18\x82\xd3\xe4\x93\x02\x12\x12\x10/series/metadata\x12b\n" +
	"\x12GetMetricLabelSets\x12\x19.cortexadmin.LabelRequest\x1a\x19.cortexadmin.MetricLabels\"\x16\x82\xd3\xe4\x93\x02\x10\x12\x0e/series/labels\x12U\n" +
	"\x0fGetCortexStatus\x12\x16.google.protobuf.Empty\x1a\x19.cortexadmin.CortexStatus\"\x0f\x82\xd3\xe4\x93\x02\t\x12\a/status\x12[\n" +
	"\x0fGetCortexConfig\x12\x1a.cortexadmin.ConfigRequest\x1a\x1b.cortexadmin.ConfigResponse\"\x0f\x82\xd3\xe4\x93\x02\t\x12\a/config\x12`\n" +
	"\x10ExtractRawSeries\x12\x1b.cortexadmin.MatcherRequest\x1a\x1a.cortexadmin.QueryResponse\"\x13\x82\xd3\xe4\x93\x02\r\x12\v/series/rawB:Z8github.com/rancher/opni/plugins/metrics/apis/cortexadminb\x06proto3"

var (
	file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_rawDescOnce sync.Once
	file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_rawDescData []byte
)

func file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_rawDescGZIP() []byte {
	file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_rawDescOnce.Do(func() {
		file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_rawDesc), len(file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_rawDesc)))
	})
	return file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_rawDescData
}

var file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_goTypes = []any{
	(MetricMetadata_MetricType)(0), // 0: cortexadmin.MetricMetadata.MetricType
	(*Cluster)(nil),                // 1: cortexadmin.Cluster
	(*SeriesRequest)(nil),          // 2: cortexadmin.SeriesRequest
	(*MatcherRequest)(nil),         // 3: cortexadmin.MatcherRequest
	(*LabelRequest)(nil),           // 4: cortexadmin.LabelRequest
	(*MetricLabels)(nil),           // 5: cortexadmin.MetricLabels
	(*LabelSet)(nil),               // 6: cortexadmin.LabelSet
	(*SeriesMetadata)(nil),         // 7: cortexadmin.SeriesMetadata
	(*SeriesInfo)(nil),             // 8: cortexadmin.SeriesInfo
	(*SeriesInfoList)(nil),         // 9: cortexadmin.SeriesInfoList
	(*UserIDStatsList)(nil),        // 10: cortexadmin.UserIDStatsList
	(*UserIDStats)(nil),            // 11: cortexadmin.UserIDStats
	(*WriteRequest)(nil),           // 12: cortexadmin.WriteRequest
	(*MetricMetadataRequest)(nil),  // 13: cortexadmin.MetricMetadataRequest
	(*WriteResponse)(nil),          // 14: cortexadmin.WriteResponse
	(*TimeSeries)(nil),             // 15: cortexadmin.TimeSeries
	(*Label)(nil),                  // 16: cortexadmin.Label
	(*Sample)(nil),                 // 17: cortexadmin.Sample
	(*Exemplar)(nil),               // 18: cortexadmin.Exemplar
	(*MetricMetadata)(nil),         // 19: cortexadmin.MetricMetadata
	(*QueryRequest)(nil),           // 20: cortexadmin.QueryRequest
	(*QueryRangeRequest)(nil),      // 21: cortexadmin.QueryRangeRequest
	(*QueryResponse)(nil),          // 22: cortexadmin.QueryResponse
	(*ConfigRequest)(nil),          // 23: cortexadmin.ConfigRequest
	(*ConfigResponse)(nil),         // 24: cortexadmin.ConfigResponse
	(*LoadRuleRequest)(nil),        // 25: cortexadmin.LoadRuleRequest
	(*DeleteRuleRequest)(nil),      // 26: cortexadmin.DeleteRuleRequest
	(*GetRuleRequest)(nil),         // 27: cortexadmin.GetRuleRequest
	(*ListRulesRequest)(nil),       // 28: cortexadmin.ListRulesRequest
	(*ListRulesResponse)(nil),      // 29: cortexadmin.ListRulesResponse
	(*RuleGroups)(nil),             // 30: cortexadmin.RuleGroups
	(*RuleGroup)(nil),              // 31: cortexadmin.RuleGroup
	(*Rule)(nil),                   // 32: cortexadmin.Rule
	(*Alert)(nil),                  // 33: cortexadmin.Alert
	nil,                            // 34: cortexadmin.Rule.LabelsEntry
	nil,                            // 35: cortexadmin.Rule.AnnotationsEntry
	nil,                            // 36: cortexadmin.Alert.LabelsEntry
	nil,                            // 37: cortexadmin.Alert.AnnotationsEntry
	(*timestamppb.Timestamp)(nil),  // 38: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),    // 39: google.protobuf.Duration
	(*emptypb.Empty)(nil),          // 40: google.protobuf.Empty
	(*CortexStatus)(nil),           // 41: cortexadmin.CortexStatus
}
var file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_depIdxs = []int32{
	6,  // 0: cortexadmin.MetricLabels.items:type_name -> cortexadmin.LabelSet
	7,  // 1: cortexadmin.SeriesInfo.metadata:type_name -> cortexadmin.SeriesMetadata
	8,  // 2: cortexadmin.SeriesInfoList.items:type_name -> cortexadmin.SeriesInfo
	11, // 3: cortexadmin.UserIDStatsList.items:type_name -> cortexadmin.UserIDStats
	15, // 4: cortexadmin.WriteRequest.timeseries:type_name -> cortexadmin.TimeSeries
	19, // 5: cortexadmin.WriteRequest.metadata:type_name -> cortexadmin.MetricMetadata
	16, // 6: cortexadmin.TimeSeries.labels:type_name -> cortexadmin.Label
	17, // 7: cortexadmin.TimeSeries.samples:type_name -> cortexadmin.Sample
	18, // 8: cortexadmin.TimeSeries.exemplars:type_name -> cortexadmin.Exemplar
	16, // 9: cortexadmin.Exemplar.labels:type_name -> cortexadmin.Label
	0,  // 10: cortexadmin.MetricMetadata.type:type_name -> cortexadmin.MetricMetadata.MetricType
	38, // 11: cortexadmin.QueryRangeRequest.start:type_name -> google.protobuf.Timestamp
	38, // 12: cortexadmin.QueryRangeRequest.end:type_name -> google.protobuf.Timestamp
	39, // 13: cortexadmin.QueryRangeRequest.step:type_name -> google.protobuf.Duration
	30, // 14: cortexadmin.ListRulesResponse.data:type_name -> cortexadmin.RuleGroups
	31, // 15: cortexadmin.RuleGroups.groups:type_name -> cortexadmin.RuleGroup
	32, // 16: cortexadmin.RuleGroup.rules:type_name -> cortexadmin.Rule
	34, // 17: cortexadmin.Rule.labels:type_name -> cortexadmin.Rule.LabelsEntry
	35, // 18: cortexadmin.Rule.annotations:type_name -> cortexadmin.Rule.AnnotationsEntry
	33, // 19: cortexadmin.Rule.alerts:type_name -> cortexadmin.Alert
	36, // 20: cortexadmin.Alert.labels:type_name -> cortexadmin.Alert.LabelsEntry
	37, // 21: cortexadmin.Alert.annotations:type_name -> cortexadmin.Alert.AnnotationsEntry
	40, // 22: cortexadmin.CortexAdmin.AllUserStats:input_type -> google.protobuf.Empty
	12, // 23: cortexadmin.CortexAdmin.WriteMetrics:input_type -> cortexadmin.WriteRequest
	20, // 24: cortexadmin.CortexAdmin.Query:input_type -> cortexadmin.QueryRequest
	21, // 25: cortexadmin.CortexAdmin.QueryRange:input_type -> cortexadmin.QueryRangeRequest
	27, // 26: cortexadmin.CortexAdmin.GetRule:input_type -> cortexadmin.GetRuleRequest
	13, // 27: cortexadmin.CortexAdmin.GetMetricMetadata:input_type -> cortexadmin.MetricMetadataRequest
	28, // 28: cortexadmin.CortexAdmin.ListRules:input_type -> cortexadmin.ListRulesRequest
	25, // 29: cortexadmin.CortexAdmin.LoadRules:input_type -> cortexadmin.LoadRuleRequest
	26, // 30: cortexadmin.CortexAdmin.DeleteRule:input_type -> cortexadmin.DeleteRuleRequest
	40, // 31: cortexadmin.CortexAdmin.FlushBlocks:input_type -> google.protobuf.Empty
	2,  // 32: cortexadmin.CortexAdmin.GetSeriesMetrics:input_type -> cortexadmin.SeriesRequest
	4,  // 33: cortexadmin.CortexAdmin.GetMetricLabelSets:input_type -> cortexadmin.LabelRequest
	40, // 34: cortexadmin.CortexAdmin.GetCortexStatus:input_type -> google.protobuf.Empty
	23, // 35: cortexadmin.CortexAdmin.GetCortexConfig:input_type -> cortexadmin.ConfigRequest
	3,  // 36: cortexadmin.CortexAdmin.ExtractRawSeries:input_type -> cortexadmin.MatcherRequest
	10, // 37: cortexadmin.CortexAdmin.AllUserStats:output_type -> cortexadmin.UserIDStatsList
	14, // 38: cortexadmin.CortexAdmin.WriteMetrics:output_type -> cortexadmin.WriteResponse
	22, // 39: cortexadmin.CortexAdmin.Query:output_type -> cortexadmin.QueryResponse
	22, // 40: cortexadmin.CortexAdmin.QueryRange:output_type -> cortexadmin.QueryResponse
	22, // 41: cortexadmin.CortexAdmin.GetRule:output_type -> cortexadmin.QueryResponse
	19, // 42: cortexadmin.CortexAdmin.GetMetricMetadata:output_type -> cortexadmin.MetricMetadata
	29, // 43: cortexadmin.CortexAdmin.ListRules:output_type -> cortexadmin.ListRulesResponse
	40, // 44: cortexadmin.CortexAdmin.LoadRules:output_type -> google.protobuf.Empty
	40, // 45: cortexadmin.CortexAdmin.DeleteRule:output_type -> google.protobuf.Empty
	40, // 46: cortexadmin.CortexAdmin.FlushBlocks:output_type -> google.protobuf.Empty
	9,  // 47: cortexadmin.CortexAdmin.GetSeriesMetrics:output_type -> cortexadmin.SeriesInfoList
	5,  // 48: cortexadmin.CortexAdmin.GetMetricLabelSets:output_type -> cortexadmin.MetricLabels
	41, // 49: cortexadmin.CortexAdmin.GetCortexStatus:output_type -> cortexadmin.CortexStatus
	24, // 50: cortexadmin.CortexAdmin.GetCortexConfig:output_type -> cortexadmin.ConfigResponse
	22, // 51: cortexadmin.CortexAdmin.ExtractRawSeries:output_type -> cortexadmin.QueryResponse
	37, // [37:52] is the sub-list for method output_type
	22, // [22:37] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_init() }
func file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_init() {
	if File_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto != nil {
		return
	}
	file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_status_proto_init()
	file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes[27].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_rawDesc), len(file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_goTypes,
		DependencyIndexes: file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_depIdxs,
		EnumInfos:         file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_enumTypes,
		MessageInfos:      file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_msgTypes,
	}.Build()
	File_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto = out.File
	file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_goTypes = nil
	file_github_com_rancher_opni_plugins_metrics_apis_cortexadmin_cortexadmin_proto_depIdxs = nil
}
