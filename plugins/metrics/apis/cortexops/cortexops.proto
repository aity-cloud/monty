syntax = "proto3";
option go_package = "github.com/rancher/opni/plugins/metrics/pkg/apis/cortexops";

import "google/protobuf/empty.proto";
import "google/protobuf/duration.proto";
import "github.com/rancher/opni/pkg/apis/storage/v1/storage.proto";
import "google/api/annotations.proto";
import "github.com/rancher/opni/internal/codegen/cli/cli.proto";

package cortexops;

option (cli.generator) = {
  generate: true
};


// The CortexOps service contains setup and configuration lifecycle actions for the managed Cortex cluster.
service CortexOps {
  option (cli.command_group) = {
    use: "ops"
  };

  // Gets the current configuration of the managed Cortex cluster.
  rpc GetClusterConfiguration(google.protobuf.Empty) returns (ClusterConfiguration) {
    option (cli.command) = {
      use: "get-configuration";
    };
    option (google.api.http) = {
      get: "/configuration"
    };
  }

  // Updates the configuration of the managed Cortex cluster to match the provided configuration.
  // If the cluster is not installed, it will be configured and installed.
  // Otherwise, the already-installed cluster will be reconfigured.
  //
  // Note: some fields may contain secrets. The placeholder value "***" can be used to
  // keep an existing secret when updating the cluster configuration.
  rpc ConfigureCluster(ClusterConfiguration) returns (google.protobuf.Empty) {
    option (cli.command) = {
      use: "configure";
      // required_flags: ["mode", "storage.backend"];
    };
    option (google.api.http) = {
      post: "/configure"
      body: "*"
    };
  }

  // Gets the current status of the managed Cortex cluster.
  // The status includes the current install state, version, and metadata. If
  // the cluster is in the process of being reconfigured or uninstalled, it will
  // be reflected in the install state.
  // No guarantees are made about the contents of the metadata field; its
  // contents are strictly informational.
  rpc GetClusterStatus(google.protobuf.Empty) returns (InstallStatus) {
    option (cli.command) = {
      use: "status";
    };
    option (google.api.http) = {
      get: "/status"
    };
  }

  // Uninstalls the managed Cortex cluster.
  // Implementation details including error handling and system state requirements
  // are left to the cluster driver, and this API makes no guarantees about
  // the state of the cluster after the call completes (regardless of success).
  rpc UninstallCluster(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (cli.command) = {
      use: "uninstall";
    };
    option (google.api.http) = {
      post: "/uninstall"
    };
  }
}

enum InstallState {
  Unknown = 0;
  NotInstalled = 1;
  Updating = 2;
  Installed = 3;
  Uninstalling = 4;
}

message InstallStatus {
  InstallState state = 1;
  string version = 2;
  map<string, string> metadata = 3;
}

enum DeploymentMode {
  // All components are together in a single process. Not recommended for production use.
  AllInOne = 0;
  // Components are distributed across multiple processes.
  HighlyAvailable = 1;
}

message ClusterConfiguration {
  // The deployment mode to use for Cortex.
  DeploymentMode mode = 1;
  storage.StorageSpec storage = 2;
  GrafanaConfig grafana = 3;
  Workloads workloads = 4;
  CortexConfig cortex = 5;
}

message Workloads {
  CortexWorkloadSpec distributor = 1 [(cli.flag_set).default = {[type.googleapis.com/cortexops.CortexWorkloadSpec]: {replicas: 1}}];
  CortexWorkloadSpec ingester = 2;
  CortexWorkloadSpec compactor = 3;
  CortexWorkloadSpec storeGateway = 4;
  CortexWorkloadSpec ruler = 5;
  CortexWorkloadSpec queryFrontend = 6 [(cli.flag_set).default = {[type.googleapis.com/cortexops.CortexWorkloadSpec]: {replicas: 1}}];
  CortexWorkloadSpec querier = 7;
  CortexWorkloadSpec purger = 8 [(cli.flag_set).default = {[type.googleapis.com/cortexops.CortexWorkloadSpec]: {replicas: 1}}];
}

message CortexWorkloadSpec {
  // Number of replicas to run for this workload. Should be an odd number.
  int32 replicas = 1;
  // Any additional arguments to pass to Cortex.
  repeated string extraArgs = 2;
}

message CortexConfig {
  CompactorConfig compactor = 1;
  QuerierConfig querier = 2;
  DistributorConfig distributor = 3;
  IngesterConfig ingester = 4;
}

message CompactorConfig {
  // List of compaction time ranges
  repeated google.protobuf.Duration blockRanges = 1 [(cli.flag).default="2h,12h,24h"];
  // The frequency at which the compaction runs
  google.protobuf.Duration compactionInterval = 2 [(cli.flag).default="1h"];
  // How frequently compactor should run blocks cleanup and maintenance, as well as update the bucket index
  google.protobuf.Duration cleanupInterval = 3 [(cli.flag).default="15m"];
  // Time before a block marked for deletion is deleted from the bucket
  google.protobuf.Duration deletionDelay = 4 [(cli.flag).default="12h"];
  // For tenants marked for deletion, this is time between deleting of last block, and doing final cleanup (marker files, debug files) of the tenant
  google.protobuf.Duration tenantCleanupDelay = 5 [(cli.flag).default="6h"];
}

message QuerierConfig {
  // The timeout for a query
  google.protobuf.Duration queryTimeout = 1 [(cli.flag).default="2m"];

  // Maximum number of samples a single query can load into memory
  int32 maxSamples = 2 [(cli.flag).default="50e6"];

  // Maximum lookback beyond which queries are not sent to ingester. 0 means all queries are sent to ingester.
  google.protobuf.Duration queryIngestersWithin = 3 [(cli.flag).default="0"];

  // Maximum duration into the future you can query. 0 to disable
  google.protobuf.Duration maxQueryIntoFuture = 4 [(cli.flag).default="10m"];

  // The default evaluation interval or step size for subqueries
  google.protobuf.Duration defaultEvaluationInterval = 5 [(cli.flag).default="1m"];

  // The time after which a metric should be queried from storage and not just ingesters. 0 means all queries are sent to store.
  // When running the blocks storage, if this option is enabled, the time range of the query sent to the store will be manipulated
  // to ensure the query end is not more recent than 'now - query-store-after'.
  google.protobuf.Duration queryStoreAfter = 6 [(cli.flag).default="0"];

  // Time since the last sample after which a time series is considered stale and ignored by expression evaluations
  google.protobuf.Duration lookbackDelta = 7 [(cli.flag).default="5m"];

  // When distributor's sharding strategy is shuffle-sharding and this setting is > 0, queriers fetch in-memory series from
  // the minimum set of required ingesters, selecting only ingesters which may have received series since 'now - lookback period'.
  // The lookback period should be greater or equal than the configured 'query store after' and 'query ingesters within'.
  // If this setting is 0, queriers always query all ingesters (ingesters shuffle sharding on read path is disabled).
  google.protobuf.Duration shuffleShardingIngestersLookbackPeriod = 8 [(cli.flag).default="0"];

  // The maximum number of unique series for which a query can fetch samples from each ingesters and blocks storage. This limit is enforced in the querier, ruler and store-gateway. 0 to disable
  int32 maxFetchedSeriesPerQuery = 9 [(cli.flag).default="0"];
}


message DistributorConfig {
  // Per-user ingestion rate limit in samples per second.
  double ingestionRate = 1 [(cli.flag).default="600000"];

  // Whether the ingestion rate limit should be applied individually to each distributor instance (local), or evenly shared across the cluster (global).
  string ingestionRateStrategy = 2 [(cli.flag).default="local"];

  // Per-user allowed ingestion burst size (in number of samples).
  int32 ingestionBurstSize = 3 [(cli.flag).default="1000000"];
}

message IngesterConfig {
  // The maximum number of active series per user, per ingester. 0 to disable.
  int32 maxLocalSeriesPerUser = 1 [(cli.flag).default="0"];

  // The maximum number of active series per metric name, per ingester. 0 to disable.
  int32 maxLocalSeriesPerMetric = 2 [(cli.flag).default="0"];

  // The maximum number of active series per user, across the cluster before replication. 0 to disable.
  int32 maxGlobalSeriesPerUser = 3 [(cli.flag).default="0"];

  // The maximum number of active series per metric name, across the cluster before replication. 0 to disable.
  int32 maxGlobalSeriesPerMetric = 4 [(cli.flag).default="0"];

  // The maximum number of active metrics with metadata per user, per ingester. 0 to disable.
  int32 maxLocalMetricsWithMetadataPerUser = 5 [(cli.flag).default="0"];

  // The maximum number of metadata per metric, per ingester. 0 to disable.
  int32 maxLocalMetadataPerMetric = 6 [(cli.flag).default="0"];

  // The maximum number of active metrics with metadata per user, across the cluster. 0 to disable.
  int32 maxGlobalMetricsWithMetadataPerUser = 7 [(cli.flag).default="0"];

  // The maximum number of metadata per metric, across the cluster. 0 to disable.
  int32 maxGlobalMetadataPerMetric = 8 [(cli.flag).default="0"];
}

message GrafanaConfig {
  // Whether to deploy a managed Grafana instance.
  bool enabled = 1 [(cli.flag).default="false"];

  // DNS name at which Grafana will be available in the browser.
  string hostname = 2;
}
