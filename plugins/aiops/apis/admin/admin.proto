syntax = "proto3";
option go_package = "github.com/rancher/opni/plugins/aiops/pkg/apis/admin";

import "google/protobuf/empty.proto";
import "google/api/http.proto";
import "google/api/annotations.proto";

package admin;

service AIAdmin {
    rpc GetAISettings(google.protobuf.Empty) returns(AISettings) {
        option (google.api.http) = {
            get: "/ai/settings"
        };
    }
    rpc PutAISettings(AISettings) returns(google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/ai/settings"
        };
    }
    rpc DeleteAISettings(google.protobuf.Empty) returns(google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/ai/settings"
        };
    }
    rpc UpgradeAvailable(google.protobuf.Empty) returns(UpgradeAvailableResponse) {
        option (google.api.http) = {
            get: "/ai/upgrade"
        };
    }
    rpc DoUpgrade(google.protobuf.Empty) returns(google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/ai/upgrade"
        };
    }
    rpc GetRuntimeClasses(google.protobuf.Empty) returns(RuntimeClassResponse) {
        option (google.api.http) = {
            get: "/ai/runtimeclasses"
        };
    }
}

message PretrainedModel {
    optional string httpSource = 2;
    optional string imageSource = 3;
    optional int32 replicas = 4;
}

message GPUSettings {
    optional string runtimeClass = 1;
}

message AISettings {
    optional GPUSettings gpuSettings = 1;
    optional int32 drainReplicas = 2;
    optional PretrainedModel controlplane = 3;
    optional PretrainedModel rancher = 4;
    optional PretrainedModel longhorn = 5;
}

message UpgradeAvailableResponse {
    optional bool UpgradePending = 1;
}

message RuntimeClassResponse {
    repeated string RuntimeClasses = 1;
}