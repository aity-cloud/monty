// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: github.com/rancher/opni/plugins/logging/apis/loggingadmin/loggingadmin.proto

package loggingadmin

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	v1 "k8s.io/api/core/v1"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OpensearchClusterV2 struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ExternalURL       string                 `protobuf:"bytes,1,opt,name=externalURL,proto3" json:"externalURL,omitempty"`
	DataNodes         *DataDetails           `protobuf:"bytes,2,opt,name=dataNodes,proto3" json:"dataNodes,omitempty"`
	IngestNodes       *IngestDetails         `protobuf:"bytes,3,opt,name=ingestNodes,proto3,oneof" json:"ingestNodes,omitempty"`
	ControlplaneNodes *ControlplaneDetails   `protobuf:"bytes,4,opt,name=controlplaneNodes,proto3,oneof" json:"controlplaneNodes,omitempty"`
	Dashboards        *DashboardsDetails     `protobuf:"bytes,5,opt,name=dashboards,proto3,oneof" json:"dashboards,omitempty"`
	DataRetention     *string                `protobuf:"bytes,6,opt,name=dataRetention,proto3,oneof" json:"dataRetention,omitempty"`
	S3                *OpensearchS3Settings  `protobuf:"bytes,7,opt,name=s3,proto3,oneof" json:"s3,omitempty"`
	PodIPRegex        *string                `protobuf:"bytes,8,opt,name=podIPRegex,proto3,oneof" json:"podIPRegex,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *OpensearchClusterV2) Reset() {
	*x = OpensearchClusterV2{}
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpensearchClusterV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpensearchClusterV2) ProtoMessage() {}

func (x *OpensearchClusterV2) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpensearchClusterV2.ProtoReflect.Descriptor instead.
func (*OpensearchClusterV2) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDescGZIP(), []int{0}
}

func (x *OpensearchClusterV2) GetExternalURL() string {
	if x != nil {
		return x.ExternalURL
	}
	return ""
}

func (x *OpensearchClusterV2) GetDataNodes() *DataDetails {
	if x != nil {
		return x.DataNodes
	}
	return nil
}

func (x *OpensearchClusterV2) GetIngestNodes() *IngestDetails {
	if x != nil {
		return x.IngestNodes
	}
	return nil
}

func (x *OpensearchClusterV2) GetControlplaneNodes() *ControlplaneDetails {
	if x != nil {
		return x.ControlplaneNodes
	}
	return nil
}

func (x *OpensearchClusterV2) GetDashboards() *DashboardsDetails {
	if x != nil {
		return x.Dashboards
	}
	return nil
}

func (x *OpensearchClusterV2) GetDataRetention() string {
	if x != nil && x.DataRetention != nil {
		return *x.DataRetention
	}
	return ""
}

func (x *OpensearchClusterV2) GetS3() *OpensearchS3Settings {
	if x != nil {
		return x.S3
	}
	return nil
}

func (x *OpensearchClusterV2) GetPodIPRegex() string {
	if x != nil && x.PodIPRegex != nil {
		return *x.PodIPRegex
	}
	return ""
}

type DataPersistence struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enabled       *bool                  `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	StorageClass  *string                `protobuf:"bytes,2,opt,name=storageClass,proto3,oneof" json:"storageClass,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataPersistence) Reset() {
	*x = DataPersistence{}
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataPersistence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPersistence) ProtoMessage() {}

func (x *DataPersistence) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPersistence.ProtoReflect.Descriptor instead.
func (*DataPersistence) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDescGZIP(), []int{1}
}

func (x *DataPersistence) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *DataPersistence) GetStorageClass() string {
	if x != nil && x.StorageClass != nil {
		return *x.StorageClass
	}
	return ""
}

type CPUResource struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Request       string                 `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	Limit         string                 `protobuf:"bytes,2,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPUResource) Reset() {
	*x = CPUResource{}
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPUResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPUResource) ProtoMessage() {}

func (x *CPUResource) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPUResource.ProtoReflect.Descriptor instead.
func (*CPUResource) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDescGZIP(), []int{2}
}

func (x *CPUResource) GetRequest() string {
	if x != nil {
		return x.Request
	}
	return ""
}

func (x *CPUResource) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

type OpensearchS3Settings struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Endpoint        string                 `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Insecure        bool                   `protobuf:"varint,2,opt,name=insecure,proto3" json:"insecure,omitempty"`
	PathStyleAccess bool                   `protobuf:"varint,3,opt,name=pathStyleAccess,proto3" json:"pathStyleAccess,omitempty"`
	Credentials     *S3Credentials         `protobuf:"bytes,4,opt,name=credentials,proto3" json:"credentials,omitempty"`
	Bucket          string                 `protobuf:"bytes,5,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Folder          *string                `protobuf:"bytes,6,opt,name=folder,proto3,oneof" json:"folder,omitempty"`
	ProxySettings   *ProxySettings         `protobuf:"bytes,7,opt,name=proxySettings,proto3" json:"proxySettings,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *OpensearchS3Settings) Reset() {
	*x = OpensearchS3Settings{}
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpensearchS3Settings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpensearchS3Settings) ProtoMessage() {}

func (x *OpensearchS3Settings) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpensearchS3Settings.ProtoReflect.Descriptor instead.
func (*OpensearchS3Settings) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDescGZIP(), []int{3}
}

func (x *OpensearchS3Settings) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *OpensearchS3Settings) GetInsecure() bool {
	if x != nil {
		return x.Insecure
	}
	return false
}

func (x *OpensearchS3Settings) GetPathStyleAccess() bool {
	if x != nil {
		return x.PathStyleAccess
	}
	return false
}

func (x *OpensearchS3Settings) GetCredentials() *S3Credentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *OpensearchS3Settings) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *OpensearchS3Settings) GetFolder() string {
	if x != nil && x.Folder != nil {
		return *x.Folder
	}
	return ""
}

func (x *OpensearchS3Settings) GetProxySettings() *ProxySettings {
	if x != nil {
		return x.ProxySettings
	}
	return nil
}

type ProxySettings struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProxyHost     string                 `protobuf:"bytes,1,opt,name=proxyHost,proto3" json:"proxyHost,omitempty"`
	ProxyPort     *int32                 `protobuf:"varint,2,opt,name=proxyPort,proto3,oneof" json:"proxyPort,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProxySettings) Reset() {
	*x = ProxySettings{}
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProxySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxySettings) ProtoMessage() {}

func (x *ProxySettings) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxySettings.ProtoReflect.Descriptor instead.
func (*ProxySettings) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDescGZIP(), []int{4}
}

func (x *ProxySettings) GetProxyHost() string {
	if x != nil {
		return x.ProxyHost
	}
	return ""
}

func (x *ProxySettings) GetProxyPort() int32 {
	if x != nil && x.ProxyPort != nil {
		return *x.ProxyPort
	}
	return 0
}

type S3Credentials struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccessKey     string                 `protobuf:"bytes,1,opt,name=accessKey,proto3" json:"accessKey,omitempty"`
	SecretKey     string                 `protobuf:"bytes,2,opt,name=secretKey,proto3" json:"secretKey,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *S3Credentials) Reset() {
	*x = S3Credentials{}
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S3Credentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3Credentials) ProtoMessage() {}

func (x *S3Credentials) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3Credentials.ProtoReflect.Descriptor instead.
func (*S3Credentials) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDescGZIP(), []int{5}
}

func (x *S3Credentials) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *S3Credentials) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

type OpensearchNodeDetails struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Name               string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Replicas           *int32                 `protobuf:"varint,2,opt,name=Replicas,proto3,oneof" json:"Replicas,omitempty"`
	DiskSize           string                 `protobuf:"bytes,3,opt,name=DiskSize,proto3" json:"DiskSize,omitempty"`
	MemoryLimit        string                 `protobuf:"bytes,4,opt,name=MemoryLimit,proto3" json:"MemoryLimit,omitempty"`
	CPUResources       *CPUResource           `protobuf:"bytes,5,opt,name=CPUResources,proto3,oneof" json:"CPUResources,omitempty"`
	EnableAntiAffinity *bool                  `protobuf:"varint,6,opt,name=EnableAntiAffinity,proto3,oneof" json:"EnableAntiAffinity,omitempty"`
	NodeSelector       map[string]string      `protobuf:"bytes,7,rep,name=NodeSelector,proto3" json:"NodeSelector,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Tolerations        []*v1.Toleration       `protobuf:"bytes,8,rep,name=Tolerations,proto3" json:"Tolerations,omitempty"`
	Roles              []string               `protobuf:"bytes,9,rep,name=Roles,proto3" json:"Roles,omitempty"`
	Persistence        *DataPersistence       `protobuf:"bytes,10,opt,name=Persistence,proto3,oneof" json:"Persistence,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *OpensearchNodeDetails) Reset() {
	*x = OpensearchNodeDetails{}
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpensearchNodeDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpensearchNodeDetails) ProtoMessage() {}

func (x *OpensearchNodeDetails) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpensearchNodeDetails.ProtoReflect.Descriptor instead.
func (*OpensearchNodeDetails) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDescGZIP(), []int{6}
}

func (x *OpensearchNodeDetails) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OpensearchNodeDetails) GetReplicas() int32 {
	if x != nil && x.Replicas != nil {
		return *x.Replicas
	}
	return 0
}

func (x *OpensearchNodeDetails) GetDiskSize() string {
	if x != nil {
		return x.DiskSize
	}
	return ""
}

func (x *OpensearchNodeDetails) GetMemoryLimit() string {
	if x != nil {
		return x.MemoryLimit
	}
	return ""
}

func (x *OpensearchNodeDetails) GetCPUResources() *CPUResource {
	if x != nil {
		return x.CPUResources
	}
	return nil
}

func (x *OpensearchNodeDetails) GetEnableAntiAffinity() bool {
	if x != nil && x.EnableAntiAffinity != nil {
		return *x.EnableAntiAffinity
	}
	return false
}

func (x *OpensearchNodeDetails) GetNodeSelector() map[string]string {
	if x != nil {
		return x.NodeSelector
	}
	return nil
}

func (x *OpensearchNodeDetails) GetTolerations() []*v1.Toleration {
	if x != nil {
		return x.Tolerations
	}
	return nil
}

func (x *OpensearchNodeDetails) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *OpensearchNodeDetails) GetPersistence() *DataPersistence {
	if x != nil {
		return x.Persistence
	}
	return nil
}

type DashboardsDetails struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enabled       *bool                  `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	Replicas      *int32                 `protobuf:"varint,2,opt,name=replicas,proto3,oneof" json:"replicas,omitempty"`
	Resources     *ResourceRequirements  `protobuf:"bytes,3,opt,name=resources,proto3" json:"resources,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DashboardsDetails) Reset() {
	*x = DashboardsDetails{}
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DashboardsDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardsDetails) ProtoMessage() {}

func (x *DashboardsDetails) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardsDetails.ProtoReflect.Descriptor instead.
func (*DashboardsDetails) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDescGZIP(), []int{7}
}

func (x *DashboardsDetails) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *DashboardsDetails) GetReplicas() int32 {
	if x != nil && x.Replicas != nil {
		return *x.Replicas
	}
	return 0
}

func (x *DashboardsDetails) GetResources() *ResourceRequirements {
	if x != nil {
		return x.Resources
	}
	return nil
}

type UpgradeAvailableResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	UpgradePending bool                   `protobuf:"varint,1,opt,name=upgradePending,proto3" json:"upgradePending,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UpgradeAvailableResponse) Reset() {
	*x = UpgradeAvailableResponse{}
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradeAvailableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeAvailableResponse) ProtoMessage() {}

func (x *UpgradeAvailableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeAvailableResponse.ProtoReflect.Descriptor instead.
func (*UpgradeAvailableResponse) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDescGZIP(), []int{8}
}

func (x *UpgradeAvailableResponse) GetUpgradePending() bool {
	if x != nil {
		return x.UpgradePending
	}
	return false
}

type UpgradeOptions struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SnapshotCluster bool                   `protobuf:"varint,1,opt,name=snapshotCluster,proto3" json:"snapshotCluster,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UpgradeOptions) Reset() {
	*x = UpgradeOptions{}
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradeOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeOptions) ProtoMessage() {}

func (x *UpgradeOptions) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeOptions.ProtoReflect.Descriptor instead.
func (*UpgradeOptions) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDescGZIP(), []int{9}
}

func (x *UpgradeOptions) GetSnapshotCluster() bool {
	if x != nil {
		return x.SnapshotCluster
	}
	return false
}

type StorageClassResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	StorageClasses []string               `protobuf:"bytes,1,rep,name=storageClasses,proto3" json:"storageClasses,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *StorageClassResponse) Reset() {
	*x = StorageClassResponse{}
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StorageClassResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageClassResponse) ProtoMessage() {}

func (x *StorageClassResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageClassResponse.ProtoReflect.Descriptor instead.
func (*StorageClassResponse) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDescGZIP(), []int{10}
}

func (x *StorageClassResponse) GetStorageClasses() []string {
	if x != nil {
		return x.StorageClasses
	}
	return nil
}

type ResourceRequirements struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Requests      *ComputeResourceQuantities `protobuf:"bytes,1,opt,name=requests,proto3" json:"requests,omitempty"`
	Limits        *ComputeResourceQuantities `protobuf:"bytes,2,opt,name=limits,proto3" json:"limits,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceRequirements) Reset() {
	*x = ResourceRequirements{}
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceRequirements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceRequirements) ProtoMessage() {}

func (x *ResourceRequirements) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceRequirements.ProtoReflect.Descriptor instead.
func (*ResourceRequirements) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDescGZIP(), []int{11}
}

func (x *ResourceRequirements) GetRequests() *ComputeResourceQuantities {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *ResourceRequirements) GetLimits() *ComputeResourceQuantities {
	if x != nil {
		return x.Limits
	}
	return nil
}

type ComputeResourceQuantities struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cpu           string                 `protobuf:"bytes,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory        string                 `protobuf:"bytes,2,opt,name=memory,proto3" json:"memory,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComputeResourceQuantities) Reset() {
	*x = ComputeResourceQuantities{}
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComputeResourceQuantities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputeResourceQuantities) ProtoMessage() {}

func (x *ComputeResourceQuantities) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputeResourceQuantities.ProtoReflect.Descriptor instead.
func (*ComputeResourceQuantities) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDescGZIP(), []int{12}
}

func (x *ComputeResourceQuantities) GetCpu() string {
	if x != nil {
		return x.Cpu
	}
	return ""
}

func (x *ComputeResourceQuantities) GetMemory() string {
	if x != nil {
		return x.Memory
	}
	return ""
}

type StatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        int32                  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Details       string                 `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDescGZIP(), []int{13}
}

func (x *StatusResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *StatusResponse) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

type DataDetails struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Replicas           *int32                 `protobuf:"varint,1,opt,name=replicas,proto3,oneof" json:"replicas,omitempty"`
	DiskSize           string                 `protobuf:"bytes,2,opt,name=diskSize,proto3" json:"diskSize,omitempty"`
	MemoryLimit        string                 `protobuf:"bytes,3,opt,name=memoryLimit,proto3" json:"memoryLimit,omitempty"`
	CpuResources       *CPUResource           `protobuf:"bytes,4,opt,name=cpuResources,proto3,oneof" json:"cpuResources,omitempty"`
	EnableAntiAffinity *bool                  `protobuf:"varint,5,opt,name=enableAntiAffinity,proto3,oneof" json:"enableAntiAffinity,omitempty"`
	NodeSelector       map[string]string      `protobuf:"bytes,6,rep,name=nodeSelector,proto3" json:"nodeSelector,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Tolerations        []*v1.Toleration       `protobuf:"bytes,7,rep,name=tolerations,proto3" json:"tolerations,omitempty"`
	Persistence        *DataPersistence       `protobuf:"bytes,8,opt,name=persistence,proto3,oneof" json:"persistence,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *DataDetails) Reset() {
	*x = DataDetails{}
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataDetails) ProtoMessage() {}

func (x *DataDetails) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataDetails.ProtoReflect.Descriptor instead.
func (*DataDetails) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDescGZIP(), []int{14}
}

func (x *DataDetails) GetReplicas() int32 {
	if x != nil && x.Replicas != nil {
		return *x.Replicas
	}
	return 0
}

func (x *DataDetails) GetDiskSize() string {
	if x != nil {
		return x.DiskSize
	}
	return ""
}

func (x *DataDetails) GetMemoryLimit() string {
	if x != nil {
		return x.MemoryLimit
	}
	return ""
}

func (x *DataDetails) GetCpuResources() *CPUResource {
	if x != nil {
		return x.CpuResources
	}
	return nil
}

func (x *DataDetails) GetEnableAntiAffinity() bool {
	if x != nil && x.EnableAntiAffinity != nil {
		return *x.EnableAntiAffinity
	}
	return false
}

func (x *DataDetails) GetNodeSelector() map[string]string {
	if x != nil {
		return x.NodeSelector
	}
	return nil
}

func (x *DataDetails) GetTolerations() []*v1.Toleration {
	if x != nil {
		return x.Tolerations
	}
	return nil
}

func (x *DataDetails) GetPersistence() *DataPersistence {
	if x != nil {
		return x.Persistence
	}
	return nil
}

type IngestDetails struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Replicas           *int32                 `protobuf:"varint,1,opt,name=replicas,proto3,oneof" json:"replicas,omitempty"`
	MemoryLimit        string                 `protobuf:"bytes,2,opt,name=memoryLimit,proto3" json:"memoryLimit,omitempty"`
	CpuResources       *CPUResource           `protobuf:"bytes,3,opt,name=cpuResources,proto3,oneof" json:"cpuResources,omitempty"`
	EnableAntiAffinity *bool                  `protobuf:"varint,4,opt,name=enableAntiAffinity,proto3,oneof" json:"enableAntiAffinity,omitempty"`
	NodeSelector       map[string]string      `protobuf:"bytes,5,rep,name=nodeSelector,proto3" json:"nodeSelector,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Tolerations        []*v1.Toleration       `protobuf:"bytes,6,rep,name=tolerations,proto3" json:"tolerations,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *IngestDetails) Reset() {
	*x = IngestDetails{}
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngestDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestDetails) ProtoMessage() {}

func (x *IngestDetails) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestDetails.ProtoReflect.Descriptor instead.
func (*IngestDetails) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDescGZIP(), []int{15}
}

func (x *IngestDetails) GetReplicas() int32 {
	if x != nil && x.Replicas != nil {
		return *x.Replicas
	}
	return 0
}

func (x *IngestDetails) GetMemoryLimit() string {
	if x != nil {
		return x.MemoryLimit
	}
	return ""
}

func (x *IngestDetails) GetCpuResources() *CPUResource {
	if x != nil {
		return x.CpuResources
	}
	return nil
}

func (x *IngestDetails) GetEnableAntiAffinity() bool {
	if x != nil && x.EnableAntiAffinity != nil {
		return *x.EnableAntiAffinity
	}
	return false
}

func (x *IngestDetails) GetNodeSelector() map[string]string {
	if x != nil {
		return x.NodeSelector
	}
	return nil
}

func (x *IngestDetails) GetTolerations() []*v1.Toleration {
	if x != nil {
		return x.Tolerations
	}
	return nil
}

type ControlplaneDetails struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Replicas      *int32                 `protobuf:"varint,1,opt,name=replicas,proto3,oneof" json:"replicas,omitempty"`
	NodeSelector  map[string]string      `protobuf:"bytes,2,rep,name=nodeSelector,proto3" json:"nodeSelector,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Tolerations   []*v1.Toleration       `protobuf:"bytes,3,rep,name=tolerations,proto3" json:"tolerations,omitempty"`
	Persistence   *DataPersistence       `protobuf:"bytes,4,opt,name=persistence,proto3,oneof" json:"persistence,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ControlplaneDetails) Reset() {
	*x = ControlplaneDetails{}
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ControlplaneDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlplaneDetails) ProtoMessage() {}

func (x *ControlplaneDetails) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlplaneDetails.ProtoReflect.Descriptor instead.
func (*ControlplaneDetails) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDescGZIP(), []int{16}
}

func (x *ControlplaneDetails) GetReplicas() int32 {
	if x != nil && x.Replicas != nil {
		return *x.Replicas
	}
	return 0
}

func (x *ControlplaneDetails) GetNodeSelector() map[string]string {
	if x != nil {
		return x.NodeSelector
	}
	return nil
}

func (x *ControlplaneDetails) GetTolerations() []*v1.Toleration {
	if x != nil {
		return x.Tolerations
	}
	return nil
}

func (x *ControlplaneDetails) GetPersistence() *DataPersistence {
	if x != nil {
		return x.Persistence
	}
	return nil
}

type SnapshotSchedule struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Ref               *SnapshotReference     `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	CronSchedule      string                 `protobuf:"bytes,3,opt,name=cronSchedule,proto3" json:"cronSchedule,omitempty"`
	Retention         *SnapshotRetention     `protobuf:"bytes,4,opt,name=retention,proto3,oneof" json:"retention,omitempty"`
	AdditionalIndices []string               `protobuf:"bytes,5,rep,name=additionalIndices,proto3" json:"additionalIndices,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SnapshotSchedule) Reset() {
	*x = SnapshotSchedule{}
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SnapshotSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotSchedule) ProtoMessage() {}

func (x *SnapshotSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotSchedule.ProtoReflect.Descriptor instead.
func (*SnapshotSchedule) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDescGZIP(), []int{17}
}

func (x *SnapshotSchedule) GetRef() *SnapshotReference {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *SnapshotSchedule) GetCronSchedule() string {
	if x != nil {
		return x.CronSchedule
	}
	return ""
}

func (x *SnapshotSchedule) GetRetention() *SnapshotRetention {
	if x != nil {
		return x.Retention
	}
	return nil
}

func (x *SnapshotSchedule) GetAdditionalIndices() []string {
	if x != nil {
		return x.AdditionalIndices
	}
	return nil
}

type SnapshotReference struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SnapshotReference) Reset() {
	*x = SnapshotReference{}
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SnapshotReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotReference) ProtoMessage() {}

func (x *SnapshotReference) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotReference.ProtoReflect.Descriptor instead.
func (*SnapshotReference) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDescGZIP(), []int{18}
}

func (x *SnapshotReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type SnapshotRetention struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TimeRetention *string                `protobuf:"bytes,1,opt,name=timeRetention,proto3,oneof" json:"timeRetention,omitempty"`
	MaxSnapshots  *int32                 `protobuf:"varint,2,opt,name=maxSnapshots,proto3,oneof" json:"maxSnapshots,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SnapshotRetention) Reset() {
	*x = SnapshotRetention{}
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SnapshotRetention) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotRetention) ProtoMessage() {}

func (x *SnapshotRetention) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotRetention.ProtoReflect.Descriptor instead.
func (*SnapshotRetention) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDescGZIP(), []int{19}
}

func (x *SnapshotRetention) GetTimeRetention() string {
	if x != nil && x.TimeRetention != nil {
		return *x.TimeRetention
	}
	return ""
}

func (x *SnapshotRetention) GetMaxSnapshots() int32 {
	if x != nil && x.MaxSnapshots != nil {
		return *x.MaxSnapshots
	}
	return 0
}

type SnapshotStatusList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Statuses      []*SnapshotStatus      `protobuf:"bytes,1,rep,name=statuses,proto3" json:"statuses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SnapshotStatusList) Reset() {
	*x = SnapshotStatusList{}
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SnapshotStatusList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotStatusList) ProtoMessage() {}

func (x *SnapshotStatusList) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotStatusList.ProtoReflect.Descriptor instead.
func (*SnapshotStatusList) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDescGZIP(), []int{20}
}

func (x *SnapshotStatusList) GetStatuses() []*SnapshotStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

type SnapshotStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ref           *SnapshotReference     `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	Status        string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	StatusMessage *string                `protobuf:"bytes,3,opt,name=statusMessage,proto3,oneof" json:"statusMessage,omitempty"`
	LastUpdated   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=lastUpdated,proto3" json:"lastUpdated,omitempty"`
	Recurring     bool                   `protobuf:"varint,5,opt,name=recurring,proto3" json:"recurring,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SnapshotStatus) Reset() {
	*x = SnapshotStatus{}
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SnapshotStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotStatus) ProtoMessage() {}

func (x *SnapshotStatus) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotStatus.ProtoReflect.Descriptor instead.
func (*SnapshotStatus) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDescGZIP(), []int{21}
}

func (x *SnapshotStatus) GetRef() *SnapshotReference {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *SnapshotStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SnapshotStatus) GetStatusMessage() string {
	if x != nil && x.StatusMessage != nil {
		return *x.StatusMessage
	}
	return ""
}

func (x *SnapshotStatus) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

func (x *SnapshotStatus) GetRecurring() bool {
	if x != nil {
		return x.Recurring
	}
	return false
}

var File_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto protoreflect.FileDescriptor

const file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDesc = "" +
	"\n" +
	"Lgithub.com/rancher/opni/plugins/logging/apis/loggingadmin/loggingadmin.proto\x12\floggingadmin\x1a\x1bgoogle/protobuf/empty.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x15google/api/http.proto\x1a\x1cgoogle/api/annotations.proto\x1a\"k8s.io/api/core/v1/generated.proto\"\xb6\x04\n" +
	"\x13OpensearchClusterV2\x12 \n" +
	"\vexternalURL\x18\x01 \x01(\tR\vexternalURL\x127\n" +
	"\tdataNodes\x18\x02 \x01(\v2\x19.loggingadmin.DataDetailsR\tdataNodes\x12B\n" +
	"\vingestNodes\x18\x03 \x01(\v2\x1b.loggingadmin.IngestDetailsH\x00R\vingestNodes\x88\x01\x01\x12T\n" +
	"\x11controlplaneNodes\x18\x04 \x01(\v2!.loggingadmin.ControlplaneDetailsH\x01R\x11controlplaneNodes\x88\x01\x01\x12D\n" +
	"\n" +
	"dashboards\x18\x05 \x01(\v2\x1f.loggingadmin.DashboardsDetailsH\x02R\n" +
	"dashboards\x88\x01\x01\x12)\n" +
	"\rdataRetention\x18\x06 \x01(\tH\x03R\rdataRetention\x88\x01\x01\x127\n" +
	"\x02s3\x18\a \x01(\v2\".loggingadmin.OpensearchS3SettingsH\x04R\x02s3\x88\x01\x01\x12#\n" +
	"\n" +
	"podIPRegex\x18\b \x01(\tH\x05R\n" +
	"podIPRegex\x88\x01\x01B\x0e\n" +
	"\f_ingestNodesB\x14\n" +
	"\x12_controlplaneNodesB\r\n" +
	"\v_dashboardsB\x10\n" +
	"\x0e_dataRetentionB\x05\n" +
	"\x03_s3B\r\n" +
	"\v_podIPRegex\"v\n" +
	"\x0fDataPersistence\x12\x1d\n" +
	"\aenabled\x18\x01 \x01(\bH\x00R\aenabled\x88\x01\x01\x12'\n" +
	"\fstorageClass\x18\x02 \x01(\tH\x01R\fstorageClass\x88\x01\x01B\n" +
	"\n" +
	"\b_enabledB\x0f\n" +
	"\r_storageClass\"=\n" +
	"\vCPUResource\x12\x18\n" +
	"\arequest\x18\x01 \x01(\tR\arequest\x12\x14\n" +
	"\x05limit\x18\x02 \x01(\tR\x05limit\"\xba\x02\n" +
	"\x14OpensearchS3Settings\x12\x1a\n" +
	"\bendpoint\x18\x01 \x01(\tR\bendpoint\x12\x1a\n" +
	"\binsecure\x18\x02 \x01(\bR\binsecure\x12(\n" +
	"\x0fpathStyleAccess\x18\x03 \x01(\bR\x0fpathStyleAccess\x12=\n" +
	"\vcredentials\x18\x04 \x01(\v2\x1b.loggingadmin.S3CredentialsR\vcredentials\x12\x16\n" +
	"\x06bucket\x18\x05 \x01(\tR\x06bucket\x12\x1b\n" +
	"\x06folder\x18\x06 \x01(\tH\x00R\x06folder\x88\x01\x01\x12A\n" +
	"\rproxySettings\x18\a \x01(\v2\x1b.loggingadmin.ProxySettingsR\rproxySettingsB\t\n" +
	"\a_folder\"^\n" +
	"\rProxySettings\x12\x1c\n" +
	"\tproxyHost\x18\x01 \x01(\tR\tproxyHost\x12!\n" +
	"\tproxyPort\x18\x02 \x01(\x05H\x00R\tproxyPort\x88\x01\x01B\f\n" +
	"\n" +
	"_proxyPort\"K\n" +
	"\rS3Credentials\x12\x1c\n" +
	"\taccessKey\x18\x01 \x01(\tR\taccessKey\x12\x1c\n" +
	"\tsecretKey\x18\x02 \x01(\tR\tsecretKey\"\x82\x05\n" +
	"\x15OpensearchNodeDetails\x12\x12\n" +
	"\x04Name\x18\x01 \x01(\tR\x04Name\x12\x1f\n" +
	"\bReplicas\x18\x02 \x01(\x05H\x00R\bReplicas\x88\x01\x01\x12\x1a\n" +
	"\bDiskSize\x18\x03 \x01(\tR\bDiskSize\x12 \n" +
	"\vMemoryLimit\x18\x04 \x01(\tR\vMemoryLimit\x12B\n" +
	"\fCPUResources\x18\x05 \x01(\v2\x19.loggingadmin.CPUResourceH\x01R\fCPUResources\x88\x01\x01\x123\n" +
	"\x12EnableAntiAffinity\x18\x06 \x01(\bH\x02R\x12EnableAntiAffinity\x88\x01\x01\x12Y\n" +
	"\fNodeSelector\x18\a \x03(\v25.loggingadmin.OpensearchNodeDetails.NodeSelectorEntryR\fNodeSelector\x12@\n" +
	"\vTolerations\x18\b \x03(\v2\x1e.k8s.io.api.core.v1.TolerationR\vTolerations\x12\x14\n" +
	"\x05Roles\x18\t \x03(\tR\x05Roles\x12D\n" +
	"\vPersistence\x18\n" +
	" \x01(\v2\x1d.loggingadmin.DataPersistenceH\x03R\vPersistence\x88\x01\x01\x1a?\n" +
	"\x11NodeSelectorEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\v\n" +
	"\t_ReplicasB\x0f\n" +
	"\r_CPUResourcesB\x15\n" +
	"\x13_EnableAntiAffinityB\x0e\n" +
	"\f_Persistence\"\xae\x01\n" +
	"\x11DashboardsDetails\x12\x1d\n" +
	"\aenabled\x18\x01 \x01(\bH\x00R\aenabled\x88\x01\x01\x12\x1f\n" +
	"\breplicas\x18\x02 \x01(\x05H\x01R\breplicas\x88\x01\x01\x12@\n" +
	"\tresources\x18\x03 \x01(\v2\".loggingadmin.ResourceRequirementsR\tresourcesB\n" +
	"\n" +
	"\b_enabledB\v\n" +
	"\t_replicas\"B\n" +
	"\x18UpgradeAvailableResponse\x12&\n" +
	"\x0eupgradePending\x18\x01 \x01(\bR\x0eupgradePending\":\n" +
	"\x0eUpgradeOptions\x12(\n" +
	"\x0fsnapshotCluster\x18\x01 \x01(\bR\x0fsnapshotCluster\">\n" +
	"\x14StorageClassResponse\x12&\n" +
	"\x0estorageClasses\x18\x01 \x03(\tR\x0estorageClasses\"\x9c\x01\n" +
	"\x14ResourceRequirements\x12C\n" +
	"\brequests\x18\x01 \x01(\v2'.loggingadmin.ComputeResourceQuantitiesR\brequests\x12?\n" +
	"\x06limits\x18\x02 \x01(\v2'.loggingadmin.ComputeResourceQuantitiesR\x06limits\"E\n" +
	"\x19ComputeResourceQuantities\x12\x10\n" +
	"\x03cpu\x18\x01 \x01(\tR\x03cpu\x12\x16\n" +
	"\x06memory\x18\x02 \x01(\tR\x06memory\"B\n" +
	"\x0eStatusResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\x05R\x06status\x12\x18\n" +
	"\adetails\x18\x02 \x01(\tR\adetails\"\xc4\x04\n" +
	"\vDataDetails\x12\x1f\n" +
	"\breplicas\x18\x01 \x01(\x05H\x00R\breplicas\x88\x01\x01\x12\x1a\n" +
	"\bdiskSize\x18\x02 \x01(\tR\bdiskSize\x12 \n" +
	"\vmemoryLimit\x18\x03 \x01(\tR\vmemoryLimit\x12B\n" +
	"\fcpuResources\x18\x04 \x01(\v2\x19.loggingadmin.CPUResourceH\x01R\fcpuResources\x88\x01\x01\x123\n" +
	"\x12enableAntiAffinity\x18\x05 \x01(\bH\x02R\x12enableAntiAffinity\x88\x01\x01\x12O\n" +
	"\fnodeSelector\x18\x06 \x03(\v2+.loggingadmin.DataDetails.NodeSelectorEntryR\fnodeSelector\x12@\n" +
	"\vtolerations\x18\a \x03(\v2\x1e.k8s.io.api.core.v1.TolerationR\vtolerations\x12D\n" +
	"\vpersistence\x18\b \x01(\v2\x1d.loggingadmin.DataPersistenceH\x03R\vpersistence\x88\x01\x01\x1a?\n" +
	"\x11NodeSelectorEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\v\n" +
	"\t_replicasB\x0f\n" +
	"\r_cpuResourcesB\x15\n" +
	"\x13_enableAntiAffinityB\x0e\n" +
	"\f_persistence\"\xd6\x03\n" +
	"\rIngestDetails\x12\x1f\n" +
	"\breplicas\x18\x01 \x01(\x05H\x00R\breplicas\x88\x01\x01\x12 \n" +
	"\vmemoryLimit\x18\x02 \x01(\tR\vmemoryLimit\x12B\n" +
	"\fcpuResources\x18\x03 \x01(\v2\x19.loggingadmin.CPUResourceH\x01R\fcpuResources\x88\x01\x01\x123\n" +
	"\x12enableAntiAffinity\x18\x04 \x01(\bH\x02R\x12enableAntiAffinity\x88\x01\x01\x12Q\n" +
	"\fnodeSelector\x18\x05 \x03(\v2-.loggingadmin.IngestDetails.NodeSelectorEntryR\fnodeSelector\x12@\n" +
	"\vtolerations\x18\x06 \x03(\v2\x1e.k8s.io.api.core.v1.TolerationR\vtolerations\x1a?\n" +
	"\x11NodeSelectorEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\v\n" +
	"\t_replicasB\x0f\n" +
	"\r_cpuResourcesB\x15\n" +
	"\x13_enableAntiAffinity\"\xf5\x02\n" +
	"\x13ControlplaneDetails\x12\x1f\n" +
	"\breplicas\x18\x01 \x01(\x05H\x00R\breplicas\x88\x01\x01\x12W\n" +
	"\fnodeSelector\x18\x02 \x03(\v23.loggingadmin.ControlplaneDetails.NodeSelectorEntryR\fnodeSelector\x12@\n" +
	"\vtolerations\x18\x03 \x03(\v2\x1e.k8s.io.api.core.v1.TolerationR\vtolerations\x12D\n" +
	"\vpersistence\x18\x04 \x01(\v2\x1d.loggingadmin.DataPersistenceH\x01R\vpersistence\x88\x01\x01\x1a?\n" +
	"\x11NodeSelectorEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\v\n" +
	"\t_replicasB\x0e\n" +
	"\f_persistence\"\xe9\x01\n" +
	"\x10SnapshotSchedule\x121\n" +
	"\x03ref\x18\x01 \x01(\v2\x1f.loggingadmin.SnapshotReferenceR\x03ref\x12\"\n" +
	"\fcronSchedule\x18\x03 \x01(\tR\fcronSchedule\x12B\n" +
	"\tretention\x18\x04 \x01(\v2\x1f.loggingadmin.SnapshotRetentionH\x00R\tretention\x88\x01\x01\x12,\n" +
	"\x11additionalIndices\x18\x05 \x03(\tR\x11additionalIndicesB\f\n" +
	"\n" +
	"_retention\"'\n" +
	"\x11SnapshotReference\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\"\x8a\x01\n" +
	"\x11SnapshotRetention\x12)\n" +
	"\rtimeRetention\x18\x01 \x01(\tH\x00R\rtimeRetention\x88\x01\x01\x12'\n" +
	"\fmaxSnapshots\x18\x02 \x01(\x05H\x01R\fmaxSnapshots\x88\x01\x01B\x10\n" +
	"\x0e_timeRetentionB\x0f\n" +
	"\r_maxSnapshots\"N\n" +
	"\x12SnapshotStatusList\x128\n" +
	"\bstatuses\x18\x01 \x03(\v2\x1c.loggingadmin.SnapshotStatusR\bstatuses\"\xf4\x01\n" +
	"\x0eSnapshotStatus\x121\n" +
	"\x03ref\x18\x01 \x01(\v2\x1f.loggingadmin.SnapshotReferenceR\x03ref\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status\x12)\n" +
	"\rstatusMessage\x18\x03 \x01(\tH\x00R\rstatusMessage\x88\x01\x01\x12<\n" +
	"\vlastUpdated\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\vlastUpdated\x12\x1c\n" +
	"\trecurring\x18\x05 \x01(\bR\trecurringB\x10\n" +
	"\x0e_statusMessage2\xe2\t\n" +
	"\x0eLoggingAdminV2\x12k\n" +
	"\x14GetOpensearchCluster\x12\x16.google.protobuf.Empty\x1a!.loggingadmin.OpensearchClusterV2\"\x18\x82\xd3\xe4\x93\x02\x12\x12\x10/logging/cluster\x12c\n" +
	"\x17DeleteOpensearchCluster\x12\x16.google.protobuf.Empty\x1a\x16.google.protobuf.Empty\"\x18\x82\xd3\xe4\x93\x02\x12*\x10/logging/cluster\x12y\n" +
	"\x1fCreateOrUpdateOpensearchCluster\x12!.loggingadmin.OpensearchClusterV2\x1a\x16.google.protobuf.Empty\"\x1b\x82\xd3\xe4\x93\x02\x15:\x01*\x1a\x10/logging/cluster\x12v\n" +
	"\x10UpgradeAvailable\x12\x16.google.protobuf.Empty\x1a&.loggingadmin.UpgradeAvailableResponse\"\"\x82\xd3\xe4\x93\x02\x1c\x12\x1a/logging/upgrade/available\x12^\n" +
	"\tDoUpgrade\x12\x1c.loggingadmin.UpgradeOptions\x1a\x16.google.protobuf.Empty\"\x1b\x82\xd3\xe4\x93\x02\x15\"\x13/logging/upgrade/do\x12p\n" +
	"\x11GetStorageClasses\x12\x16.google.protobuf.Empty\x1a\".loggingadmin.StorageClassResponse\"\x1f\x82\xd3\xe4\x93\x02\x19\x12\x17/logging/storageclasses\x12d\n" +
	"\x13GetOpensearchStatus\x12\x16.google.protobuf.Empty\x1a\x1c.loggingadmin.StatusResponse\"\x17\x82\xd3\xe4\x93\x02\x11\x12\x0f/logging/status\x12v\n" +
	"\x1eCreateOrUpdateSnapshotSchedule\x12\x1e.loggingadmin.SnapshotSchedule\x1a\x16.google.protobuf.Empty\"\x1c\x82\xd3\xe4\x93\x02\x16:\x01*\x1a\x11/logging/snapshot\x12x\n" +
	"\x13GetSnapshotSchedule\x12\x1f.loggingadmin.SnapshotReference\x1a\x1e.loggingadmin.SnapshotSchedule\" \x82\xd3\xe4\x93\x02\x1a\x12\x18/logging/snapshot/{name}\x12s\n" +
	"\x16DeleteSnapshotSchedule\x12\x1f.loggingadmin.SnapshotReference\x1a\x16.google.protobuf.Empty\" \x82\xd3\xe4\x93\x02\x1a*\x18/logging/snapshot/{name}\x12l\n" +
	"\x15ListSnapshotSchedules\x12\x16.google.protobuf.Empty\x1a .loggingadmin.SnapshotStatusList\"\x19\x82\xd3\xe4\x93\x02\x13\x12\x11/logging/snapshotB;Z9github.com/rancher/opni/plugins/logging/apis/loggingadminb\x06proto3"

var (
	file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDescOnce sync.Once
	file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDescData []byte
)

func file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDescGZIP() []byte {
	file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDescOnce.Do(func() {
		file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDesc), len(file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDesc)))
	})
	return file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDescData
}

var file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_goTypes = []any{
	(*OpensearchClusterV2)(nil),       // 0: loggingadmin.OpensearchClusterV2
	(*DataPersistence)(nil),           // 1: loggingadmin.DataPersistence
	(*CPUResource)(nil),               // 2: loggingadmin.CPUResource
	(*OpensearchS3Settings)(nil),      // 3: loggingadmin.OpensearchS3Settings
	(*ProxySettings)(nil),             // 4: loggingadmin.ProxySettings
	(*S3Credentials)(nil),             // 5: loggingadmin.S3Credentials
	(*OpensearchNodeDetails)(nil),     // 6: loggingadmin.OpensearchNodeDetails
	(*DashboardsDetails)(nil),         // 7: loggingadmin.DashboardsDetails
	(*UpgradeAvailableResponse)(nil),  // 8: loggingadmin.UpgradeAvailableResponse
	(*UpgradeOptions)(nil),            // 9: loggingadmin.UpgradeOptions
	(*StorageClassResponse)(nil),      // 10: loggingadmin.StorageClassResponse
	(*ResourceRequirements)(nil),      // 11: loggingadmin.ResourceRequirements
	(*ComputeResourceQuantities)(nil), // 12: loggingadmin.ComputeResourceQuantities
	(*StatusResponse)(nil),            // 13: loggingadmin.StatusResponse
	(*DataDetails)(nil),               // 14: loggingadmin.DataDetails
	(*IngestDetails)(nil),             // 15: loggingadmin.IngestDetails
	(*ControlplaneDetails)(nil),       // 16: loggingadmin.ControlplaneDetails
	(*SnapshotSchedule)(nil),          // 17: loggingadmin.SnapshotSchedule
	(*SnapshotReference)(nil),         // 18: loggingadmin.SnapshotReference
	(*SnapshotRetention)(nil),         // 19: loggingadmin.SnapshotRetention
	(*SnapshotStatusList)(nil),        // 20: loggingadmin.SnapshotStatusList
	(*SnapshotStatus)(nil),            // 21: loggingadmin.SnapshotStatus
	nil,                               // 22: loggingadmin.OpensearchNodeDetails.NodeSelectorEntry
	nil,                               // 23: loggingadmin.DataDetails.NodeSelectorEntry
	nil,                               // 24: loggingadmin.IngestDetails.NodeSelectorEntry
	nil,                               // 25: loggingadmin.ControlplaneDetails.NodeSelectorEntry
	(*v1.Toleration)(nil),             // 26: k8s.io.api.core.v1.Toleration
	(*timestamppb.Timestamp)(nil),     // 27: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),             // 28: google.protobuf.Empty
}
var file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_depIdxs = []int32{
	14, // 0: loggingadmin.OpensearchClusterV2.dataNodes:type_name -> loggingadmin.DataDetails
	15, // 1: loggingadmin.OpensearchClusterV2.ingestNodes:type_name -> loggingadmin.IngestDetails
	16, // 2: loggingadmin.OpensearchClusterV2.controlplaneNodes:type_name -> loggingadmin.ControlplaneDetails
	7,  // 3: loggingadmin.OpensearchClusterV2.dashboards:type_name -> loggingadmin.DashboardsDetails
	3,  // 4: loggingadmin.OpensearchClusterV2.s3:type_name -> loggingadmin.OpensearchS3Settings
	5,  // 5: loggingadmin.OpensearchS3Settings.credentials:type_name -> loggingadmin.S3Credentials
	4,  // 6: loggingadmin.OpensearchS3Settings.proxySettings:type_name -> loggingadmin.ProxySettings
	2,  // 7: loggingadmin.OpensearchNodeDetails.CPUResources:type_name -> loggingadmin.CPUResource
	22, // 8: loggingadmin.OpensearchNodeDetails.NodeSelector:type_name -> loggingadmin.OpensearchNodeDetails.NodeSelectorEntry
	26, // 9: loggingadmin.OpensearchNodeDetails.Tolerations:type_name -> k8s.io.api.core.v1.Toleration
	1,  // 10: loggingadmin.OpensearchNodeDetails.Persistence:type_name -> loggingadmin.DataPersistence
	11, // 11: loggingadmin.DashboardsDetails.resources:type_name -> loggingadmin.ResourceRequirements
	12, // 12: loggingadmin.ResourceRequirements.requests:type_name -> loggingadmin.ComputeResourceQuantities
	12, // 13: loggingadmin.ResourceRequirements.limits:type_name -> loggingadmin.ComputeResourceQuantities
	2,  // 14: loggingadmin.DataDetails.cpuResources:type_name -> loggingadmin.CPUResource
	23, // 15: loggingadmin.DataDetails.nodeSelector:type_name -> loggingadmin.DataDetails.NodeSelectorEntry
	26, // 16: loggingadmin.DataDetails.tolerations:type_name -> k8s.io.api.core.v1.Toleration
	1,  // 17: loggingadmin.DataDetails.persistence:type_name -> loggingadmin.DataPersistence
	2,  // 18: loggingadmin.IngestDetails.cpuResources:type_name -> loggingadmin.CPUResource
	24, // 19: loggingadmin.IngestDetails.nodeSelector:type_name -> loggingadmin.IngestDetails.NodeSelectorEntry
	26, // 20: loggingadmin.IngestDetails.tolerations:type_name -> k8s.io.api.core.v1.Toleration
	25, // 21: loggingadmin.ControlplaneDetails.nodeSelector:type_name -> loggingadmin.ControlplaneDetails.NodeSelectorEntry
	26, // 22: loggingadmin.ControlplaneDetails.tolerations:type_name -> k8s.io.api.core.v1.Toleration
	1,  // 23: loggingadmin.ControlplaneDetails.persistence:type_name -> loggingadmin.DataPersistence
	18, // 24: loggingadmin.SnapshotSchedule.ref:type_name -> loggingadmin.SnapshotReference
	19, // 25: loggingadmin.SnapshotSchedule.retention:type_name -> loggingadmin.SnapshotRetention
	21, // 26: loggingadmin.SnapshotStatusList.statuses:type_name -> loggingadmin.SnapshotStatus
	18, // 27: loggingadmin.SnapshotStatus.ref:type_name -> loggingadmin.SnapshotReference
	27, // 28: loggingadmin.SnapshotStatus.lastUpdated:type_name -> google.protobuf.Timestamp
	28, // 29: loggingadmin.LoggingAdminV2.GetOpensearchCluster:input_type -> google.protobuf.Empty
	28, // 30: loggingadmin.LoggingAdminV2.DeleteOpensearchCluster:input_type -> google.protobuf.Empty
	0,  // 31: loggingadmin.LoggingAdminV2.CreateOrUpdateOpensearchCluster:input_type -> loggingadmin.OpensearchClusterV2
	28, // 32: loggingadmin.LoggingAdminV2.UpgradeAvailable:input_type -> google.protobuf.Empty
	9,  // 33: loggingadmin.LoggingAdminV2.DoUpgrade:input_type -> loggingadmin.UpgradeOptions
	28, // 34: loggingadmin.LoggingAdminV2.GetStorageClasses:input_type -> google.protobuf.Empty
	28, // 35: loggingadmin.LoggingAdminV2.GetOpensearchStatus:input_type -> google.protobuf.Empty
	17, // 36: loggingadmin.LoggingAdminV2.CreateOrUpdateSnapshotSchedule:input_type -> loggingadmin.SnapshotSchedule
	18, // 37: loggingadmin.LoggingAdminV2.GetSnapshotSchedule:input_type -> loggingadmin.SnapshotReference
	18, // 38: loggingadmin.LoggingAdminV2.DeleteSnapshotSchedule:input_type -> loggingadmin.SnapshotReference
	28, // 39: loggingadmin.LoggingAdminV2.ListSnapshotSchedules:input_type -> google.protobuf.Empty
	0,  // 40: loggingadmin.LoggingAdminV2.GetOpensearchCluster:output_type -> loggingadmin.OpensearchClusterV2
	28, // 41: loggingadmin.LoggingAdminV2.DeleteOpensearchCluster:output_type -> google.protobuf.Empty
	28, // 42: loggingadmin.LoggingAdminV2.CreateOrUpdateOpensearchCluster:output_type -> google.protobuf.Empty
	8,  // 43: loggingadmin.LoggingAdminV2.UpgradeAvailable:output_type -> loggingadmin.UpgradeAvailableResponse
	28, // 44: loggingadmin.LoggingAdminV2.DoUpgrade:output_type -> google.protobuf.Empty
	10, // 45: loggingadmin.LoggingAdminV2.GetStorageClasses:output_type -> loggingadmin.StorageClassResponse
	13, // 46: loggingadmin.LoggingAdminV2.GetOpensearchStatus:output_type -> loggingadmin.StatusResponse
	28, // 47: loggingadmin.LoggingAdminV2.CreateOrUpdateSnapshotSchedule:output_type -> google.protobuf.Empty
	17, // 48: loggingadmin.LoggingAdminV2.GetSnapshotSchedule:output_type -> loggingadmin.SnapshotSchedule
	28, // 49: loggingadmin.LoggingAdminV2.DeleteSnapshotSchedule:output_type -> google.protobuf.Empty
	20, // 50: loggingadmin.LoggingAdminV2.ListSnapshotSchedules:output_type -> loggingadmin.SnapshotStatusList
	40, // [40:51] is the sub-list for method output_type
	29, // [29:40] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_init() }
func file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_init() {
	if File_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto != nil {
		return
	}
	file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[0].OneofWrappers = []any{}
	file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[1].OneofWrappers = []any{}
	file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[3].OneofWrappers = []any{}
	file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[4].OneofWrappers = []any{}
	file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[6].OneofWrappers = []any{}
	file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[7].OneofWrappers = []any{}
	file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[14].OneofWrappers = []any{}
	file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[15].OneofWrappers = []any{}
	file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[16].OneofWrappers = []any{}
	file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[17].OneofWrappers = []any{}
	file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[19].OneofWrappers = []any{}
	file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes[21].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDesc), len(file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_goTypes,
		DependencyIndexes: file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_depIdxs,
		MessageInfos:      file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_msgTypes,
	}.Build()
	File_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto = out.File
	file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_goTypes = nil
	file_github_com_rancher_opni_plugins_logging_apis_loggingadmin_loggingadmin_proto_depIdxs = nil
}
